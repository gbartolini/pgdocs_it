<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

<appendix id="cvs">
 <appendixinfo>
  <authorgroup>
   <author>
    <firstname>Marc</firstname>
    <surname>Fournier</surname>
   </author>
   <author>
    <firstname>Tom</firstname>
    <surname>Lane</surname>
   </author>
   <author>
    <firstname>Thomas</firstname>
    <surname>Lockhart</surname>
   </author>
   <author>
    <firstname>David</firstname>
    <surname>Fetter</surname>
   </author>
  </authorgroup>
  <date>1999-05-20</date>
 </appendixinfo>

 <title>Il repository del codice sorgente</title>

 <para>
  Il codice sorgente di <productname>PostgreSQL</productname> è
  conservato e gestito utilizzando il sistema di controllo versione
  <productname>CVS</productname>. È anche disponibile un mirror 
  ufficiale che utilizza <productname>Git</productname> per coloro che
  desiderano utilizzare un sistema di controllo versione distribuito.
  Questo mirror viene automaticamente aggiornato ogni qual volta il
  repository principale cambia, così che contiene sempre l'ultima
  versione di tutte le branche.
 </para>

 <para>
  Utilizzare <productname>Git</productname> è il modo più flessibile di
  lavorare con il sorgente, e permette di lavorare off line senza avere
  necessità di accesso costante ai server del progetto.
  Anche <productname>CVS</productname> basato su 
  <productname>rsync</productname> permette di lavorare off line ma è 
  carente di alcuni degli altri vantaggi ripetto a
  <productname>Git</productname>.
 </para>

 <para>
  I nostri wiki, <ulink
  url="http://wiki.postgresql.org/wiki/Working_with_CVS"></ulink> e
  <ulink url="http://wiki.postgresql.org/wiki/Working_with_Git"></ulink>,
  contengono dettagli ulteriori riguardo la possibilità di lavorare con 
  CVS e Git.
 </para>

 <sect1 id="git">
  <title>Ottenere il sorgente mediante <productname>Git</productname></title>

  <para>
   Mediante <productname>Git</productname> si otterrà una copia
   dell'intero repository di codice sulla propria macchian locale, così
   da avere accesso a tutta la storia e branche off line. Questo è il
   modo più veloce e più flessibile per sviluppare e testare le patche.
  </para>

  <procedure>
   <title>Git</title>

   <step>
    <para>
     Si avrà la necessità di una versione di
     <productname>Git</productname> installata, che si può ottenere da
     <ulink url="http://git-scm.com"></ulink>. Alcuni sistemi hanno
     anche una recente versione di <application>Git</application>
     installata in maniera predefinita, o disponibile nel proprio 
     sistema  di repository dei pacchetti.
    </para>
   </step>

   <step>
    <para>
     Per utilizzare il repository Git, clonare il mirror ufficiale:

<programlisting>
git clone git://git.postgresql.org/git/postgresql.git
</programlisting>

     Questo comando copierà l'intero repository sulla propria macchina 
     locale, così ci vorrà un po' di tempo per completarlo, specialmente 
     se si possiede una connessione Internet lenta.
    </para>

    <para>
     Il mirror Git può anche essere raggiunto tramite il protocollo http
     nel caso in cui per esempio un firewall stia bloccando il 
     protocollo Git. Semplicemente rimpiazzare l'indirizzo con uno del
     tipo:

<programlisting>
git clone http://git.postgresql.org/git/postgresql.git
</programlisting>

     Il protocotto HTTP è meno efficiente del protocollo Git, così sarà
     leggermente più lento da utilizzare.
    </para>
   </step>

   <step>
    <para>
     Ogni qual volta si desidere ottenere gli utlimi aggiornamenti nel
     sistema, <command>cd</command> all'interno del repository e
     avviare il comando:

<programlisting>
git fetch
</programlisting>

    </para>
   </step>
  </procedure>
  
  <para>
   <productname>Git</productname> può fare molte più cose oltre che
   recuperare il sorgente. Per maggiori informazioni, consultare la 
   pagina man del prodotto, o il sito web all'indirizzo
   <ulink url="http://git-scm.com"></ulink>.
  </para>
 </sect1>

 <sect1 id="anoncvs">
  <title>Recuperare il sorgente mediante<productname>CVS</productname> anonimo</title>

  <para>
   Se si desidera restare al passo con il sorgente attuale su base
   regolare, si può recuperarlo da un server
   <productname>CVS</productname> e poi utilizzare
   <productname>CVS</productname> per recuperare gli aggiornamenti di
   volta in volta.
  </para>

  <procedure>
   <title>CVS anonimo</title>

   <step>
    <para>
     Sarà necessaria una copia locale di <productname>CVS</productname>
     (Concurrent Version Control System), che può essere recuperata da
     <ulink url="http://www.nongnu.org/cvs/"></ulink> (il sito ufficiale
     con l'ultima versione) o da qualsiasi archivio di software GNU
     (spesso un po' obsoleto). Alcuni sistemi posseggono una versione
     recente di <application>cvs</application> installata in maniera
     predefinita.
    </para>
   </step>

   <step>
    <para>
     Effettuare un login iniziale al server
     <application>CVS</application>:

<programlisting>
cvs -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot login
</programlisting>

     Verrà richiesta una password; si può introdurre qualsiasi cosa 
     tranne una stringa vuota.
    </para>

    <para>
     Si avrà la necessità di farlo solo una volta, siccome la
     password sarà salvata nel file <filename>.cvspass</filename> nella
     propria directory home.
    </para>
   </step>

   <step>
    <para>
     Recuperare i sorgenti <productname>PostgreSQL</productname>:
     
<programlisting>
cvs -z3 -d :pserver:anoncvs@anoncvs.postgresql.org:/projects/cvsroot co -P pgsql
</programlisting>

     Il comando installa i sorgenti
     <productname>PostgreSQL</productname> in una subdirectory
     <filename>pgsql</filename> della directory nella quale ci si trova 
     al momento.
    </para>

    <para>
     Questa verifica iniziale è leggermente lenta ripetto al semplice
     download di un file <filename>tar.gz</filename>. Il vantaggio di
     <productname>CVS</productname> non sarà evidente finché si vorrà
     aggiornare l'insieme di file più tardi.
    </para>
   </step>

   <step>
    <para>
     Ogni volta che si desidera aggiornare agli ultimi sorgenti
     <productname>CVS</productname>, <command>cd</command> all'interno
     della subdirectory <filename>pgsql</filename> e dare il comando:
     
<programlisting>
cvs -z3 update -d -P
</programlisting>

     Verranno recuperate solo le modifiche siccome l'ultima volta si è
     aggiornato.
     Si può aggiornare in appena un paio di minuti, solitamente, anche
     mediante una linea a velocità di modem.
    </para>
   </step>

   <step>
    <para>
     &Egrave; possibile risparmiare un po' di battiture creando un file
     <filename>.cvsrc</filename> all'interno della propria directory 
     home che contenga:

<programlisting>
cvs -z3
update -d -P
</programlisting>

     Questo fornisce l'opzione' <option>-z3</option> a tutti i comandi
     <command>cvs</command>, e le opzioni <option>-d</option> e
     <option>-P</option> a <command>cvs update</command>.   Poi basta 
     dare il comando:
     
<programlisting>
cvs update
</programlisting>

     per aggiornare i propri file.
    </para>
   </step>
  </procedure>

  <para>
   <productname>CVS</productname> può fare un mucchio di altre cosa, 
   tipo recuperare precedenti versioni dei sorgenti di
   <productname>PostgreSQL</productname> piuttosto che l'ultima versione
   di sviluppo. Per maggiori informazioni consultare il manuale fornito
   con <productname>CVS</productname>, o consultare la documentazione
   online su <ulink url="http://www.nongnu.org/cvs/"></ulink>.
  </para>
  
  <para>
   <productname>CVS</productname> ha dei difetti. Per esempio, generare
   differenze che aggiungono o rimuovono file richiede l'accesso in
   scrittura al repository CVS. Per rimediare a questo difetto, usare
   <productname>cvsutils</productname>, che è pacchettizzato in
   numerosi sistemi operativi, ed è disponibile in formato sorgente su
   <ulink url="http://www.red-bean.com/cvsutils/"></ulink>, oppure
   utilizzare <productname>Git</productname> o un altro sistema 
   progettato per lavorare offline.
  </para>

  <para>
   Si noti che compilare <productname>PostgreSQL</productname> da un
   insieme CVS richiede una versione ragionevolmente aggiornata di
   <application>bison</application> e <application>flex</application>,
   che non sono necessari per compilare da una distribuzione tarball
   perché i file creati con essa sono precompilati in un file tarball.
   Sarà anche necessario Perl.
   In caso contrario, i requisiti strumentali sono gli stessi necessari
   per compilare da sorgente.
  </para>
 </sect1>

 <sect1 id="rsync">
  <title>Ottenere il sorgente tramite <productname>rsync</productname></title>

  <para>
   Un'alternativa all'utilizzo di CVS anonimo per recuperare l'albero
   del sorgente di <productname>PostgreSQL</productname> è
   <productname>rsync</productname>, uno strumento di trasferimento file
   di tipo incrementale. Il principale vantaggio ad utilizzare
   <productname>rsync</productname> al posto di
   <productname>cvs</productname> nudo e crudo, e che esso può replicare
   in modo affidabile l'<emphasis>intero</emphasis> repository CVS sul
   proprio sistema locale, permettendo un accesso locale veloce alle
   operazioni <command>cvs</command> tipo <option>log</option> e
   <option>diff</option>.
   Altri vantaggi comprendono la sincronizzazione rapida al server
   <productname>PostgreSQL</productname> a causa di un efficiente
   protocollo di trasferimento che trasmette solo le modifiche apportate 
   dopo l'ultimo aggiornamento.
  </para>

  <para>
   Si può scaricare il repository CVS usando questo comando:
   
<programlisting>
rsync -avzH --delete anoncvs.postgresql.org::pgsql-cvs cvsroot/
</programlisting>

   Per le istruzioni complete, vedere la sezione "rsync" nella
   <ulink url="http://pgfoundry.org/docman/view.php/1000040/4/PGBuildFarm-HOWTO.txt">
   PostgreSQL Build Farm instructions</ulink>.
  </para>
  
 </sect1>
 
</appendix>
