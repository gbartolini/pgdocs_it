<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

<chapter id="runtime">
 <title>Setup e operatività del server</title>

 <para>
Questo capitolo discute come impostare ed eseguire il server database
e le sue interazioni con il sistema operativo.
 </para>

 <sect1 id="postgres-user">
  <title>L'account utente <productname>PostgreSQL</productname></title>

  <indexterm>
   <primary>utente postgres</primary>
  </indexterm>

  <para>
Come con qualsiasi demone server che è accessibile al mondo esterno,
è consigliabile eseguire <productname>PostgreSQL</productname>  con 
un account utente separato. Questo account dovrebbe possedere solo i dati che 
sono gestiti dal server, e non dovrebbe essere condiviso con altri demoni.
(Per esempio, usare l'utente <literal>nobody</literal> è una cattiva idea).
Non è consigliabile installare eseguibili posseduti da questo utente 
dato che sistemi compromessi potrebbero modificare i propri
binari.
  </para>

  <para>
Per aggiungere un account utente Unix al proprio sistema, cercare un comando 
<command>useradd</command> o <command>adduser</command>. Il nome utente 
<systemitem>postgres</systemitem> è usato spesso, e assunto per tutto questo libro,
ma si può usare un altro nome se lo si desidera.
  </para>
 </sect1>

 <sect1 id="creating-cluster">
  <title>Creare un cluster di database</title>

  <indexterm>
   <primary>cluster di database</primary>
  </indexterm>

  <indexterm>
   <primary>area dati</primary>
   <see>cluster di database</see>
  </indexterm>

  <para>
Prima che si possa fare qualsiasi cosa, si deve inizializzare un'area di immagazzinamento dei 
database su disco. Chiameremo questo <firstterm>cluster di database</firstterm>. 
(<acronym>SQL</acronym> usa il termina cluster di catalogo). Un
cluster di database è una collezione di database gestiti da una 
singola istanza di un server database in esecuzione. Dopo l'installazione, un 
cluster di database conterrà un database chiamato <literal>postgres</literal>,
chè viene inteso come database predefinito per l'uso da parte di utilità, utenti e 
applicazioni di terze parti. Il server database stesso non richiede che il database
<literal>postgres</literal> esista, ma molte utilità esterne danno per scontato che esista.
Un altro database creato all'interno di ogni cluster
durante l'inizializzazione è chiamato
<literal>template1</literal>. Come suggerisce il nome, questo sarà usato 
come template per i database creati successivamente; non dovrebbe essere 
usato per il lavoro effettivo. (Si veda <xref linkend="managing-databases"/> per
informazioni circa la creazione di nuovi database all'interno del cluster). 
  </para>

  <para>
In termini di file system, un cluster di database sarà una singola directory
nella quale tutti i dati saranno salvati. La chiameremo <firstterm>
directory dei dati</firstterm> o <firstterm>area dei dati</firstterm>. Si è
completamente liberi di scegliere dove immagazzinare i dati. Non c'è un valore
predefinito, anche se posizioni come 
<filename>/usr/local/pgsql/data</filename> o
<filename>/var/lib/pgsql/data</filename> sono popolari. Per inizializzare un cluster
di database, usare il comando <xref
linkend="app-initdb"/>,<indexterm><primary>initdb</primary></indexterm> che viene 
installato con <productname>PostgreSQL</productname>. La posizione nel 
file system del proprio cluster di database è indicata dall'opzione 
<option>-D</option>, per esempio:
<screen>
<prompt>$</prompt> <userinput>initdb -D /usr/local/pgsql/data</userinput>
</screen>
Notare che questo comando va eseguito mentre si è loggati con l'account utente 
<productname>PostgreSQL</productname>, che è stato descritto nella sezione 
precedente.
  </para>

  <tip>
   <para>
Un'alternativa all'opzione <option>-D</option> è di impostare 
la variabile d'ambiente <envar>PGDATA</envar>.
<indexterm><primary><envar>PGDATA</envar></primary></indexterm>
   </para>
  </tip>

  <para>
Alternativamente, si può eseguire <command>initdb</command> attraverso 
il programma  <xref linkend="app-pg-ctl"/>
    <indexterm><primary>pg_ctl</primary></indexterm> in questo modo:
<screen>
<prompt>$</prompt> <userinput>pg_ctl -D /usr/local/pgsql/data initdb</userinput>
</screen>
Questo potrebbe essere più intuitivo se si sta usando 
<command>pg_ctl</command> per avviare e fermare il server  
(si veda <xref linkend="server-start"/>), così che
<command>pg_ctl</command> sarebbe il solo comando usato per 
gestire l'istanza del server database.
  </para>

  <para>
<command>initdb</command>  tenterà di creare la directory specificata,
se non esiste già. È probabile che non avrà i permessi di farlo
(se si è seguito il consiglio di creare un account non privilegiato).
In questo caso si dovrebbe creare a mano la directory (come root) 
e cambiare il proprietario in modo che sia l'utente <productname>PostgreSQL</productname>.
Ecco come potrebbe essere fatto:
<screen>
root# <userinput>mkdir /usr/local/pgsql/data</userinput>
root# <userinput>chown postgres /usr/local/pgsql/data</userinput>
root# <userinput>su postgres</userinput>
postgres$ <userinput>initdb -D /usr/local/pgsql/data</userinput>
</screen>
  </para>

  <para>
<command>initdb</command> fallirà se la directory dei dati è già stata 
inizializzata.</para>

  <para>
Dato che la directory dei dati contiene tutti i dati salvati nel database,
è essenziale che sia sicura rispetto ad accessi non autorizzati.
<command>initdb</command> revoca inoltre i permessi di accesso 
a chiunque tranne che all'utente <productname>PostgreSQL</productname>.
  </para>

  <para>
Comunque, mentre i contenuti della directory sono sicuri, l'impostazione di autenticazione 
predefinita del client permette a qualsiasi utente locale di connettersi al
database e anche di diventare superutente del database. Se non ci si fida
degli utenti locali, si raccomanda di usare una delle opzioni di <command>initdb</command> 
<option>-W</option>, <option>--pwprompt</option> o <option>--pwfile</option>
per assegnare una password al superutente del database.
<indexterm><primary>password</primary><secondary>del 
superutente</secondary></indexterm>  Inoltre, specificare <option>-A md5</option> o 
<option>-A password</option> così che la modalità di autenticazione <literal>trust</literal>
predefinita non sia usata; o modificare il file <filename>pg_hba.conf</filename>
generato dopo aver lanciato <command>initdb</command>, ma
<emphasis>prima</emphasis> che si avvii il server per la prima volta. (Altri approcci 
ragionevoli includono l'utilizzo dell'autenticazione <literal>ident</literal>
o i permessi del file system per restringere le connessioni. Si veda <xref
linkend="client-authentication"/> per maggiori informazioni).
  </para>

  <para>
<command>initdb</command> inizializza anche la localizzazione <indexterm><primary>localizzazione</primary></indexterm> 
predefinita per il cluster di database.
Normalmente, prenderà semplicemente le impostazioni locali dell'ambiente 
e le applicherà al database inizializzato. È possibile specificare 
una localizzazione diversa per il database; maggiori informazioni su questo possono 
essere trovate in <xref linkend="locale"/>. L'ordine predefinito usato all'interno 
di un particolare cluster è impostato da
<command>initdb</command>, e mentre si possono creare nuovi database usando 
differenti ordinamenti, l'ordine usato nei database template che crea initdb
non può essere cambiato senza eliminarli e ricrearli.
C'è anche un impatto di prestazioni nell'usare localizzazioni diverse da
<literal>C</literal> o <literal>POSIX</literal>. Inoltre, è importante 
prendere la scelta giusta correttamente la prima  volta.
  </para>

  <para>
<command>initdb</command> imposta anche la codifica del set di caratteri predefinita
per il cluster di database. Normalmente questa dovrebbe essere scelta per corrispondere 
all'impostazione locale. Per dettagli si veda <xref linkend="multibyte"/>.
  </para>

  <sect2 id="creating-cluster-nfs">
   <title>Network File System</title>

   <indexterm zone="creating-cluster-nfs">
    <primary>Network File System</primary>
   </indexterm>
   <indexterm><primary><acronym>NFS</acronym></primary><see>Network File System</see></indexterm>
   <indexterm><primary>Network Attached Storage (<acronym>NAS</acronym>)</primary><see>Network File System</see></indexterm>

   <para>
Molte installazioni creano cluster di database su file system di rete.
A volte questo viene fatto direttamente attraverso <acronym>NFS</acronym>, o usando un dispositivo
<acronym>NAS</acronym> (Network Attached Storage) che usa
<acronym>NFS</acronym> internamente. <productname>PostgreSQL</productname> non fa niente di 
speciale per file system <acronym>NFS</acronym>, cioè presume che 
<acronym>NFS</acronym> si comporti esattamente come volumi connessi localmente
(<acronym>DAS</acronym>, Direct Attached Storage). Se le implementazioni del client e del server
<acronym>NFS</acronym> hanno semantica non standard, questo può causare 
problemi di affidabilità (si veda <ulink
url="http://www.time-travellers.org/shane/papers/NFS_considered_harmful.html"></ulink>).
Nello specifico, scritture ritardate (asincrone) verso il server <acronym>NFS</acronym>
possono causare problemi di affidabilità; se possibile, montare 
i file system <acronym>NFS</acronym> in modo sincrono (senza il caching) per evitare 
questo. Inoltre, il montaggio soft di <acronym>NFS</acronym> non è raccomandato.
(Storage Area Networks (<acronym>SAN</acronym>) usano un protocollo di comunicazione 
a basso livello rispetto a <acronym>NFS</acronym>).
   </para>

  </sect2>

 </sect1>

 <sect1 id="server-start">
  <title>Starting the Database Server</title>

  <para>
Prima che qualcuno possa accedere al database, si deve avviare il server database.
Il programma server è chiamato 
<command>postgres</command>.<indexterm><primary>postgres</primary></indexterm>
Il programma <command>postgres</command> deve sapere dove 
trovare i dati da usare. Questo è fatto con l'opzione 
<option>-D</option>. Così, il modo più semplice di avviare il server è:
<screen>
$ <userinput>postgres -D /usr/local/pgsql/data</userinput>
</screen>
che lascerà il server in esecuzione in primo piano. Questo dev'essere fatto 
mentre si è loggati come utente <productname>PostgreSQL</productname>.
Senza <option>-D</option>, il server proverà a usare 
la directory dei dati definita dalla variabile d'ambiente <envar>PGDATA</envar>.
Se la variabile non è fornitam, fallirà.
  </para>

  <para>
Normalmente è meglio lanciare <command>postgres</command> in 
background. Per questo, usare la sintassi usuale della shell Unix:
<screen>
$ <userinput>postgres -D /usr/local/pgsql/data &gt;logfile 2&gt;&amp;1 &amp;</userinput>
</screen>
È importante salvare lo <systemitem>stdout</systemitem> e lo <systemitem>stderr</systemitem>
del server da qualche parte, come mostrato sopra. Aiuterà 
per scopi di monitoraggio e per diagnosticare problemi. (Si veda <xref
linkend="logfile-maintenance"/> per una discussione più approfondita sulla 
gestione dei file di log).
  </para>

  <para>
Il programma <command>postgres</command> inoltre accetta un certo numero di altre 
opzioni a linea di comando. Per maggiori informazioni, si veda
la pagina di riferimento <xref linkend="app-postgres"/> e  
<xref linkend="runtime-config"/> sotto.
  </para>

  <para>
Questa sintassi di shell può diventare tediosa velocemente. Perciò è disponibile il programma wrapper
<xref linkend="app-pg-ctl"/><indexterm><primary>pg_ctl</primary></indexterm>
per semplificare alcuni compiti. Per esempio:
<programlisting>
pg_ctl start -l logfile
</programlisting>
avvierà il server in background e metterà l'output nel file di log indicato. 
L'opzione <option>-D</option> ha lo stesso significato 
qui come per <command>postgres</command>. <command>pg_ctl</command>
è anche capace di fermare il server.
  </para>

  <para>
Normalmente, si vorrà avviare il server database all'avvio del computer.
<indexterm><primary>avvio</primary><secondary>avviare il server</secondary></indexterm>
Gli script di avvio automatico sono specifici al sistema operativo.
Ce ne sono un po' distribuiti con 
<productname>PostgreSQL</productname> nella directory 
<filename>contrib/start-scripts</filename>. Installarne uno richiederà privilegi di root.
  </para>

  <para>
Sistemi diversi hanno convenzioni diverse per avviare i demoni all'avvio.
Molti sistemi hanno un file
<filename>/etc/rc.local</filename> o
<filename>/etc/rc.d/rc.local</filename>. Altri usano
directory <filename>rc.d</filename>. Qualsiasi cosa si faccia, il server deve essere
eseguito dall'account utente <productname>PostgreSQL</productname>
<emphasis>e non da root</emphasis> o da qualsiasi altro utente. Perciò 
probabilmente si dovranno fornire i comandi usando <literal>su -c '...'
postgres</literal>.  Per esempio:
<programlisting>
su -c 'pg_ctl start -D /usr/local/pgsql/data -l serverlog' postgres
</programlisting>
  </para>

  <para>
Ecco alcuni ulteriori suggerimenti specifici del sistema operativo. (In ogni 
caso assicurarsi di usare la directory di installazione e il nome utente appropriati 
dove vengono mostrati valori generici).

   <itemizedlist>
    <listitem>
     <para>
      For <productname>FreeBSD</productname>, look at the file
Per <productname>FreeBSD</productname>, si veda il file  
<filename>contrib/start-scripts/freebsd</filename> nella distribuzione del sorgente 
<productname>PostgreSQL</productname>.
<indexterm><primary>FreeBSD</primary><secondary>script d'avvio</secondary></indexterm>
     </para>
    </listitem>

    <listitem>
     <para>
Su <productname>OpenBSD</productname>, aggiungere le seguenti linee
al file  <filename>/etc/rc.local</filename>:
      <indexterm><primary>OpenBSD</primary><secondary>script d'avvio</secondary></indexterm>
<programlisting>
if [ -x /usr/local/pgsql/bin/pg_ctl -a -x /usr/local/pgsql/bin/postgres ]; then
    su - -c '/usr/local/pgsql/bin/pg_ctl start -l /var/postgresql/log -s' postgres
    echo -n ' postgresql'
fi
</programlisting>
     </para>
    </listitem>

    <listitem>
     <para>
      On <productname>Linux</productname> systems either add
Su sistemi <productname>Linux</productname> aggiungere 
<indexterm><primary>Linux</primary><secondary>script d'avvio</secondary></indexterm>
<programlisting>
/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data
</programlisting>
a <filename>/etc/rc.d/rc.local</filename> o si veda il file 
<filename>contrib/start-scripts/linux</filename> nella distribuzione del 
sorgente <productname>PostgreSQL</productname>.
     </para>
    </listitem>

    <listitem>
     <para>
      On <productname>NetBSD</productname>, either use the
Su <productname>NetBSD</productname>, usare lo script d'avvio di 
<productname>FreeBSD</productname> o
di <productname>Linux</productname>, a seconda dei propri gusti.
<indexterm><primary>NetBSD</primary><secondary>script d'avvio</secondary></indexterm>
     </para>
    </listitem>

    <listitem>
     <para>
Su <productname>Solaris</productname>, creare un file chiamato 
<filename>/etc/init.d/postgresql</filename> che contiene
la seguente linea:
<indexterm><primary>Solaris</primary><secondary>script d'avvio</secondary></indexterm>
<programlisting>
su - postgres -c "/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data"
</programlisting>
Quindi, creare un link simbolico ad esso in <filename>/etc/rc3.d</filename> come 
<filename>S99postgresql</filename>.
     </para>
    </listitem>
   </itemizedlist>

  </para>

   <para>
Mentre il server è in esecuzione, il suo 
<acronym>PID</acronym> è salvato nel file 
<filename>postmaster.pid</filename> nella directory dei dati. Questo viene fatto per
prevenire che molteplici istanze del server siano in esecuzione
nella stessa directory di dati e può essere usato anche per 
arrestare il server.
   </para>

   <sect2 id="server-start-failures">
    <title>Fallimenti dell'avvio del server</title>

    <para>
Ci sono diverse ragioni comuni per cui il server potrebbe fallire 
nel tentativo di avviarsi. Controllare il file di log del server, o avviarlo a mano (senza
redirigere lo standard output o lo standard error) e controllare quali messaggi di errore
appaiono. Sotto vengono spiegato alcuni dei messaggi di errore più comuni 
in dettaglio.
    </para>

    <para>
<screen>
LOG:  could not bind IPv4 socket: Address already in use
HINT:  Is another postmaster already running on port 5432? If not, wait a few seconds and retry.
FATAL:  could not create TCP/IP listen socket
</screen>
Questo di solito significa esattamente cosa suggerisce: si è provato ad avviare
un altro server sulla stessa porta in cui uno è già in esecuzione. 
Comunque, se il messaggio di errore del kernel non è <computeroutput>Address
already in use</computeroutput> o qualche variante di questo, ci potrebbe essere 
un problema diverso. Per esempio, provare ad avviare un server
su una numero di porta riservata potrebbe genereare qualcosa simile a:
<screen>
$ <userinput>postgres -p 666</userinput>
LOG:  could not bind IPv4 socket: Permission denied
HINT:  Is another postmaster already running on port 666? If not, wait a few seconds and retry.
FATAL:  could not create TCP/IP listen socket
</screen>
    </para>

    <para>
un messaggio come:
<screen>
FATAL:  could not create shared memory segment: Invalid argument
DETAIL:  Failed system call was shmget(key=5440001, size=4011376640, 03600).
</screen>
probabilmente significa che il limite del kernel sulla dimensione della memoria condivisa
è più piccolo rispetto all'area di lavoro che <productname>PostgreSQL</productname>
sta tentando di creare (4011376640 byte in questo esempio). O potrebbe significare
che non si ha il supporto alla memoria condivisa System-V nel kernel.
Come soluzione temporanea, si può provare ad avviare il server con un numero 
più piccolo del normale di buffer (<xref linkend="guc-shared-buffers"/>).
Eventualmente si vorrà configurare di nuovo il kernel per incrementare la dimensione della memoria condivisa
permessa. Si potrebbe anche incontrare questo messaggio quando si tentano di avviare 
molteplici server sulla stessa macchina, se il loro spazio totale richiesto
eccede il limite del kernel.
    </para>

    <para>
Un errore come:
<screen>
FATAL:  could not create semaphores: No space left on device
DETAIL:  Failed system call was semget(5440126, 17, 03600).
</screen>
<emphasis>non</emphasis> significa che si è ecceduto lo spazio su disco.
Significa che il limite del proprio kernel sul numero di semafori <systemitem
class="osname">System V</systemitem> è più piccolo rispetto al numero
che <productname>PostgreSQL</productname> vuole creare. Come sopra,
si potrebbe risolvere il problema avviando il servere con un numero ridotto 
di connessioni permesse 
(<xref linkend="guc-max-connections"/>) ma eventualmente è preferibile incrementare 
il limite del kernel.
    </para>

    <para>
Se si riceve un errore <quote>illegal system call</quote>, probabilmente la 
memoria condivisa o i semafori non sono supportati per niente dal proprio kernel.
In questo caso la sola opzione disponibile è di riconfigurare il kernel 
per abilitare queste caratteristiche.
    </para>

    <para>
Dettagli sulla configurazione delle caratteristiche <acronym>IPC</acronym> di 
<systemitem class="osname">System V</systemitem> sono presentati di <xref linkend="sysvipc"/>.

    </para>
   </sect2>

   <sect2 id="client-connection-problems">
    <title>Problemi di connessione al client</title>

    <para>
Anche se le condizioni di possili errori lato client sono abbastanza
varie è dipendono dall'applicazione, alcune di queste potrebbero essere 
collegate direttamente al modo in cui il server è stato lanciato. Condizioni 
diverse da quelle mostrate sotto dovrebbero essere documentate con la 
rispettiva applicazione. 
    </para>

    <para>
<screen>
psql: could not connect to server: Connection refused
        Is the server running on host "server.joe.com" and accepting
        TCP/IP connections on port 5432?
</screen>
     This is the generic <quote>I couldn't find a server to talk
Questo è il fallimento  generico <quote>Non riesco a trovare un server con cui comunicare</quote>. 
     It looks like the above when TCP/IP
     communication is attempted. A common mistake is to forget to
     configure the server to allow TCP/IP connections.
    </para>

    <para>
Alternativamente, si otterrò questo quando si tenta una comunicazione con Unix-domain socket
a un server locale:
<screen>
psql: could not connect to server: No such file or directory
        Is the server running locally and accepting
        connections on Unix domain socket "/tmp/.s.PGSQL.5432"?
</screen>
    </para>

    <para>
L'ultima linea è utile per verificare che il client stia tentando di connettersi 
nel posto giusto. Se effettivamente non c'è un server in esecuzione là,
il messaggio di errore del kernel tipicamente sarà o 
<computeroutput>Connection refused</computeroutput> o
<computeroutput>No such file or directory</computeroutput>, come 
illustrato. (È importante rendersi conto che 
<computeroutput>Connection refused</computeroutput> in questo contesto
<emphasis>non</emphasis> significa che il server ha ottenuto la richiesta
di connessione e l'ha rifiutata. Quel caso produrrà un messaggio diverso, 
come mostrato in <xref
linkend="client-authentication-problems"/>). Altri messaggi d'errore
tipo <computeroutput>Connection timed out</computeroutput> potrebbero
indicare problemi più gravi, come carenza di connettività.
    </para>
   </sect2>
  </sect1>

 <sect1 id="kernel-resources">
  <title>Gestire le risorse del Kernel</title>

  <para>
Un'installazione grande di <productname>PostgreSQL</productname> può esaurire velocemente
i limiti di varie risorse del sistema operativo. (Su alcuni sistemi, 
i valori predefiniti sono talmente bassi che non si ha nemmeno bisogno di un'installazione
molto <quote>grande</quote>). Se si è riscontrato questo tipo di problemi, 
continuare a leggere.
  </para>

  <sect2 id="sysvipc">
   <title>Memoria condivisa e semafori</title>

   <indexterm zone="sysvipc">
    <primary>memoria condivisa</primary>
   </indexterm>

   <indexterm zone="sysvipc">
    <primary>semafori</primary>
   </indexterm>

   <para>
    Shared memory and semaphores are collectively referred to as
    <acronym>IPC</acronym></quote> (together with message queues, which are not
    relevant for <productname>PostgreSQL</productname>). Almost all modern
    operating systems provide these features, but many of them don't have
    them turned on or sufficiently sized by default, especially as
    available RAM and the demands of database applications grow.
(Su <systemitem class="osname">Windows</systemitem>,
<productname>PostgreSQL</productname> fornisce la  propria implementazione come rimpiazzo 
di queste caratteristiche, quindi la maggior parte di questa sezione
può essere trascurata).
   </para>

   <para>
La completa mancanza di queste caratteristiche è di solito manifestata da un errore 
<errorname>Illegal system call</errorname> all'avvio del server. In quel caso 
non c'è alternativa se non riconfigurare il kernel. <productname>PostgreSQL</productname>
non funzionerà senza di loro.
In ogni caso, questa situazione è rara tra i sistemi operativi moderni.
   </para>

   <para>
Quando <productname>PostgreSQL</productname> eccede uno dei vari limiti <acronym>IPC</acronym>,
il server rifiuterà di avviarsi e dovrebbe generare un errore informativo che descrive il problema
e cosa fare. (Si veda anche <xref
linkend="server-start-failures"/>). I parametri rilevanti del kernel 
sono chiamati consistentemente tra i vari sistemi; <xref
linkend="sysvipc-parameters"/> fornisce una fanoramica. I metodi per impostarli,
comunque, variano. Suggerimenti per alcune piattaforme sono presentati sotto.
   </para>


   <table id="sysvipc-parameters">
    <title>Parametri <acronym>IPC</acronym> <systemitem class="osname">System V</systemitem></title>

    <tgroup cols="3">
     <thead>
      <row>
       <entry>Nome</entry>
       <entry>Descrizione</entry>
       <entry>Valori ragionevoli</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><varname>SHMMAX</varname></entry>
       <entry>Dimensione massima del segmento di memoria condivisa (byte)</entry>
       <entry>almeno diversi megabyte (si veda text)</entry>
      </row>

      <row>
       <entry><varname>SHMMIN</varname></entry>
       <entry>Dimensione minima del segmento di memoria condivisa (byte)</entry>
       <entry>1</entry>
      </row>

      <row>
       <entry><varname>SHMALL</varname></entry>
       <entry>Quantità totale della memoria condivisa disponibile (byte o pagine)</entry>
       <entry>se byte, lo stesso di <varname>SHMMAX</varname>; se pagine, <literal>ceil(SHMMAX/PAGE_SIZE)</literal></entry>
      </row>

      <row>
       <entry><varname>SHMSEG</varname></entry>
       <entry>Il massimo numero di segmenti di memoria condivisa per processo</entry>
       <entry>solo 1 segmento è necessario, ma il valore predefinito è molto maggiore</entry>
      </row>

       <row>
        <entry><varname>SHMMNI</varname></entry>
        <entry>Il massimo numero di segmenti di memeoria condivisa a livello di sistema</entry>
        <entry>come <varname>SHMSEG</varname> più spazione per altre applicazioni</entry>
       </row>

       <row>
        <entry><varname>SEMMNI</varname></entry>
        <entry>Il massimo numero di identificatori di semaforo (per es., sets)</entry>
        <entry>almeno <literal>ceil((max_connections + autovacuum_max_workers) / 16)</literal></entry>
       </row>

       <row>
        <entry><varname>SEMMNS</varname></entry>
        <entry>Il massimo numero di semafori a livello di sistema</entry>
        <entry><literal>ceil((max_connections + autovacuum_max_workers) / 16) * 17</literal>  
        più spazio per altre applicazioni</entry>
       </row>

       <row>
        <entry><varname>SEMMSL</varname></entry>
        <entry>Il massimo numero di sema Maximum number of semaphores per insieme</entry>
        <entry>almeno 17</entry>
       </row>

       <row>
        <entry><varname>SEMMAP</varname></entry>
        <entry>Numero di voci nella mappa dei semafori</entry>
        <entry>si veda text</entry>
       </row>

       <row>
        <entry><varname>SEMVMX</varname></entry>
        <entry>Il massimo valore del semaforo</entry>
        <entry>almeno 1000 (Il valore predefiniro spesso è 32767; non cambiarlo a meno che non sia necessario)</entry>
       </row>

     </tbody>
    </tgroup>
   </table>


   <para>
<indexterm><primary>SHMMAX</primary></indexterm> Il parametro più importante
riguardante la memoria condivisa è <varname>SHMMAX</varname>, cioè la dimensione massima, 
in byte, di un segmento di memoria condivisa. Se si ottiene un messaggio di errore da
<function>shmget</function> tipo <quote>Invalid argument</quote>, è 
probabile che questo limite sia stato superato. La dimensione del segmento di  
memoria condivisa richiesta varia dipendentemente da diveri parametri di configurazione 
di <productname>PostgreSQL</productname>, come mostrato in  
<xref linkend="shared-memory-parameters"/>. (Qualsiasi messaggio di errore che si potrebbe 
ottenere includeranno la dimensione esatta della richiesta di allocazione fallita).
È possibile, come soluzione temporanea, abbassare alcune di queste impostazioni per 
evitare il fallimento. Mentre è possibile avviare  
<productname>PostgreSQL</productname> con <varname>SHMMAX</varname> grande 2 MB,
probabilmente si avrà bisogno di più per prestazioni accettabili. Impostazioni 
auspicabili sono da centinaia di megabyte a pochi gigabyte.
   </para>

   <para>
Alcuni sistemi hanno anche un limite sulla quantità totale di memeoria condivisa
nel sistema (<varname>SHMALL</varname>).  Assicurarsi che sia grande abbastanza 
per <productname>PostgreSQL</productname>  più qualsiasi altra applicazione che
stia usando segmenti di memoria condivisa. Notare che <varname>SHMALL</varname>
viene misurata in pagine invece di byte su molti sistemi.
   </para>

   <para>
È meno probabile che a causare problemi sia la dimensione minima per i segmenti
di memoria condivisa (<varname>SHMMIN</varname>), che dovrebbero essere tutt'al più
500 kB approssimativamente per <productname>PostgreSQL</productname> (di solito è 
1). Il massimo numero di segmenti a livello di sistema
(<varname>SHMMNI</varname>) o per processo (<varname>SHMSEG</varname>) probabilmente non 
causeranno problemi a meno che il sistema non li abbia impostati a zero.
   </para>

   <para>
<productname>PostgreSQL</productname> usa un semaforo per ogni connessione permessa 
(<xref linkend="guc-max-connections"/>) e processo worker dell'autovacuum consentito
(<xref linkend="guc-autovacuum-max-workers"/>), in gruppi di 16.
Ognuno di questi gruppi conterrà anche
un 17esimo semaforo che contiene un <quote>numero magico</quote>,
per accorgersi di collisioni con insiemi di semafori usati da altre applicazioni.
Il massimo numero di semafori nel sistema è impostato da 
<varname>SEMMNS</varname>, che di conseguenza deve essere grande almeno
quanto <varname>max_connections</varname> più
<varname>autovacuum_max_workers</varname>, più uno aggiuntivo per ogni 16
connessioni più worker consentite (si veda la formula in <xref
linkend="sysvipc-parameters"/>).  Il parametro <varname>SEMMNI</varname>
determina il limite sul numero di gruppi di semafori che possono 
esistere nel sistema in un dato istante. Da adesso questo parametro deve essere 
almeno <literal>ceil((max_connections + autovacuum_max_workers) / 16)</literal>.
Abbassare il numero di 
connessioni permesse è una soluzione temporanea per fallimenti, 
che di solito sono espressi confusamente come  <quote>No space
left on device</quote>, dalla funzione <function>semget</function>.
   </para>

   <para>
In alcuni casi potrebbe essere necessario anche incrementare 
<varname>SEMMAP</varname> per essere almeno nell'ordine di 
<varname>SEMMNS</varname>. Questo parametro definisce la dimensione della mappa
delle risorse del semaforo, nella quale qualsiasi blocco contiguo di semafori disponibili
necessita una voce. Quando un insieme di semafori viene liberato o è aggiunto 
a una voce esistente che è adiacente al blocco liberato oppure viene registrata 
con una nuova voce di mappa. Se la mappa è piena, i semafori liberati
vengono persi (fino al riavvio). La frammentazione dello spazio dei semafori 
potrebbe portare nel tempo ad avere meno semafori disponibili rispetto 
a quanti ce ne dovrebbero essere.
   </para>

   <para>
Il parametro <varname>SEMMSL</varname>, che determina quanti semafori 
possono esserci in un insieme, dev'essere almeno 17 per
<productname>PostgreSQL</productname>.
   </para>

   <para>
    Various other settings related to <quote>semaphore undo</quote>, such as
    <varname>SEMMNU</varname> and <varname>SEMUME</varname>, do not affect
    <productname>PostgreSQL</productname>.
   </para>


    <variablelist>
     <varlistentry>
      <term><systemitem class="osname">AIX</systemitem></term>
      <indexterm><primary>AIX</primary><secondary>configurazione IPC</secondary></indexterm>
      <listitem>
       <para>
Almeno dalla versione 5.1, non dovrebbe essere necessario fare 
nessuna configurazione speciale per parametri come <varname>SHMMAX</varname>,
per come appare questo è configurato per  permettere
a tutta la memoria di essere usata come memoria condivisa. Che è una sorta di 
configurazione usata comunemente in altri database tipo 
<application>DB/2</application>.</para>

<para>potrebbe comunque essere necessario modificare l'informazione
globale <command>ulimit</command> in 
<filename>/etc/security/limits</filename>, dato che il limite predefinito per 
la dimensione dei file (<varname>fsize</varname>) e il numero di file 
(<varname>nofiles</varname>) potrebbe essere troppo basso. 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><systemitem class="osname">BSD/OS</systemitem></term>
      <indexterm><primary>BSD/OS</primary><secondary>configurazione IPC</secondary></indexterm>
      <listitem>
       <formalpara>
        <title>Memoria condivisa</title>
        <para>
In modo predefinito, solo 4 MB di memoria condivisa sono supportati. Tenere a 
mente che la memeoria condivisa non è paginabile; è bloccata in RAM.
Per incrementare la quantità di memoria condivisa supportata dal sistema,
aggiungere qualcosa di simile al seguente al file di configurazione del kernel:
<programlisting>
options "SHMALL=8192"
options "SHMMAX=\(SHMALL*PAGE_SIZE\)"
</programlisting>
<varname>SHMALL</varname> viene misurato in pagine da 4 kB, quindi un valore di 
1024 rappresenta 4 MB di memoria condivisa. Inoltre l'esempio sopra aumenta 
l'area di massima memoria condivisa a 32 MB.
         For those running 4.3 or later, you will probably also need to increase
         <varname>KERNEL_VIRTUAL_MB</varname> above the default <literal>248</literal>.
         Once all changes have been made, recompile the kernel, and reboot.
        </para>
       </formalpara>

       <formalpara>
        <title>Semafori</title>
        <para>
Probabilmente si vorrà incrementare anche il numero di semafori;
il valore 60 predefinito di sistema permetterà solo cira 50 connessioni 
<productname>PostgreSQL</productname>. Impostare i valori 
che si vogliono nel file di configurazione del kernel, per es.:
<programlisting>
options "SEMMNI=40"
options "SEMMNS=240"
</programlisting>
        </para>
       </formalpara>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><systemitem class="osname">FreeBSD</systemitem></term>
      <indexterm><primary>FreeBSD</primary><secondary>configurazione IPC</secondary></indexterm>
      <listitem>
       <para>
Le impostazioni predefinite sono adatte solo a installazioni piccole
(per esempio, il valore predefinito di <varname>SHMMAX</varname> è 32 MB).
Possono essere fatti cambiamenti attraverso le interfaccie <command>sysctl</command> o 
<command>loader</command>. I seguenti parametri
possono essere impostati usando <command>sysctl</command>:
<screen>
<prompt>$</prompt> <userinput>sysctl -w kern.ipc.shmall=32768</userinput>
<prompt>$</prompt> <userinput>sysctl -w kern.ipc.shmmax=134217728</userinput>
<prompt>$</prompt> <userinput>sysctl -w kern.ipc.semmap=256</userinput>
</screen>
Per rendere queste impostazioni persistenti al riavvio, modificare 
<filename>/etc/sysctl.conf</filename>.
       </para>

       <para>
        The remaining semaphore settings are read-only as far as
        <command>sysctl</command> is concerned, but can be changed
        before boot using the <command>loader</command> prompt:
<screen>
<prompt>(loader)</prompt> <userinput>set kern.ipc.semmni=256</userinput>
<prompt>(loader)</prompt> <userinput>set kern.ipc.semmns=512</userinput>
<prompt>(loader)</prompt> <userinput>set kern.ipc.semmnu=256</userinput>
</screen>
        Similarly these can be saved between reboots in
        <filename>/boot/loader.conf</filename>.
       </para>

       <para>
        You might also want to configure your kernel to lock shared
        memory into RAM and prevent it from being paged out to swap.
        This can be accomplished using the <command>sysctl</command>
        setting <literal>kern.ipc.shm_use_phys</literal>.
       </para>

       <para>
        If running in FreeBSD jails by enabling <application>sysctl</application>'s
        <literal>security.jail.sysvipc_allowed</literal>, <application>postmaster</application>s
        running in different jails should be run by different operating system
        users.  This improves security because it prevents non-root users
        from interfering with shared memory or semaphores in different jails,
        and it allows the PostgreSQL IPC cleanup code to function properly.
        (In FreeBSD 6.0 and later the IPC cleanup code does not properly detect
        processes in other jails, preventing the running of postmasters on the
        same port in different jails.)
       </para>

       <para>
        <systemitem class="osname">FreeBSD</systemitem> versions before 4.0 work like 
        <systemitem class="osname">NetBSD</systemitem> and <systemitem class="osname">
        OpenBSD</systemitem> (see below).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><systemitem class="osname">NetBSD</systemitem></term>
      <term><systemitem class="osname">OpenBSD</systemitem></term>
      <indexterm><primary>NetBSD</primary><secondary>IPC configuration</secondary></indexterm>
      <indexterm><primary>OpenBSD</primary><secondary>IPC configuration</secondary></indexterm>
      <listitem>
       <para>
        The options <varname>SYSVSHM</varname> and <varname>SYSVSEM</varname> need
        to be enabled when the kernel is compiled. (They are by
        default.) The maximum size of shared memory is determined by
        the option <varname>SHMMAXPGS</varname> (in pages). The following
        shows an example of how to set the various parameters on
        <systemitem class="osname">NetBSD</systemitem>
        (<systemitem class="osname">OpenBSD</systemitem> uses <literal>option</literal> instead):
<programlisting>
options        SYSVSHM
options        SHMMAXPGS=4096
options        SHMSEG=256

options        SYSVSEM
options        SEMMNI=256
options        SEMMNS=512
options        SEMMNU=256
options        SEMMAP=256
</programlisting>
       </para>

       <para>
        You might also want to configure your kernel to lock shared
        memory into RAM and prevent it from being paged out to swap.
        This can be accomplished using the <command>sysctl</command>
        setting <literal>kern.ipc.shm_use_phys</literal>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><systemitem class="osname">HP-UX</systemitem></term>
      <indexterm><primary>HP-UX</primary><secondary>IPC configuration</secondary></indexterm>
      <listitem>
       <para>
        The default settings tend to suffice for normal installations.
        On <productname>HP-UX</productname> 10, the factory default for
        <varname>SEMMNS</varname> is 128, which might be too low for larger
        database sites.
       </para>
       <para>
        <acronym>IPC</acronym> parameters can be set in the <application>System
        Administration Manager</application> (<acronym>SAM</acronym>) under
        <menuchoice><guimenu>Kernel
        Configuration</guimenu><guimenuitem>Configurable Parameters</guimenuitem></menuchoice>. Choose
        <guibutton>Create A New Kernel</guibutton> when you're done.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><systemitem class="osname">Linux</systemitem></term>
      <indexterm><primary>Linux</primary><secondary>IPC configuration</secondary></indexterm>
      <listitem>
       <para>
        The default maximum segment size is 32 MB, which is only adequate
        for very small <productname>PostgreSQL</productname>
        installations.  The default maximum total size is 2097152
        pages.  A page is almost always 4096 bytes except in unusual
        kernel configurations with <quote>huge pages</quote>
        (use <literal>getconf PAGE_SIZE</literal> to verify).  That
        makes a default limit of 8 GB, which is often enough, but not
        always.
       </para>

       <para>
        The shared memory size settings can be changed via the
        <command>sysctl</command> interface.  For example, to allow 16 GB:
<screen>
<prompt>$</prompt> <userinput>sysctl -w kernel.shmmax=17179869184</userinput>
<prompt>$</prompt> <userinput>sysctl -w kernel.shmall=4194304</userinput>
</screen>
        In addition these settings can be preserved between reboots in
        the file <filename>/etc/sysctl.conf</filename>.  Doing that is
        highly recommended.
       </para>

       <para>
        Ancient distributions might not have the <command>sysctl</command> program,
        but equivalent changes can be made by manipulating the 
        <filename>/proc</filename> file system:
<screen>
<prompt>$</prompt> <userinput>echo 17179869184 &gt;/proc/sys/kernel/shmmax</userinput>
<prompt>$</prompt> <userinput>echo 4194304 &gt;/proc/sys/kernel/shmall</userinput>
</screen>
       </para>

       <para>
        The remaining defaults are quite generously sized, and usually
        do not require changes.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><systemitem class="osname">MacOS X</systemitem></term>
      <indexterm><primary>MacOS X</primary><secondary>IPC configuration</secondary></indexterm>
      <listitem>
       <para>
        The recommended method for configuring shared memory in OS X
        is to create a file named <filename>/etc/sysctl.conf</filename>,
        containing variable assignments such as:
<programlisting>
kern.sysv.shmmax=4194304
kern.sysv.shmmin=1
kern.sysv.shmmni=32
kern.sysv.shmseg=8
kern.sysv.shmall=1024
</programlisting>
        Note that in some OS X versions,
        <emphasis>all five</emphasis> shared-memory parameters must be set in
        <filename>/etc/sysctl.conf</filename>, else the values will be ignored.
       </para>

       <para>
        Beware that recent releases of OS X ignore attempts to set
        <varname>SHMMAX</varname> to a value that isn't an exact multiple of 4096.
       </para>

       <para>
        <varname>SHMALL</varname> is measured in 4 kB pages on this platform.
       </para>

       <para>
        In older OS X versions, you will need to reboot to have changes in the
        shared memory parameters take effect.  As of 10.5 it is possible to
        change all but <varname>SHMMNI</varname> on the fly, using
        <application>sysctl</application>.  But it's still best to set up your preferred
        values via <filename>/etc/sysctl.conf</filename>, so that the values will be
        kept across reboots.
       </para>

       <para>
        The file <filename>/etc/sysctl.conf</filename> is only honored in OS X
        10.3.9 and later.  If you are running a previous 10.3.x release,
        you must edit the file <filename>/etc/rc</filename>
        and change the values in the following commands:
<programlisting>
sysctl -w kern.sysv.shmmax
sysctl -w kern.sysv.shmmin
sysctl -w kern.sysv.shmmni
sysctl -w kern.sysv.shmseg
sysctl -w kern.sysv.shmall
</programlisting>
        Note that
        <filename>/etc/rc</filename> is usually overwritten by OS X system updates,
        so you should expect to have to redo these edits after each update.
       </para>

       <para>
        In OS X 10.2 and earlier, instead edit these commands in the file
        <filename>/System/Library/StartupItems/SystemTuning/SystemTuning</filename>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><systemitem class="osname">SCO OpenServer</systemitem></term>
      <indexterm><primary>SCO OpenServer</primary><secondary>IPC configuration</secondary></indexterm>
      <listitem>
       <para>
        In the default configuration, only 512 kB of shared memory per
        segment is allowed. To increase the setting, first change to the
        directory <filename>/etc/conf/cf.d</filename>. To display the current value of
        <varname>SHMMAX</varname>, run:
<programlisting>
./configure -y SHMMAX
</programlisting>
        To set a new value for <varname>SHMMAX</varname>, run:
<programlisting>
./configure SHMMAX=<replaceable>value</replaceable>
</programlisting>
        where <replaceable>value</replaceable> is the new value you want to use
        (in bytes). After setting <varname>SHMMAX</varname>, rebuild the kernel:
<programlisting>
./link_unix
</programlisting>
        and reboot.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><systemitem class="osname">Solaris</systemitem></term>
      <indexterm><primary>Solaris</primary><secondary>IPC configuration</secondary></indexterm>
      <listitem>
       <para>
        At least in version 2.6, the default maximum size of a shared
        memory segment is too low for <productname>PostgreSQL</productname>. The
        relevant settings can be changed in <filename>/etc/system</filename>,
        for example:
<programlisting>
set shmsys:shminfo_shmmax=0x2000000
set shmsys:shminfo_shmmin=1
set shmsys:shminfo_shmmni=256
set shmsys:shminfo_shmseg=256

set semsys:seminfo_semmap=256
set semsys:seminfo_semmni=512
set semsys:seminfo_semmns=512
set semsys:seminfo_semmsl=32
</programlisting>
        You need to reboot for the changes to take effect.
       </para>

       <para>
        See also <ulink
        url="http://sunsite.uakom.sk/sunworldonline/swol-09-1997/swol-09-insidesolaris.html"></ulink>
        for information on shared memory under
        <productname>Solaris</productname>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><systemitem class="osname">UnixWare</systemitem></term>
      <indexterm><primary>UnixWare</primary><secondary>IPC configuration</secondary></indexterm>
      <listitem>
       <para>
        On <productname>UnixWare</productname> 7, the maximum size for shared
        memory segments is only 512 kB in the default configuration.
        To display the current value of <varname>SHMMAX</varname>, run:
<programlisting>
/etc/conf/bin/idtune -g SHMMAX
</programlisting>
        which displays the current, default, minimum, and maximum
        values. To set a new value for <varname>SHMMAX</varname>,
        run:
<programlisting>
/etc/conf/bin/idtune SHMMAX <replaceable>value</replaceable>
</programlisting>
        where <replaceable>value</replaceable> is the new value you want to use
        (in bytes). After setting <varname>SHMMAX</varname>, rebuild the
        kernel:
<programlisting>
/etc/conf/bin/idbuild -B
</programlisting>
        and reboot.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>


   <table id="shared-memory-parameters">
    <title><productname>PostgreSQL</productname> shared memory usage</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Usage</entry>
       <entry>Approximate shared memory bytes required (as of 8.3)</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>Connections</entry>
       <entry>(1800 + 270 * <xref
       linkend="guc-max-locks-per-transaction"/>) * <xref
       linkend="guc-max-connections"/></entry>
      </row>

      <row>
       <entry>Autovacuum workers</entry>
       <entry>(1800 + 270 * <xref
       linkend="guc-max-locks-per-transaction"/>) * <xref
       linkend="guc-autovacuum-max-workers"/></entry>
      </row>

      <row>
       <entry>Prepared transactions</entry>
       <entry>(770 + 270 * <xref
       linkend="guc-max-locks-per-transaction"/>) * <xref linkend="guc-max-prepared-transactions"/></entry>
      </row>

      <row>
       <entry>Shared disk buffers</entry>
       <entry>(<xref linkend="guc-block-size"/> + 208) * <xref linkend="guc-shared-buffers"/></entry>
      </row>

      <row>
       <entry>WAL buffers</entry>
       <entry>(<xref linkend="guc-wal-block-size"/> + 8) * <xref linkend="guc-wal-buffers"/></entry>
      </row>

      <row>
       <entry>Fixed space requirements</entry>
       <entry>770 kB</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect2>

  <sect2>
   <title>Resource Limits</title>

   <para>
    Unix-like operating systems enforce various kinds of resource limits
    that might interfere with the operation of your
    <productname>PostgreSQL</productname> server. Of particular
    importance are limits on the number of processes per user, the
    number of open files per process, and the amount of memory available
    to each process. Each of these have a <quote>hard</quote> and a
    <quote>soft</quote> limit. The soft limit is what actually counts
    but it can be changed by the user up to the hard limit. The hard
    limit can only be changed by the root user. The system call
    <function>setrlimit</function> is responsible for setting these
    parameters. The shell's built-in command <command>ulimit</command>
    (Bourne shells) or <command>limit</command> (<application>csh</application>) is
    used to control the resource limits from the command line. On
    BSD-derived systems the file <filename>/etc/login.conf</filename>
    controls the various resource limits set during login. See the
    operating system documentation for details. The relevant
    parameters are <varname>maxproc</varname>,
    <varname>openfiles</varname>, and <varname>datasize</varname>. For
    example:
<programlisting>
default:\
...
        :datasize-cur=256M:\
        :maxproc-cur=256:\
        :openfiles-cur=256:\
...
</programlisting>
    (<literal>-cur</literal> is the soft limit.  Append
    <literal>-max</literal> to set the hard limit.)
   </para>

   <para>
    Kernels can also have system-wide limits on some resources.
    <itemizedlist>
     <listitem>
      <para>
      On <productname>Linux</productname>
      <filename>/proc/sys/fs/file-max</filename> determines the
      maximum number of open files that the kernel will support.  It can
      be changed by writing a different number into the file or by
      adding an assignment in <filename>/etc/sysctl.conf</filename>.
      The maximum limit of files per process is fixed at the time the
      kernel is compiled; see
      <filename>/usr/src/linux/Documentation/proc.txt</filename> for
      more information.
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    The <productname>PostgreSQL</productname> server uses one process
    per connection so you should provide for at least as many processes
    as allowed connections, in addition to what you need for the rest
    of your system.  This is usually not a problem but if you run
    several servers on one machine things might get tight.
   </para>

   <para>
    The factory default limit on open files is often set to
    <quote>socially friendly</quote> values that allow many users to
    coexist on a machine without using an inappropriate fraction of
    the system resources.  If you run many servers on a machine this
    is perhaps what you want, but on dedicated servers you might want to
    raise this limit.
   </para>

   <para>
    On the other side of the coin, some systems allow individual
    processes to open large numbers of files; if more than a few
    processes do so then the system-wide limit can easily be exceeded.
    If you find this happening, and you do not want to alter the
    system-wide limit, you can set <productname>PostgreSQL</productname>'s <xref
    linkend="guc-max-files-per-process"/> configuration parameter to
    limit the consumption of open files.
   </para>
  </sect2>

  <sect2 id="linux-memory-overcommit">
   <title>Linux Memory Overcommit</title>

   <para>
    In Linux 2.4 and later, the default virtual memory behavior is not
    optimal for <productname>PostgreSQL</productname>. Because of the
    way that the kernel implements memory overcommit, the kernel might
    terminate the <productname>PostgreSQL</productname> server (the
    master server process) if the memory demands of
    another process cause the system to run out of virtual memory.
   </para>

   <para>
    If this happens, you will see a kernel message that looks like
    this (consult your system documentation and configuration on where
    to look for such a message):
<programlisting>
Out of Memory: Killed process 12345 (postgres).
</programlisting>
    This indicates that the <filename>postgres</filename> process
    has been terminated due to memory pressure.
    Although existing database connections will continue to function
    normally, no new connections will be accepted.  To recover,
    <productname>PostgreSQL</productname> will need to be restarted.
   </para>

   <para>
    One way to avoid this problem is to run
    <productname>PostgreSQL</productname> on a machine where you can
    be sure that other processes will not run the machine out of
    memory.  If memory is tight, increasing the swap space of the
    operating system can help avoid the problem, because the
    out-of-memory (OOM) killer is invoked only when physical memory and
    swap space are exhausted.
   </para>

   <para>
    On Linux 2.6 and later, it is possible to modify the
    kernel's behavior so that it will not <quote>overcommit</quote> memory.
    Although this setting will not prevent the <ulink
    url="http://lwn.net/Articles/104179/">OOM killer</ulink> from being invoked
    altogether, it will lower the chances significantly and will therefore
    lead to more robust system behavior.  This is done by selecting strict
    overcommit mode via <command>sysctl</command>:
<programlisting>
sysctl -w vm.overcommit_memory=2
</programlisting>
    or placing an equivalent entry in <filename>/etc/sysctl.conf</filename>.
    You might also wish to modify the related setting
    <varname>vm.overcommit_ratio</varname>.  For details see the kernel documentation
    file <filename>Documentation/vm/overcommit-accounting</filename>.
   </para>

   <para>
    Another approach, which can be used with or without altering
    <varname>vm.overcommit_memory</varname>, is to set the process-specific
    <varname>oom_adj</varname> value for the postmaster process to <literal>-17</literal>,
    thereby guaranteeing it will not be targeted by the OOM killer.  The
    simplest way to do this is to execute
<programlisting>
echo -17 > /proc/self/oom_adj
</programlisting>
    in the postmaster's startup script just before invoking the postmaster.
    Note that this action must be done as root, or it will have no effect;
    so a root-owned startup script is the easiest place to do it.  If you
    do this, you may also wish to build <productname>PostgreSQL</productname>
    with <literal>-DLINUX_OOM_ADJ=0</literal> added to <varname>CFLAGS</varname>.
    That will cause postmaster child processes to run with the normal
    <varname>oom_adj</varname> value of zero, so that the OOM killer can still
    target them at need.
   </para>

   <note>
   <para>
    Some vendors' Linux 2.4 kernels are reported to have early versions
    of the 2.6 overcommit <command>sysctl</command> parameter.  However, setting
    <literal>vm.overcommit_memory</literal> to 2
    on a 2.4 kernel that does not have the relevant code will make
    things worse, not better.  It is recommended that you inspect
    the actual kernel source code (see the function
    <function>vm_enough_memory</function> in the file <filename>mm/mmap.c</filename>)
    to verify what is supported in your kernel before you try this in a 2.4
    installation.  The presence of the <filename>overcommit-accounting</filename>
    documentation file should <emphasis>not</emphasis> be taken as evidence that the
    feature is there.  If in any doubt, consult a kernel expert or your
    kernel vendor.
   </para>
   </note>
  </sect2>
 </sect1>


 <sect1 id="server-shutdown">
  <title>Shutting Down the Server</title>

  <indexterm zone="server-shutdown">
   <primary>shutdown</primary>
  </indexterm>

  <para>
   There are several ways to shut down the database server. You control
   the type of shutdown by sending different signals to the master
   <command>postgres</command> process.

   <variablelist>
    <varlistentry>
     <term><systemitem>SIGTERM</systemitem><indexterm><primary>SIGTERM</primary></indexterm></term>
     <listitem>
      <para>
       This is the <firstterm>Smart Shutdown</firstterm> mode.
       After receiving <systemitem>SIGTERM</systemitem>, the server
       disallows new connections, but lets existing sessions end their
       work normally. It shuts down only after all of the sessions terminate.
       If the server is in online backup mode, it additionally waits
       until online backup mode is no longer active.  While backup mode is
       active, new connections will still be allowed, but only to superusers
       (this exception allows a superuser to connect to terminate
       online backup mode).  If the server is in recovery when a smart
       shutdown is requested, recovery and streaming replication will be
       stopped only after all regular sessions have terminated.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><systemitem>SIginT</systemitem><indexterm><primary>SIginT</primary></indexterm></term>
     <listitem>
      <para>
       This is the <firstterm>Fast Shutdown</firstterm> mode.
       The server disallows new connections and sends all existing
       server processes <systemitem>SIGTERM</systemitem>, which will cause them
       to abort their current transactions and exit promptly. It then
       waits for all server processes to exit and finally shuts down.
       If the server is in online backup mode, backup mode will be
       terminated, rendering the backup useless.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><systemitem>SIGQUIT</systemitem><indexterm><primary>SIGQUIT</primary></indexterm></term>
     <listitem>
      <para>
      This is the <firstterm>Immediate Shutdown</firstterm> mode.
      The master <command>postgres</command> process will send a
      <systemitem>SIGQUIT</systemitem> to all child processes and exit
      immediately, without properly shutting itself down. The child processes
      likewise exit immediately upon receiving
      <systemitem>SIGQUIT</systemitem>. This will lead to recovery (by
      replaying the WAL log) upon next start-up. This is recommended
      only in emergencies.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

  <para>
   The <xref linkend="app-pg-ctl"/> program provides a convenient
   interface for sending these signals to shut down the server.
   Alternatively, you can send the signal directly using <command>kill</command>
   on non-Windows systems.
   The <acronym>PID</acronym> of the <command>postgres</command> process can be
   found using the <command>ps</command> program, or from the file
   <filename>postmaster.pid</filename> in the data directory. For
   example, to do a fast shutdown:
<screen>
$ <userinput>kill -INT `head -1 /usr/local/pgsql/data/postmaster.pid`</userinput>
</screen>
  </para>

  <important>
   <para>
    It is best not to use <systemitem>SIGKILL</systemitem> to shut down
    the server.  Doing so will prevent the server from releasing
    shared memory and semaphores, which might then have to be done
    manually before a new server can be started.  Furthermore,
    <systemitem>SIGKILL</systemitem> kills the <command>postgres</command>
    process without letting it relay the signal to its subprocesses,
    so it will be necessary to kill the individual subprocesses by hand as
    well.
   </para>
  </important>

  <para>
   To terminate an individual session while allowing other sessions to
   continue, use <function>pg_terminate_backend()</function> (see <xref
   linkend="functions-admin-signal-table"/>) or send a
   <systemitem>SIGTERM</systemitem> signal to the child process associated with
   the session.
  </para>
 </sect1>

 <sect1 id="preventing-server-spoofing">
  <title>Preventing Server Spoofing</title>

  <indexterm zone="preventing-server-spoofing">
   <primary>server spoofing</primary>
  </indexterm>

  <para>
   While the server is running, it is not possible for a malicious user
   to take the place of the normal database server.  However, when the
   server is down, it is possible for a local user to spoof the normal
   server by starting their own server.  The spoof server could read
   passwords and queries sent by clients, but could not return any data
   because the <varname>PGDATA</varname> directory would still be secure because
   of directory permissions. Spoofing is possible because any user can
   start a database server; a client cannot identify an invalid server
   unless it is specially configured.
  </para>

  <para>
   The simplest way to prevent spoofing for <literal>local</literal>
   connections is to use a Unix domain socket directory (<xref
   linkend="guc-unix-socket-directory"/>) that has write permission only
   for a trusted local user.  This prevents a malicious user from creating
   their own socket file in that directory.  If you are concerned that
   some applications might still reference <filename>/tmp</filename> for the
   socket file and hence be vulnerable to spoofing, during operating system
   startup create a symbolic link <filename>/tmp/.s.PGSQL.5432</filename> that points
   to the relocated socket file.  You also might need to modify your
   <filename>/tmp</filename> cleanup script to prevent removal of the symbolic link.
  </para>

  <para>
   To prevent spoofing on TCP connections, the best solution is to use
   SSL certificates and make sure that clients check the server's certificate.
   To do that, the server
   must be configured to accept only <literal>hostssl</literal> connections (<xref
   linkend="auth-pg-hba-conf"/>) and have SSL
   <filename>server.key</filename> (key) and
   <filename>server.crt</filename> (certificate) files (<xref
   linkend="ssl-tcp"/>). The TCP client must connect using
   <literal>sslmode=verify-ca</literal> or
   <literal>verify-full</literal> and have the appropriate root certificate
   file installed (<xref linkend="libpq-connect"/>).
  </para>
 </sect1>
  
 <sect1 id="encryption-options">
  <title>Encryption Options</title>

  <indexterm zone="encryption-options">
   <primary>encryption</primary>
  </indexterm>

  <para>
   <productname>PostgreSQL</productname> offers encryption at several
   levels, and provides flexibility in protecting data from disclosure
   due to database server theft, unscrupulous administrators, and
   insecure networks. Encryption might also be required to secure
   sensitive data such as medical records or financial transactions.
  </para>
   
  <variablelist>

  <varlistentry>
   <term>Password Storage Encryption</term>
   <listitem>

    <para>
     By default, database user passwords are stored as MD5 hashes, so
     the administrator cannot determine the actual password assigned
     to the user. If MD5 encryption is used for client authentication,
     the unencrypted password is never even temporarily present on the
     server because the client MD5-encrypts it before being sent
     across the network.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>Encryption For Specific Columns</term>

   <listitem>
    <para>
     The <filename>contrib</filename> function library
     <link linkend="pgcrypto"><function>pgcrypto</function></link>
     allows certain fields to be stored encrypted.
     This is useful if only some of the data is sensitive.
     The client supplies the decryption key and the data is decrypted
     on the server and then sent to the client.
    </para>
     
    <para>
     The decrypted data and the decryption key are present on the
     server for a brief time while it is being decrypted and
     communicated between the client and server. This presents a brief
     moment where the data and keys can be intercepted by someone with
     complete access to the database server, such as the system
     administrator.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>Data Partition Encryption</term>

   <listitem>
    <para>
     On Linux, encryption can be layered on top of a file system
     using a <quote>loopback device</quote>. This allows an entire
     file system partition to be encrypted on disk, and decrypted by the
     operating system. On FreeBSD, the equivalent facility is called
     GEOM Based Disk Encryption (<acronym>gbde</acronym>), and many
     other operating systems support this functionality, including Windows.
    </para>

    <para>
     This mechanism prevents unencrypted data from being read from the
     drives if the drives or the entire computer is stolen. This does
     not protect against attacks while the file system is mounted,
     because when mounted, the operating system provides an unencrypted
     view of the data. However, to mount the file system, you need some
     way for the encryption key to be passed to the operating system,
     and sometimes the key is stored somewhere on the host that mounts
     the disk.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>Encrypting Passwords Across A Network</term>

   <listitem>
     <para>
      The <literal>MD5</literal> authentication method double-encrypts the
      password on the client before sending it to the server. It first
      MD5-encrypts it based on the user name, and then encrypts it
      based on a random salt sent by the server when the database
      connection was made. It is this double-encrypted value that is
      sent over the network to the server. Double-encryption not only
      prevents the password from being discovered, it also prevents
      another connection from using the same encrypted password to
      connect to the database server at a later time.
     </para>
    </listitem>
  </varlistentry>

  <varlistentry>
   <term>Encrypting Data Across A Network</term>

    <listitem>
     <para>
      SSL connections encrypt all data sent across the network: the
      password, the queries, and the data returned. The
      <filename>pg_hba.conf</filename> file allows administrators to specify
      which hosts can use non-encrypted connections (<literal>host</literal>)
      and which require SSL-encrypted connections
      (<literal>hostssl</literal>). Also, clients can specify that they
      connect to servers only via SSL. <application>Stunnel</application> or
      <application>SSH</application> can also be used to encrypt transmissions.
     </para>
    </listitem>
  </varlistentry>

  <varlistentry>
   <term>SSL Host Authentication</term>

   <listitem>
    <para>
     It is possible for both the client and server to provide SSL
     certificates to each other. It takes some extra configuration
     on each side, but this provides stronger verification of identity
     than the mere use of passwords. It prevents a computer from
     pretending to be the server just long enough to read the password
     sent by the client. It also helps prevent <quote>man in the middle</quote>
     attacks where a computer between the client and server pretends to
     be the server and reads and passes all data between the client and
     server.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>Client-Side Encryption</term>

   <listitem>
    <para>
     If the system administrator for the server's machine cannot be trusted,
     it is necessary
     for the client to encrypt the data; this way, unencrypted data
     never appears on the database server. Data is encrypted on the
     client before being sent to the server, and database results have
     to be decrypted on the client before being used.
    </para>
   </listitem>
  </varlistentry>

  </variablelist>

 </sect1>

 <sect1 id="ssl-tcp">
  <title>Secure TCP/IP Connections with SSL</title>

  <indexterm zone="ssl-tcp">
   <primary>SSL</primary>
  </indexterm>

  <para>
   <productname>PostgreSQL</productname> has native support for using
   <acronym>SSL</acronym> connections to encrypt client/server communications
   for increased security. This requires that
   <productname>OpenSSL</productname> is installed on both client and
   server systems and that support in <productname>PostgreSQL</productname> is
   enabled at build time (see <xref linkend="installation"/>).
  </para>

  <para>
   With <acronym>SSL</acronym> support compiled in, the
   <productname>PostgreSQL</productname> server can be started with
   <acronym>SSL</acronym> enabled by setting the parameter
   <xref linkend="guc-ssl"/> to <literal>on</literal> in
   <filename>postgresql.conf</filename>.  The server will listen for both normal
   and <acronym>SSL</acronym> connections on the same TCP port, and will negotiate
   with any connecting client on whether to use <acronym>SSL</acronym>.  By
   default, this is at the client's option; see <xref
   linkend="auth-pg-hba-conf"/> about how to set up the server to require
   use of <acronym>SSL</acronym> for some or all connections.
  </para>

  <para>
   <productname>PostgreSQL</productname> reads the system-wide
   <productname>OpenSSL</productname> configuration file. By default, this
   file is named <filename>openssl.cnf</filename> and is located in the
   directory reported by <literal>openssl version -d</literal>.
   This default can be overridden by setting environment variable
   <envar>OPENSSL_CONF</envar> to the name of the desired configuration file.
  </para>

  <para>
   <productname>OpenSSL</productname> supports a wide range of ciphers
   and authentication algorithms, of varying strength.  While a list of
   ciphers can be specified in the <productname>OpenSSL</productname>
   configuration file, you can specify ciphers specifically for use by
   the database server by modifying <xref linkend="guc-ssl-ciphers"/> in
   <filename>postgresql.conf</filename>.
  </para>

  <note>
   <para>
    It is possible to have authentication without encryption overhead by
    using <literal>NULL-SHA</literal> or <literal>NULL-MD5</literal> ciphers.  However,
    a man-in-the-middle could read and pass communications between client
    and server.  Also, encryption overhead is minimal compared to the
    overhead of authentication.  For these reasons NULL ciphers are not
    recommended.
   </para>
  </note>

  <para>
   To start in <acronym>SSL</acronym> mode, the files <filename>server.crt</filename>
   and <filename>server.key</filename> must exist in the server's data directory.
   These files should contain the server certificate and private key,
   respectively.
   On Unix systems, the permissions on <filename>server.key</filename> must
   disallow any access to world or group; achieve this by the command
   <command>chmod 0600 server.key</command>.
   If the private key is protected with a passphrase, the
   server will prompt for the passphrase and will not start until it has
   been entered.
  </para>

  <para>
   In some cases, the server certificate might be signed by an
   <quote>intermediate</quote> certificate authority, rather than one that is
   directly trusted by clients.  To use such a certificate, append the
   certificate of the signing authority to the <filename>server.crt</filename> file,
   then its parent authority's certificate, and so on up to a <quote>root</quote>
   authority that is trusted by the clients.  The root certificate should
   be included in every case where <filename>server.crt</filename> contains more than
   one certificate.
  </para>

  <sect2 id="ssl-client-certificates">
   <title>Using client certificates</title>

   <para>
   To require the client to supply a trusted certificate, place
   certificates of the certificate authorities (<acronym>CA</acronym>s)
   you trust in the file <filename>root.crt</filename> in the data
   directory, and set the <literal>clientcert</literal> parameter
   to <literal>1</literal> on the appropriate <literal>hostssl</literal> line(s) in
   <filename>pg_hba.conf</filename>.
   A certificate will then be requested from the client during
   SSL connection startup.  (See <xref linkend="libpq-ssl"/> for a
   description of how to set up certificates on the client.)  The server will
   verify that the client's certificate is signed by one of the trusted
   certificate authorities.  Certificate Revocation List (CRL) entries
   are also checked if the file <filename>root.crl</filename> exists.
   <!-- If this URL changes replace it with a URL to www.archive.org. -->
   (See <ulink
   url="http://h71000.www7.hp.com/DOC/83final/BA554_90007/ch04s02.html"></ulink>
   for diagrams showing SSL certificate usage.)
  </para>

  <para>
   The <literal>clientcert</literal> option in <filename>pg_hba.conf</filename> is
   available for all authentication methods, but only for rows specified as
   <literal>hostssl</literal>.  When <literal>clientcert</literal> is not specified
   or is set to <literal>0</literal>, the server will still verify presented client
   certificates against <filename>root.crt</filename> if that file exists
   &mdash; but it will not insist that a client certificate be presented.
  </para>

  <para>
   Note that <filename>root.crt</filename> lists the top-level CAs that are
   considered trusted for signing client certificates.  In principle it need
   not list the CA that signed the server's certificate, though in most cases
   that CA would also be trusted for client certificates.
  </para>

  <para>
   If you are setting up client certificates, you may wish to use
   the <literal>cert</literal> authentication method, so that the certificates
   control user authentication as well as providing connection security.
   See <xref linkend="auth-cert"/> for details.
  </para>
  </sect2>

  <sect2 id="ssl-server-files">
   <title>SSL Server File Usage</title>
  <para>
   The files <filename>server.key</filename>, <filename>server.crt</filename>,
   <filename>root.crt</filename>, and <filename>root.crl</filename>
   are only examined during server start; so you must restart
   the server for changes in them to take effect.
  </para>

  <table id="ssl-file-usage">
   <title>SSL Server File Usage</title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>File</entry>
      <entry>Contents</entry>
      <entry>Effect</entry>
     </row>
    </thead>

    <tbody>

     <row>
      <entry><filename>server.crt</filename></entry>
      <entry>server certificate</entry>
      <entry>sent to client to indicate server's identity</entry>
     </row>

     <row>
      <entry><filename>server.key</filename></entry>
      <entry>server private key</entry>
      <entry>proves server certificate was sent by the owner; does not indicate
      certificate owner is trustworthy</entry>
     </row>

     <row>
      <entry><filename>root.crt</filename></entry>
      <entry>trusted certificate authorities</entry>
      <entry>checks that client certificate is
      signed by a trusted certificate authority</entry>
     </row>

     <row>
      <entry><filename>root.crl</filename></entry>
      <entry>certificates revoked by certificate authorities</entry>
      <entry>client certificate must not be on this list</entry>
     </row>

    </tbody>
   </tgroup>
  </table>
  </sect2>

  <sect2 id="ssl-certificate-creation">
   <title>Creating a Self-Signed Certificate</title>

   <para>
    To create a quick self-signed certificate for the server, use the
    following <productname>OpenSSL</productname> command:
<programlisting>
openssl req -new -text -out server.req
</programlisting>
    Fill out the information that <application>openssl</application> asks for. Make sure
    you enter the local host name as <quote>Common Name</quote>; the challenge
    password can be left blank. The program will generate a key that is
    passphrase protected; it will not accept a passphrase that is less
    than four characters long. To remove the passphrase (as you must if
    you want automatic start-up of the server), run the commands:
<programlisting>
openssl rsa -in privkey.pem -out server.key
rm privkey.pem
</programlisting>
    Enter the old passphrase to unlock the existing key. Now do:
<programlisting>
openssl req -x509 -in server.req -text -key server.key -out server.crt
</programlisting>
    to turn the certificate into a self-signed certificate and to copy
    the key and certificate to where the server will look for them.
    Finally do:
<programlisting>
chmod og-rwx server.key
</programlisting>
    because the server will reject the file if its permissions are more
    liberal than this.
    For more details on how to create your server private key and
    certificate, refer to the <productname>OpenSSL</productname> documentation.
   </para>

   <para>
    A self-signed certificate can be used for testing, but a certificate
    signed by a certificate authority (<acronym>CA</acronym>) (either one of the
    global <acronym>CAs</acronym> or a local one) should be used in production
    so that clients can verify the server's identity. If all the clients
    are local to the organization, using a local <acronym>CA</acronym> is
    recommended.
   </para>

  </sect2>

 </sect1>

 <sect1 id="ssh-tunnels">
  <title>Secure TCP/IP Connections with <application>SSH</application> Tunnels</title>

  <indexterm zone="ssh-tunnels">
   <primary>ssh</primary>
  </indexterm>

  <para>
   It is possible to use <application>SSH</application> to encrypt the network
   connection between clients and a
   <productname>PostgreSQL</productname> server. Done properly, this
   provides an adequately secure network connection, even for non-SSL-capable
   clients.
  </para>

  <para>
   First make sure that an <application>SSH</application> server is
   running properly on the same machine as the
   <productname>PostgreSQL</productname> server and that you can log in using
   <command>ssh</command> as some user. Then you can establish a secure
   tunnel with a command like this from the client machine:
<programlisting>
ssh -L 63333:localhost:5432 joe@foo.com
</programlisting>
   The first number in the <option>-L</option> argument, 63333, is the
   port number of your end of the tunnel; it can be any unused port.
   (IANA reserves ports 49152 through 65535 for private use.)  The
   second number, 5432, is the remote end of the tunnel: the port
   number your server is using. The name or IP address between the
   port numbers is the host with the database server you are going to
   connect to, as seen from the host you are logging in to, which
   is <literal>foo.com</literal> in this example. In order to connect
   to the database server using this tunnel, you connect to port 63333
   on the local machine:
<programlisting>
psql -h localhost -p 63333 postgres
</programlisting>
   To the database server it will then look as though you are really
   user <literal>joe</literal> on host <literal>foo.com</literal>
   connecting to <literal>localhost</literal> in that context, and it
   will use whatever authentication procedure was configured for
   connections from this user and host.  Note that the server will not
   think the connection is SSL-encrypted, since in fact it is not
   encrypted between the
   <application>SSH</application> server and the
   <productname>PostgreSQL</productname> server.  This should not pose any
   extra security risk as long as they are on the same machine.
  </para>

  <para>
   In order for the
   tunnel setup to succeed you must be allowed to connect via
   <command>ssh</command> as <literal>joe@foo.com</literal>, just
   as if you had attempted to use <command>ssh</command> to create a
   terminal session.
  </para>

  <para>
   You could also have set up the port forwarding as
<programlisting>
ssh -L 63333:foo.com:5432 joe@foo.com
</programlisting>
   but then the database server will see the connection as coming in
   on its <literal>foo.com</literal> interface, which is not opened by
   the default setting <literal>listen_addresses =
   'localhost'</literal>.  This is usually not what you want.
  </para>

  <para>
   If you have to <quote>hop</quote> to the database server via some
   login host, one possible setup could look like this:
<programlisting>
ssh -L 63333:db.foo.com:5432 joe@shell.foo.com
</programlisting>
   Note that this way the connection
   from <literal>shell.foo.com</literal>
   to <literal>db.foo.com</literal> will not be encrypted by the SSH
   tunnel.
   SSH offers quite a few configuration possibilities when the network
   is restricted in various ways.  Please refer to the SSH
   documentation for details.
  </para>

  <tip>
   <para>
    Several other applications exist that can provide secure tunnels using
    a procedure similar in concept to the one just described.
   </para>
  </tip>

 </sect1>

</chapter>
