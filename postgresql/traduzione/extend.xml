<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

 <chapter id="extend">
  <title>Estendere <acronym>SQL</acronym></title>

  <indexterm zone="extend">
   <primary>estendere SQL</primary>
  </indexterm>

  <para>
Nelle sezioni che seguono, discuteremo di come è possibile
estendere il linguaggio <acronym>SQL</acronym> di <productname>PostgreSQL</productname>
aggiungendo:

   <itemizedlist spacing="compact" mark="bullet">
    <listitem>
     <para>
funzioni (cominciando da <xref linkend="xfunc"/>)
     </para>
    </listitem>
    <listitem>
     <para>
aggregate (cominciando da <xref linkend="xaggr"/>)
     </para>
    </listitem>
    <listitem>
     <para>
tipi di dato (cominciando da <xref linkend="xtypes"/>)
     </para>
    </listitem>
    <listitem>
     <para>
operatori (cominciando da <xref linkend="xoper"/>)
     </para>
    </listitem>
    <listitem>
     <para>
classi di operatori per indici (cominciando da <xref linkend="xindex"/>)
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <sect1 id="extend-how">
   <title>Come funziona l'estensibilità</title>

   <para>
<productname>PostgreSQL</productname> è estensibile dato che le sue operazioni sono 
orientate al catalogo. Se si è familiari con i sistemi di database relazionali standard,
si dovrebbe sapere che tengono informazioni 
su database, tabelle, colonne, ecc., in quelli che comunemente 
sono chiamati cataloghi di sistema. (Alcuni sistemi chiamano questi dati dizionari). 
I cataloghi appaiono agli utenti come tabelle uguali alle altre, ma il <acronym>DBMS</acronym>
salva in essi la sua contabilità. 
Una differenza fondamentale tra <productname>PostgreSQL</productname> e i sistemi di database relazionali standard
è che <productname>PostgreSQL</productname> salva molte più informazioni nei suoi
cataloghi: non solo informazioni riguardanti tabelle e colonne,
ma anche informazioni sui tipi di dato, funzioni, metodi di accesso,
e così via. Queste tabelle possono essere modificate dall'utente
e dato che <productname>PostgreSQL</productname> basa le sue operazioni
su queste tabelle, questo significa che <productname>PostgreSQL</productname> può essere
esteso dall'utente. Per fare un paragone, i sistemi di database convenzionali    
possono essere estesi solo cambiando procedure nel codice sorgente
o caricando moduli scritti appositamente dal distributore del <acronym>DBMS</acronym>
   </para>

   <para>
Il server <productname>PostgreSQL</productname> può inoltre 
incorporare codice scritto dall'utente in sè stesso attraverso il caricamento dinamico.
Così, l'utente può specificare un file di codice oggeto (per es., una libreria condivisa)
che implementa un nuovo tipo o funzione, e <productname>PostgreSQL</productname>
la caricherà come richiesto.
Il codice scritto in <acronym>SQL</acronym> è ancora più banale da aggiungere
al server. L'abilità di modificare le sue operazioni <quote>al volo</quote>
rende <productname>PostgreSQL</productname> adatto 
a creare rapidamente nuove applicazioni e e strutture di immagazzinamento.
   </para>
  </sect1>

  <sect1 id="extend-type-system">
   <title>Il sistema dei tipi di <productname>PostgreSQL</productname></title>

   <indexterm zone="extend-type-system">
    <primary>tipo base</primary>
   </indexterm>

   <indexterm zone="extend-type-system">
    <primary>tipo di dato</primary>
    <secondary>base</secondary>
   </indexterm>

   <indexterm zone="extend-type-system">
    <primary>tipo composto</primary>
   </indexterm>

   <indexterm zone="extend-type-system">
    <primary>tipo di dato</primary>
    <secondary>composito</secondary>
   </indexterm>

   <para>
I tipi di dato di <productname>PostgreSQL</productname> sono divisi in tipi di base,
tipi composti, domini e pseudo-tipi.
   </para>

   <sect2>
    <title>Tipi di base</title>

    <para>
I tipi di base sono quelli che, come <type>int4</type>, sono 
implementati sotto il livello del linguaggio <acronym>SQL</acronym>
(tipicamente in un linguaggio a basso livello tipo il C). Generalmente 
corrispondono a quelli che spesso sono conosciuti come tipi di dato astratti.
<productname>PostgreSQL</productname> può lavorare solo con questi tipi
attraverso le funzioni fornite dall'utente e capire solo il
comportamento di questi tipi nella misura in cui l'utente li descrive.
I tipi di base sono suddivisi in tipi scalari e array.
Per ogni tipo scalare, viene creato automaticamente un tipo array corrispondente 
che può gestire array di dimensione variabile di quel tipo scalare.
    </para>
   </sect2>

   <sect2>
    <title>Tipi composti</title>

    <para>
I tipi composti, o tipi riga, vengono creati ogni volta che l'utente
crea una tabella. È anche possibile usare <xref
linkend="sql-createtype"/> per
definire un tipo composto <quote>a sè stante</quote> senza tabella associata.
Un tipo composto è semplicemente un elenco di tipi con 
nomi di campo associati. Un valore di un tipo composto è una riga o 
record di valori di campo. L'utente può accedere ai campi "componente" 
dalle query <acronym>SQL</acronym>. Si veda <xref linkend="rowtypes"/>
per maggiori informazioni dui tipi composti.
    </para>
   </sect2>

   <sect2>
    <title>Domini</title>

    <para>
Un dominio è basato su un particolare tipo di base e per molti scopi
è intercambiabile col suo tipo di base. Comunque, un dominio può
avere vincoli che restringono i suoi valori validi a un sottoinsieme di 
cosa permette il sottostante tipo di base.
    </para>

    <para>
I domini possono essere creati usando il comando <acronym>SQL</acronym>
<xref linkend="sql-createdomain"/>.
     Their creation and use is not discussed in this chapter.
    </para>
   </sect2>

   <sect2>
    <title>Pseudo-tipi</title>

    <para>
Ci sono alcuni <quote>pseudo-tipi</quote> per scopi speciali.
Gli pseudo-tipi non possono apparire come colonne di tabelle o attributi 
di tipi composti, ma possono essere usati per dichiarare i tipi degli argomenti 
e del valore di ritorno delle funzioni. Questo fornisce un meccanismo all'interno
del sistema di tipo per identificare classi di funzioni speciali. <xref
linkend="datatype-pseudotypes-table"/> elenca gli pseudo-tipi esistenti.
    </para>
   </sect2>

   <sect2 id="extend-types-polymorphic">
    <title>Tipi polimorfi</title>

   <indexterm zone="extend-types-polymorphic">
    <primary>tipo polimorfico</primary>
   </indexterm>

   <indexterm zone="extend-types-polymorphic">
    <primary>funzione polimorfica</primary>
   </indexterm>

   <indexterm zone="extend-types-polymorphic">
    <primary>tipo</primary>
    <secondary>polimorfico</secondary>
   </indexterm>

   <indexterm zone="extend-types-polymorphic">
    <primary>funzione</primary>
    <secondary>poliformica</secondary>
   </indexterm>

    <para>
Quattro pseudo-tipi di speciale interesse sono <type>anyelement</type>,
<type>anyarray</type>, <type>anynonarray</type> e <type>anyenum</type>,
che sono chiamati collettivamente <firstterm>tipi polimorfici</firstterm>. 
Qualsiasi funzione dichiarata usando questi tipi è definita 
una <firstterm>funzione polimorfica</firstterm>. Una funzione polimorfica può
operare su diversi tipi di dato, con lo specifico tipo/i di dato  
determinato dai tipi di dato effettivamente passati ad essa in una particolare chiamata.
    </para>

    <para>
Gli argomenti polimorfici e i risultati sono legati l'uni gli altri e vengono risolti 
da uno specifico tipo di dato quando la chiamata di una funzione polimorfica viene 
sottoposta al parsing. Ogni posizione (o il valore dell'argomento o il valore di ritorno) dichiarata come
<type>anyelement</type> può avere qualsiasi tipo di dato, ma 
in ogni data chiamata devono essere tutti dello <emphasis>stesso</emphasis> tipo effettivo.
Ogni posizione dichiarata come <type>anyarray</type> può avere qualsiasi tipo di dato array,
ma similmente devono essere tutti dello stesso tipo. Se ci sono 
posizioni dichiarate <type>anyarray</type> e altre dichiarate 
<type>anyelement</type>, il tipo array effettivo nelle posizioni 
<type>anyarray</type> deve essere un array i cui elementi sono 
dello stesso tipo di quelli che appaiono nelle posizioni  <type>anyelement</type>.
<type>anynonarray</type> viene trattato esattamente alla stessa maniera di  <type>anyelement</type>,
ma aggiunge il vincolo che il tipo effettivo non deve essere un tipo array.
<type>anyenum</type> viene trattato esattamente allo stesso modo di <type>anyelement</type>,
ma aggiunge il vincolo che il tipo effettivo dev'essere un tipo enum.
    </para>

    <para>
Perciò, quando più di una posizione argomento viene dichiarata con un tipo polimorfico,
l'effetto è che solo certe combinazioni di effettivi tipi sono permesse.
Per esempio, una funzione dichiarata come <literal>equal(anyelement, anyelement)</literal> 
prenderà qualsiasi due valori di input, 
se sono dello stesso tipo di dato.
    </para>

    <para>
Quando il valore di ritorno di una funzione è dichiarato come un tipo polimorfico,
ci deve anche essere almeno una posizione di argomento che è poliformica,
e il tipo di dato effettivo fornito come argomento determina  l'effettivo tipo del risultato  
per quella chiamata. Per esempio, se non c'era già
un meccanismo di sottoscript dell'array, si potrebbe definire una funzione che
implementa il sottoscripting come <literal>subscript(anyarray, integer) 
returns anyelement</literal>. Questa dichiarazione vincola l'effettivo primo
argomento ad essere un tipo array, e permette che il parser deduca 
il tipo del risultato dal tipo effettivo del primo argomento. Un altro esempio
è che una funzione dichiarata come <literal>f(anyarray) returns anyenum</literal> 
accetterà solo array di tipi enum.
    </para>

    <para>
Notare che <type>anynonarray</type>  e <type>anyenum</type> non rappresentano
variabili di tipo separate; sono lo stesso tipo di 
<type>anyelement</type>, solo con un vincolo aggiuntivo. Per esempio,
dichiarando una funzione come <literal>f(anyelement, anyenum)</literal>
è equivalente a dichiararla come <literal>f(anyenum, anyenum)</literal>:
entrambi gli effettivi argomenti devono essere dello stesso tipo enum.
    </para>

    <para>
Una funzione variadica (che prende un numero variabile di argomenti, come in
<xref linkend="xfunc-sql-variadic-functions"/>) puà essere
polimorfica: questo è fatto dichiarando il suo ultimo parametro come 
<literal>VARIADIC</literal> <type>anyarray</type>.  Per scopi di corrispondenza di argomenti
e per determinare l'effettivo tipo del risultati, tale funzione si comporta 
allo stesso modo se è stata scritta con l'appropriato numero di 
parametri <type>anynonarray</type>.
    </para>
   </sect2>
  </sect1>

  &xfunc;
  &xaggr;
  &xtypes;
  &xoper;
  &xindex;

  <sect1 id="extend-Cpp">
   <title>Usare  C++ per l'estendibilità</title>

   <indexterm zone="extend-Cpp">
    <primary>C++</primary>
   </indexterm>

   <para>
È possibile usare un compilatore in modalità  C++ per compilare 
estensioni <productname>PostgreSQL</productname> seguendo queste 
linee guida:

    <itemizedlist>
     <listitem>
      <para>
Tutte le funzioni a cui accede il backend devono  fornire un'interfaccia C
al backend; queste funzioni C possono quindi chiamare funzioni C++.
Per esempio, il collegamento <literal>extern C</literal> è richiesto per 
funzioni a cui accede il backend. Questo è necessario per qualsiasi   
funzione passata come puntatore tra il backend e il codice C++.
      </para>
     </listitem>
     <listitem>
      <para>
Liberare la memoria usando l'appropriato metodo di deallocazione. Per esempio, 
la maggior parte della memoria del back è allocata usando <function>palloc()</function>, quindi 
usare <function>pfree()</function> per liberarla, per es. usando la 
<function>delete()</function> del C++ in quei casi risulterà in un fallimento.
      </para>
     </listitem>
     <listitem>
      <para>
Prevenire che le eccezioni si propaghino all'interno del codice C (usare un
blocco catch-all al livello superiore di tutte le funzioni <literal>extern C</literal>).
Questo è necessario anche se il codice C++ non lancia nessuna eccezione perchè
eventi come out-of-memory continuano a lanciare eccezioni. Qualsiasi eccezione
deve essere intercettata e gli errori appropriati devono essere ritornati all'interfaccia C.
Se possibile, compilare il C++ con <option>-fno-exceptions</option> per eliminare
interamente le eccezioni; in questi casi, si devono controllare i fallimenti  
nel proprio codice C++, per es. controllare se le <function>new()</function>
restituiscano NULL.
      </para>
     </listitem>
     <listitem>
      <para>
Se si chiamano funzioni di backend dal codice C++, assicurarsi che lo 
stack delle chiamate C++ contenga solo semplici strutture dati
(<acronym>POD</acronym>). Questo è necessario dato che errori di backend
generano un <function>longjump()</function> lontano che non srotola correttamente
uno stack di chiamata C++ con oggetti non-POD.
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
Riassumendo, è meglio mettere il codice C++ dietro un muro di 
funzioni <literal>extern C</literal> che si interfaccia col backend,
e evitare la perdita di eccezioni, memoria e stack di chiamate.
   </para>
  </sect1>

 </chapter>
