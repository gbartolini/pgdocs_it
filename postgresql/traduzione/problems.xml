<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

<sect1 id="bug-reporting">
 <title>Linee guida per la segnalazione di bug</title>

 <para>
Quando vengono trovati bug in <productname>PostgreSQL</productname> vogliamo
saperlo. Le segnalazioni di bug giocano un ruolo importante nel rendere
<productname>PostgreSQL</productname> più attendibile, 
perchè anche la massima attenzione
non può garantire che ogni parte di 
<productname>PostgreSQL</productname>
funzionerà su ogni piattaforma in ogni circostanza.
 </para>

 <para>
I seguenti suggerimenti sono intesi ad assistere nella creazione 
di segnalazioni di bug
che possando essere gestite con efficacia. Non è richiesto seguirli
ma farlo costituirà un vantaggio per tutti.
 </para>

 <para>
Non possiamo promettre di risolvere subito ogni bug. Se il bug è evidente, critico,
o coinvolge molti utenti, ci sono buone possibilità che qualcuno se ne occupi.
Potrebbe anche capitare che venga consigliato di aggiornare ad una 
versione più recente per vedere se il bug si ripresenta.
O potremmo decidere che il bug
non possa essere risolto prima che venga completata riscrittura importante. O
forse è semplicemente troppo difficile e ci sono cose più importanti in agenda.
Se si ha bisogno di aiuto istantaneo, considerare un contratto di supporto
commerciale.
 </para>

 <sect2>
  <title>Identificare i bug</title>

  <para>
Prima di segnalare un bug, preghiamo di leggere e ri-leggere la
documentazione per verificare se sia possibile veramente fare quello che stai
provando. Se dalla documentazione non è chiaro se si possa fare
qualcosa o no, preghiamo di segnare anche questo; È un bug della documentazione.
Se si dimostra che un programma fa qualcosa di differente da quello che dice 
la documentazione, quello è un bug.
Questo potrebbe includere, ma non essere limitato a,
le seguenti circostanze:

   <itemizedlist>
    <listitem>
     <para>
Un programma termina con un segnale fatale o un messaggio di errore del
sistema operativo che indica un problema nel programma. (Un 
esempio opposto potrebbe essere un messaggio di  <quote>disco pieno</quote>,
dato devi risolvere il problema da solo.)
     </para>
    </listitem>

    <listitem>
     <para>
Un programma produce l'output sbagliato per ogni input fornito.
     </para>
    </listitem>

    <listitem>
     <para>
Un programma si rifiuta di accettare input validi 
(come definiti nella documentazione).
     </para>
    </listitem>

    <listitem>
     <para>
Un programma accetta input non validi senza notifica o messaggio di errore.
Tenere a mente che l'idea che si ha di input non valido potrebbe essere
per noi un'idea per un'estensione o per compatibilità con la pratica tradizionale.
     </para>
    </listitem>

    <listitem>
     <para>
<productname>PostgreSQL</productname> non riesce a compilare, fare il build,
o installarsi, secondo le istruzioni per le piattaforme supportate.
     </para>
    </listitem>
   </itemizedlist>

<quote>Programma</quote> si riferisce ad ogni eseguibile, non solo
al server backend.    
  </para>

  <para>
L'essere lento o l'accaparrare risorse non è necessariamente un bug. 
Leggere la documentazione o chiedere su una delle mailing list per la 
messa a punto delle applicazioni. 
Nemmeno fallire nel soddisfare lo standard <acronym>SQL</acronym>
è necessariamente un bug, a meno che la conformità per la specifica caratteristica
sia esplicitamente richiesta.
  </para>

  <para>
Prima di continuare, controllare sull'elenco TODO nelle FAQ per vedere se il bug è
già noto. Se non si riesce a decifrare le informazioni dell'elenco TODO, riportare 
il problema. Il minimo che possiamo fare è rendere l'elenco TODO più chiaro.
  </para>
 </sect2>

 <sect2>
  <title>Cosa segnalare</title>

  <para>
La cosa più importante da ricordare sulla segnalazione di bug è di esporre tutti
i fatti e solo i fatti. Non supporre quello che si pensa sia andato male, cosa
<quote>è sembrato essere successo</quote>, 
o quale parte del programma ne abbia colpa.
Se non si ha familiarità con l'implementazione probabilmente supporrai sbagliato
e non ci aiuterai. Ed anche se si ha, spegazioni educate sono un ottimo 
supplemento ma non sostituiscono i fatti. Se boddiamo risolvere il bug 
dovremmo comunque vederlo accadere, prima. 
Segnalare i fatti è relativamente semplice (probabilmente si potrà copiarli e
incollarli dallo schermo) ma molto spesso vengono tralasciati importanti dettagli 
perchè si pensa non siano importanti o che la segnalazione sia comunque
comprensibile.
  </para>

  <para>
I seguenti punti dovrebbero essere contenuti in ogni segnalazione di bug:

   <itemizedlist>
    <listitem>
     <para>
      The exact sequence of steps <emphasis>from program
      start-up</emphasis> necessary to reproduce the problem. This
      should be self-contained; it is not enough to send in a bare
      <command>SELECT</command> statement without the preceding
      <command>CREATE TABLE</command> and <command>INSERT</command>
      statements, if the output should depend on the data in the
      tables. We do not have the time to reverse-engineer your
      database schema, and if we are supposed to make up our own data
      we would probably miss the problem.
     </para>

     <para>
      The best format for a test case for SQL-related problems is a
      file that can be run through the <application>psql</application>
      frontend that shows the problem. (Be sure to not have anything
      in your <filename>~/.psqlrc</filename> start-up file.)  An easy
      way to create this file is to use <application>pg_dump</application>
      to dump out the table declarations and data needed to set the
      scene, then add the problem query.  You are encouraged to
      minimize the size of your example, but this is not absolutely
      necessary.  If the bug is reproducible, we will find it either
      way.
     </para>

     <para>
      If your application uses some other client interface, such as <application>PHP</application>, then
      please try to isolate the offending queries. We will probably not set up a
      web server to reproduce your problem. In any case remember to provide
      the exact input files; do not guess that the problem happens for
      <quote>large files</quote> or <quote>midsize databases</quote>, etc. since this
      information is too inexact to be of use.
     </para>
    </listitem>

    <listitem>
     <para>
      The output you got. Please do not say that it <quote>didn't work</quote> or
      <quote>crashed</quote>. If there is an error message,
      show it, even if you do not understand it. If the program terminates with
      an operating system error, say which. If nothing at all happens, say so.
      Even if the result of your test case is a program crash or otherwise obvious
      it might not happen on our platform. The easiest thing is to copy the output
      from the terminal, if possible.
     </para>
     <note>
      <para>
       If you are reporting an error message, please obtain the most verbose
       form of the message.  In <application>psql</application>, say <literal>\set
       VERBOSITY verbose</literal> beforehand.  If you are extracting the message
       from the server log, set the run-time parameter
       <xref linkend="guc-log-error-verbosity"/> to <literal>verbose</literal> so that all
       details are logged.
      </para>
     </note>
     <note>
      <para>
       In case of fatal errors, the error message reported by the client might
       not contain all the information available. Please also look at the
       log output of the database server. If you do not keep your server's log
       output, this would be a good time to start doing so.
      </para>
     </note>
    </listitem>

    <listitem>
     <para>
      The output you expected is very important to state. If you just write
      <quote>This command gives me that output.</quote> or <quote>This is not
      what I expected.</quote>, we might run it ourselves, scan the output, and
      think it looks OK and is exactly what we expected. We should not have to
      spend the time to decode the exact semantics behind your commands.
      Especially refrain from merely saying that <quote>This is not what SQL says/Oracle
      does.</quote> Digging out the correct behavior from <acronym>SQL</acronym>
      is not a fun undertaking, nor do we all know how all the other relational
      databases out there behave. (If your problem is a program crash, you can
      obviously omit this item.)
     </para>
    </listitem>

    <listitem>
     <para>
      Any command line options and other start-up options, including
      any relevant environment variables or configuration files that
      you changed from the default. Again, please provide exact
      information. If you are using a prepackaged distribution that
      starts the database server at boot time, you should try to find
      out how that is done.
     </para>
    </listitem>

    <listitem>
     <para>
      Anything you did at all differently from the installation
      instructions.
     </para>
    </listitem>

    <listitem>
     <para>
      The <productname>PostgreSQL</productname> version. You can run the command
      <literal>SELECT version();</literal> to
      find out the version of the server you are connected to.  Most executable
      programs also support a <option>--version</option> option; at least
      <literal>postgres --version</literal> and <literal>psql --version</literal>
      should work.
      If the function or the options do not exist then your version is
      more than old enough to warrant an upgrade.
      If you run a prepackaged version, such as RPMs, say so, including any
      subversion the package might have. If you are talking about a CVS
      snapshot, mention that, including its date and time.
     </para>

     <para>
      If your version is older than &version; we will almost certainly
      tell you to upgrade. There are many bug fixes and improvements
      in each new release, so it is quite possible that a bug you have
      encountered in an older release of <productname>PostgreSQL</productname>
      has already been fixed. We can only provide limited support for
      sites using older releases of <productname>PostgreSQL</productname>; if you
      require more than we can provide, consider acquiring a
      commercial support contract.
     </para>
     <para>
     </para>
    </listitem>

    <listitem>
     <para>
      Platform information. This includes the kernel name and version,
      C library, processor, memory information, and so on. In most
      cases it is sufficient to report the vendor and version, but do
      not assume everyone knows what exactly <quote>Debian</quote>
      contains or that everyone runs on i386s. If you have
      installation problems then information about the toolchain on
      your machine (compiler, <application>make</application>, and so
      on) is also necessary.
     </para>
    </listitem>
   </itemizedlist>

   Do not be afraid if your bug report becomes rather lengthy. That is a fact of life.
   It is better to report everything the first time than us having to squeeze the
   facts out of you. On the other hand, if your input files are huge, it is
   fair to ask first whether somebody is interested in looking into it.  Here is
   an <ulink url="http://www.chiark.greenend.org.uk/~sgtatham/bugs.html">article</ulink>
   that outlines some more tips on reporting bugs.
  </para>

  <para>
   Do not spend all your time to figure out which changes in the input make
   the problem go away. This will probably not help solving it. If it turns
   out that the bug cannot be fixed right away, you will still have time to
   find and share your work-around. Also, once again, do not waste your time
   guessing why the bug exists. We will find that out soon enough.
  </para>

  <para>
   When writing a bug report, please avoid confusing terminology.
   The software package in total is called <quote>PostgreSQL</quote>,
   sometimes <quote>Postgres</quote> for short. If you
   are specifically talking about the backend server, mention that, do not
   just say <quote>PostgreSQL crashes</quote>.  A crash of a single
   backend server process is quite different from crash of the parent
   <quote>postgres</quote> process; please don't say <quote>the server
   crashed</quote> when you mean a single backend process went down, nor vice versa.
   Also, client programs such as the interactive frontend <quote><application>psql</application></quote>
   are completely separate from the backend.  Please try to be specific
   about whether the problem is on the client or server side.
  </para>
 </sect2>

 <sect2>
  <title>Where to report bugs</title>

  <para>
   In general, send bug reports to the bug report mailing list at
   <email>pgsql-bugs@postgresql.org</email>.
   You are requested to use a descriptive subject for your email
   message, perhaps parts of the error message.
  </para>

  <para> 
   Another method is to fill in the bug report web-form available
   at the project's
   <ulink url="http://www.postgresql.org/">web site</ulink>.
   Entering a bug report this way causes it to be mailed to the
   <email>pgsql-bugs@postgresql.org</email> mailing list.
  </para>

  <para>
   If your bug report has security implications and you'd prefer that it
   not become immediately visible in public archives, don't send it to
   <literal>pgsql-bugs</literal>.  Security issues can be
   reported privately to <email>security@postgresql.org</email>.
  </para>

  <para> 
   Do not send bug reports to any of the user mailing lists, such as
   <email>pgsql-sql@postgresql.org</email> or
   <email>pgsql-general@postgresql.org</email>.
   These mailing lists are for answering
   user questions, and their subscribers normally do not wish to receive
   bug reports. More importantly, they are unlikely to fix them.
  </para>

  <para>
   Also, please do <emphasis>not</emphasis> send reports to
   the developers' mailing list <email>pgsql-hackers@postgresql.org</email>.
   This list is for discussing the
   development of <productname>PostgreSQL</productname>, and it would be nice
   if we could keep the bug reports separate. We might choose to take up a
   discussion about your bug report on <literal>pgsql-hackers</literal>,
   if the problem needs more review.
  </para>

  <para>
   If you have a problem with the documentation, the best place to report it
   is the documentation mailing list <email>pgsql-docs@postgresql.org</email>.
   Please be specific about what part of the documentation you are unhappy
   with.
  </para>

  <para>
   If your bug is a portability problem on a non-supported platform,
   send mail to <email>pgsql-hackers@postgresql.org</email>,
   so we (and you) can work on
   porting <productname>PostgreSQL</productname> to your platform.
  </para>

  <note>
   <para>
    Due to the unfortunate amount of spam going around, all of the above
    email addresses are closed mailing lists. That is, you need to be
    subscribed to a list to be allowed to post on it.  (You need not be
    subscribed to use the bug-report web form, however.)
    If you would like to send mail but do not want to receive list traffic,
    you can subscribe and set your subscription option to <literal>nomail</literal>.
    For more information send mail to
    <email>majordomo@postgresql.org</email>
    with the single word <literal>help</literal> in the body of the message.
   </para>
  </note>
 </sect2>
</sect1>
