<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

 <sect1 id="release-9-0">
  <title>Release 9.0</title>

  <note>
   <title>Release date</title>
   <simpara>2010-??-??</simpara>
  </note>

  <para>CURRENT AS OF 2010-08-24</para>

  <sect2>
   <title>Overview</title>

   <para>
    This release of
    <productname>PostgreSQL</productname> adds features that have been requested
    for years, such as easy-to-use replication, a mass permission-changing
    facility, and anonymous code blocks. While past major releases have
    been conservative in their scope, this release shows a
    bold new desire to provide facilities that new and existing
    users of <productname>PostgreSQL</productname> will embrace. This has all
    been done with few incompatibilities. Major enhancements include:
   </para>

   <itemizedlist>

    <!-- This list duplicates items below, but without authors or details-->

    <listitem>

     <para>
      Built-in replication based on log shipping.  This advance consists of
      two features: Streaming Replication, allowing continuous archive
      (<acronym>WAL</acronym>) files to be streamed over a network connection to a
      standby server, and Hot Standby, allowing continuous archive standby
      servers to execute read-only queries.  The net effect is to support a
      single master with multiple read-only slave servers.
     </para>
    </listitem>

    <listitem>
     <para>
      Easier database object permissions management. <link
      linkend="sql-grant"><command>GRANT</command>/<command>REVOKE IN
      SCHEMA</command></link> supports mass permissions changes on existing objects,
      while <link linkend="sql-alterdefaultprivileges"><command>ALTER DEFAULT
      PRIVILEGES</command></link> allows control of privileges for objects created in
      the future.  Large objects (BLOBs) now support privilege management as
      well.
     </para>
    </listitem>

    <listitem>
     <para>
      Broadly enhanced stored procedure support.
      The <link linkend="sql-do"><command>DO</command></link> statement supports
      ad-hoc or <quote>anonymous</quote> code blocks.
      Functions can now be called using named parameters.
      <link linkend="plpgsql">PL/pgSQL</link> is now installed by default, and
      <link linkend="plperl">PL/Perl</link> and <link
      linkend="plpython">PL/Python</link> have been enhanced in several ways,
      including support for Python3.
     </para>
    </listitem>

    <listitem>
     <para>
      Full support for <link linkend="install-win32">64-bit
      <productname>Windows</productname></link>.
     </para>
    </listitem>

    <listitem>
     <para>
      More advanced reporting queries, including additional windowing options
      (<literal>PRECEDING</literal> and <literal>FOLLOWING</literal>) and the ability to
      control the order in which values are fed to aggregate functions.
     </para>
    </listitem>

    <listitem>
     <para>
      New trigger features, including
      SQL-standard-compliant <link
      linkend="sql-createtrigger">per-column triggers</link> and
      conditional trigger execution.
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="sql-createtable-compatibility">Deferrable
      unique constraints</link>. Mass updates to unique keys are now possible
      without trickery.
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="ddl-constraints-exclusion">Exclusion constraints</link>.
      These provide a generalized version of unique constraints, allowing
      enforcement of complex conditions.
     </para>
    </listitem>

    <listitem>
     <para>
      New and enhanced security features, including RADIUS authentication,
      LDAP authentication improvements, and a new contrib module
      <link linkend="passwordcheck"><filename>passwordcheck</filename></link>
      for testing password strength.
     </para>
    </listitem>

    <listitem>
     <para>
      New high-performance implementation of the
      <link linkend="sql-listen"><command>LISTEN</command></link>/<link
      linkend="sql-notify"><command>NOTIFY</command></link> feature.
      Pending events are now stored in a memory-based queue rather than
      a table.  Also, a <quote>payload</quote> string can be sent with each
      event, rather than transmitting just an event name as before.
     </para>
    </listitem>

    <listitem>
     <para>
      New implementation of
      <link linkend="sql-vacuum"><command>VACUUM FULL</command></link>.
      This command now rewrites the entire table and indexes, rather than
      moving individual rows to compact space.  It is substantially faster
      in most cases, and no longer results in index bloat.
     </para>
    </listitem>

    <listitem>
     <para>
      New contrib module
      <link linkend="pgupgrade"><filename>pg_upgrade</filename></link>
      to support in-place upgrades from 8.3 or 8.4 to 9.0.
     </para>
    </listitem>

    <listitem>
     <para>
      Multiple performance enhancements for specific types of queries,
      including elimination of unnecessary joins.  This helps optimize some
      automatically-generated queries, such as those produced by
      object-relational mappers (ORMs).
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="sql-explain "><command>EXPLAIN</command></link> enhancements.
      The output is now available in JSON, XML, or YAML format, and includes
      buffer utilization and other data not previously available.
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="hstore"><filename>hstore</filename></link> improvements,
      including new functions and greater data capacity.
     </para>
    </listitem>

   </itemizedlist>

   <para>
    The above items are explained in more detail in the sections below.
   </para>

  </sect2>

  <sect2>

  <title>Migration to Version 9.0</title>

  <para>
   A dump/restore using <application>pg_dump</application>,
   or use of <application>pg_upgrade</application>, is required
   for those wishing to migrate data from any previous
   release.
  </para>

  <para>
   Version 9.0 contains a number of changes that selectively break backwards
   compatibility in order to support new features and code quality
   improvements.  Also, users who make extensive use of PL/pgSQL,
   Point-In-Time Recovery (PITR), and Warm Standby should test their
   solutions because of slight user-visible changes in these areas.
   Observe the following incompatibilities:
  </para>

  <sect3>
   <title>Server Settings</title>

   <itemizedlist>

    <listitem>
     <para>
      Remove server parameter <varname>add_missing_from</varname>, which was
      defaulted to off for many years (Tom Lane)
     </para>
    </listitem>

    <listitem>
     <para>
      Remove server parameter <varname>regex_flavor</varname>, which
      was defaulted to <link
      linkend="posix-syntax-details"><literal>advanced</literal></link>
      for many years (Tom Lane)
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="guc-archive-mode"><varname>archive_mode</varname></link>
      now only affects <link
      linkend="guc-archive-command"><varname>archive_command</varname></link>;
      a new setting, <link
      linkend="guc-wal-level"><varname>wal_level</varname></link>, affects
      the contents of the write-ahead log (Heikki Linnakangas)
     </para>
    </listitem>

    <listitem>
     <para>
      <link linkend="guc-log-temp-files"><varname>log_temp_files</varname></link>
      now uses default file size units of kilobytes (Robert Haas)
     </para>
    </listitem>

   </itemizedlist>

  </sect3>

  <sect3>
   <title>Queries</title>

   <itemizedlist>

   <listitem>
    <para>
     When querying a <link linkend="ddl-inherit">parent table</link>,
     do not do any separate permission checks on child tables
     scanned as part of the query (Peter Eisentraut)
    </para>

    <para>
     The SQL standard specifies this behavior, and it is also much more
     convenient in practice than the former behavior of checking permissions
     on each child as well as the parent.
    </para>
   </listitem>

   </itemizedlist>

  </sect3>

  <sect3>
   <title>Data Types</title>

   <itemizedlist>

    <listitem>
     <para>
      <link linkend="datatype-binary"><type>bytea</type></link> output now
      appears in hex format by default (Peter Eisentraut)
     </para>

     <para>
      The server parameter <link
      linkend="guc-bytea-output"><varname>bytea_output</varname></link> can be
      used to select the traditional output format if needed for
      compatibility.
     </para>
    </listitem>

    <listitem>
     <para>
      Array input now considers only plain ASCII whitespace characters
      to be potentially ignorable; it will never ignore non-ASCII characters,
      even if they are whitespace according to some locales (Tom Lane)
     </para>

     <para>
      This avoids some corner cases where array values could be interpreted
      differently depending on the server's locale settings.
     </para>
    </listitem>

   <listitem>
    <para>
     Improve standards compliance of <link
     linkend="functions-similarto-regexp"><literal>SIMILAR TO</literal></link>
     patterns and SQL-style <function>substring()</function> patterns (Tom Lane)
    </para>

    <para>
     This includes treating <literal>?</literal> and <literal>{...}</literal> as
     pattern metacharacters, while they were simple literal characters
     before; that corresponds to new features added in SQL:2008.
     Also, <literal>^</literal> and <literal>$</literal> are now treated as simple
     literal characters; formerly they were treated as metacharacters,
     as if the pattern were following POSIX rather than SQL rules.
     Also, in SQL-standard <function>substring()</function>, use of parentheses
     for nesting no longer interferes with capturing of a substring.
     Also, processing of bracket expressions (character classes) is
     now more standards-compliant.
    </para>
   </listitem>

   <listitem>
    <para>
     Reject negative length values in 3-parameter <link
     linkend="functions-string-sql"><function>substring()</function></link>
     for bit strings, per the SQL standard (Tom Lane)
    </para>
   </listitem>

   <listitem>
    <para>
     Make <function>date_trunc</function> truncate rather than round when reducing
     precision of fractional seconds (Tom Lane)
    </para>

    <para>
     The code always acted this way for integer-based dates/times.
     Now float-based dates/times behave similarly.
    </para>
   </listitem>

  </itemizedlist>

  </sect3>

  <sect3>
   <title>Object Renaming</title>

   <itemizedlist>

    <listitem>
     <para>
      Tighten enforcement of column name consistency during <command>RENAME</command>
      when a child table inherits the same column from multiple unrelated
      parents (KaiGai Kohei)
     </para>
    </listitem>

    <listitem>
     <para>
      No longer automatically rename indexes and index columns when the
      underlying table columns are renamed (Tom Lane)
     </para>

     <para>
      Administrators can still rename such indexes and columns manually.
      This change will require an update of the JDBC driver, and possibly other
      drivers, so that unique indexes are correctly recognized after a rename.
     </para>
    </listitem>

    <listitem>
     <para>
      <command>CREATE OR REPLACE FUNCTION</command> can no longer change
      the declared names of function parameters (Pavel Stehule)
     </para>

     <para>
      In order to avoid creating ambiguity in named-parameter calls, it is
      no longer allowed to change the aliases for input parameters
      in the declaration of an existing function (although names can still
      be assigned to previously unnamed parameters).  You now have to
      <command>DROP</command> and recreate the function to do that.
     </para>
    </listitem>

   </itemizedlist>

  </sect3>

  <sect3>
   <title>PL/pgSQL</title>

   <itemizedlist>

    <listitem>
     <para>
      PL/pgSQL now throws an error if a variable name conflicts with a
      column name used in a query (Tom Lane)
     </para>

     <para>
      The former behavior was to bind ambiguous names to PL/pgSQL variables
      in preference to query columns, which often resulted in surprising
      misbehavior. Throwing an error allows easy detection of ambiguous
      situations.  Although it's recommended that functions encountering this
      type of error be modified to remove the conflict, the old behavior can
      be restored if necessary via the configuration parameter <link
      linkend="plpgsql-var-subst"><varname>plpgsql.variable_conflict</varname></link>,
      or via the per-function option <literal>#variable_conflict</literal>.
     </para>
    </listitem>

    <listitem>
     <para>
      PL/pgSQL no longer allows variable names that match certain SQL
      reserved words (Tom Lane)
     </para>

     <para>
      This is a consequence of aligning the PL/pgSQL parser to match the
      core SQL parser more closely.  If necessary,
      variable names can be double-quoted to avoid this restriction.
     </para>
    </listitem>

    <listitem>
     <para>
      PL/pgSQL now requires columns of composite results to match the
      expected type modifier as well as base type (Pavel Stehule, Tom Lane)
     </para>

     <para>
      For example, if a column of the result type is declared as
      <literal>NUMERIC(30,2)</literal>, it is no longer acceptable to return a
      <literal>NUMERIC</literal> of some other precision in that column.  Previous
      versions neglected to check the type modifier and would thus allow
      result rows that didn't actually conform to the declared restrictions.
     </para>
    </listitem>

    <listitem>
     <para>
      Remove PL/pgSQL's <literal>RENAME</literal> declaration (Tom Lane)
     </para>

     <para>
      Instead of <literal>RENAME</literal>, use <link
      linkend="plpgsql-declaration-alias"><literal>ALIAS</literal></link>,
      which can now create an alias for any variable, not only dollar sign
      parameter names (such as <literal>$1</literal>) as before.
     </para>
    </listitem>
   </itemizedlist>

  </sect3>

  <sect3>
   <title>Other Incompatibilities</title>

   <itemizedlist>

    <listitem>
     <para>
      Deprecate use of <literal>=&gt;</literal> as an operator name (Robert Haas)
     </para>

     <para>
      Future versions of <productname>PostgreSQL</productname> will probably reject
      this operator name entirely, in order to support the SQL-standard
      notation for named function parameters.  For the moment, it is
      still allowed, but a warning is emitted when such an operator is
      defined.
     </para>
    </listitem>

    <listitem>
     <para>
      Remove support for platforms that don't have a working 64-bit
      integer data type (Tom Lane)
     </para>

     <para>
      It is believed all still-supported platforms have working 64-bit
      integer data types.
     </para>
    </listitem>

   </itemizedlist>
  </sect3>
 </sect2>

 <sect2>
  <title>Changes</title>
   <para>
    Version 9.0 has an unprecedented number of new major features,
    and over 200 enhancements, improvements, new commands,
    new functions, and other changes.
   </para>

  <sect3>
   <title>Server</title>

   <sect4>
    <title>Continuous Archiving and Streaming Replication</title>

    <para>
     PostgreSQL's existing standby-server capability has been expanded both to
     support read-only queries on standby servers and to greatly reduce
     the lag between master and standby servers.  For many users, this
     will be a useful and low-administration form of replication, either
     for high availability or for horizontal scalability.
    </para>

    <itemizedlist>
     <listitem>
      <para>
       Allow a standby server to accept read-only queries
       (Simon Riggs, Heikki Linnakangas)
      </para>

      <para>
       This feature is called Hot Standby. There are new
       <filename>postgresql.conf</filename> and <filename>recovery.conf</filename>
       settings to control this feature, as well as extensive
       <link linkend="hot-standby">documentation</link>.
      </para>
     </listitem>

     <listitem>
      <para>
       Allow write-ahead log (<acronym>WAL</acronym>) data to be streamed to a
       standby server (Fujii Masao, Heikki Linnakangas)
      </para>

      <para>
       This feature is called Streaming Replication.
       Previously <acronym>WAL</acronym> data could be sent to standby servers only
       in units of entire <acronym>WAL</acronym> files (normally 16 megabytes each).
       Streaming Replication eliminates this inefficiency and allows updates
       on the master to be propagated to standby servers with very little
       delay.  There are new <filename>postgresql.conf</filename> and
       <filename>recovery.conf</filename> settings to control this feature, as well as
       extensive <link linkend="streaming-replication">documentation</link>.
      </para>
     </listitem>

     <listitem>
      <para>
       Add <link
       linkend="functions-recovery-info-table"><function>pg_last_xlog_receive_location()</function></link>
       and <function>pg_last_xlog_replay_location()</function>, which
       can be used to monitor standby server <acronym>WAL</acronym>
       activity (Simon Riggs, Fujii Masao, Heikki Linnakangas)
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Performance</title>

    <itemizedlist>

     <listitem>
      <para>
       Allow per-tablespace values to be set for sequential and random page
       cost estimates (<varname>seq_page_cost</varname>/<varname>random_page_cost</varname>)
       via <link linkend="sql-altertablespace"><command>ALTER TABLESPACE
       ... SET/RESET</command></link> (Robert Haas)
      </para>
     </listitem>

     <listitem>
      <para>
       Improve performance and reliability of EvalPlanQual rechecks in join
       queries (Tom Lane)
      </para>

      <para>
       <command>UPDATE</command>, <command>DELETE</command>, and <command>SELECT FOR
       UPDATE/SHARE</command> queries that involve joins will now behave much better
       when encountering freshly-updated rows.
      </para>
     </listitem>

     <listitem>
      <para>
       Improve performance of <link
       linkend="sql-truncate"><command>TRUNCATE</command></link> when
       the table was created or truncated earlier in the same transaction
       (Tom Lane)
      </para>
     </listitem>

     <listitem>
      <para>
       Improve performance of finding inheritance child tables (Tom Lane)
      </para>
     </listitem>

     </itemizedlist>

   </sect4>

   <sect4>
    <title>Optimizer</title>

    <itemizedlist>

     <listitem>
      <para>
       Remove unnecessary <link linkend="queries-join">outer
       joins</link> (Robert Haas)
      </para>

      <para>
       Outer joins where the inner side is unique and not referenced above
       the join are unnecessary and are therefore now removed.  This will
       accelerate many automatically generated queries, such as those created
       by object-relational mappers (ORMs).
      </para>
     </listitem>

     <listitem>
      <para>
       Allow <literal>IS NOT NULL</literal> restrictions to use indexes (Tom Lane)
      </para>

      <para>
       This is particularly useful for finding
       <function>MAX()</function>/<function>MIN()</function> values in indexes that
       contain many null values.
      </para>
     </listitem>

     <listitem>
      <para>
       Improve the optimizer's choices about when to use materialize nodes,
       and when to use sorting versus hashing for <literal>DISTINCT</literal>
       (Tom Lane)
      </para>
     </listitem>

     <listitem>
      <para>
       Improve the optimizer's equivalence detection for expressions involving
       <type>boolean</type> <literal>&lt;&gt;</literal> operators (Tom Lane)
      </para>
     </listitem>
    </itemizedlist>
   </sect4>

   <sect4>
    <title><link linkend="geqo">GEQO</link></title>

    <itemizedlist>

     <listitem>
      <para>
       Use the same random seed every time GEQO plans a query (Andres
       Freund)
      </para>

      <para>
       While the Genetic Query Optimizer (GEQO) still selects
       random plans, it now always selects the same random plans for identical
       queries, thus giving more consistent performance. You can modify <link
       linkend="guc-geqo-seed"><varname>geqo_seed</varname></link> to experiment with
       alternative plans.
      </para>
     </listitem>

     <listitem>
      <para>
       Improve GEQO plan selection (Tom Lane)
      </para>

      <para>
       This avoids the rare error <quote>failed to make a valid plan</quote>,
       and should also improve planning speed.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Optimizer Statistics</title>

    <itemizedlist>

     <listitem>
      <para>
       Improve <link linkend="sql-analyze"><command>ANALYZE</command></link>
       to support inheritance-tree statistics (Tom Lane)
      </para>

      <para>
       This is particularly useful for partitioned tables.  However,
       autovacuum does not yet automatically re-analyze parent tables
       when child tables change.
      </para>
     </listitem>

     <listitem>
      <para>
       Improve <link linkend="routine-vacuuming">autovacuum</link>'s
       detection of when re-analyze is necessary (Tom Lane)
      </para>
     </listitem>

     <listitem>
      <para>
       Improve optimizer's estimation for greater/less-than comparisons
       (Tom Lane)
      </para>

      <para>
       When looking up statistics for greater/less-than comparisons,
       if the comparison value is in the first or last histogram bucket,
       use an index (if available) to fetch the current actual column
       minimum or maximum.  This greatly improves the accuracy of estimates
       for comparison values near the ends of the data range, particularly
       if the range is constantly changing due to addition of new data.
      </para>
     </listitem>

     <listitem>
      <para>
       Allow setting of distinct statistics using <link
       linkend="sql-altertable"><command>ALTER TABLE</command></link>
       (Robert Haas)
      </para>

      <para>
       This allows users to override the estimated number or percentage of
       distinct values for a column. This statistic is normally computed by
       <command>ANALYZE</command>, but the estimate can be poor, especially on tables
       with very large numbers of rows.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Authentication</title>

    <itemizedlist>

     <listitem>
      <para>
       Add support for <link
       linkend="auth-radius"><acronym>RADIUS</acronym></link> (Remote
       Authentication Dial In User Service) authentication
       (Magnus Hagander)
      </para>
     </listitem>

     <listitem>
      <para>
       Allow <link linkend="auth-ldap"><acronym>LDAP</acronym></link>
       (Lightweight Directory Access Protocol) authentication
       to operate in <quote>search/bind</quote> mode
       (Robert Fleming, Magnus Hagander)
      </para>

      <para>
       This allows the user to be looked up first, then the system uses
       the <acronym>DN</acronym> (Distinguished Name) returned for that user.
      </para>
     </listitem>

     <listitem>
      <para>
       Add <link
       linkend="auth-pg-hba-conf"><literal>samehost</literal></link>
       and <literal>samenet</literal> designations to
       <filename>pg_hba.conf</filename> (Stef Walter)
      </para>

      <para>
       These match the server's <acronym>IP</acronym> address and subnet address
       respectively.
      </para>
     </listitem>

     <listitem>
      <para>
       Pass trusted SSL root certificate names to the client so the client
       can return an appropriate client certificate (Craig Ringer)
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Monitoring</title>

    <itemizedlist>

     <listitem>
      <para>
       Add the ability for clients to set an <link
       linkend="libpq-connect-application-name">application
       name</link>, which is displayed in
       <structname>pg_stat_activity</structname> (Dave Page)
      </para>

      <para>
       This allows administrators to characterize database traffic
       and troubleshoot problems by source application.
      </para>
     </listitem>

     <listitem>
      <para>
       Add a SQLSTATE option (<literal>%e</literal>) to <link
       linkend="guc-log-line-prefix"><varname>log_line_prefix</varname></link>
       (Guillaume Smet)
      </para>

      <para>
       This allows users to compile statistics on errors and messages
       by error code number.
      </para>

     </listitem>

     <listitem>
      <para>
       Write to the Windows event log in <acronym>UTF16</acronym> encoding
       (Itagaki Takahiro)
      </para>

      <para>
       Now there is true multilingual support for PostgreSQL log messages
       on Windows.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Statistics Counters</title>

    <itemizedlist>

     <listitem>
      <para>
       Add <link
       linkend="monitoring-stats-funcs-table"><function>pg_stat_reset_shared('bgwriter')</function></link>
       to reset the cluster-wide shared statistics for the
       background writer (Greg Smith)
      </para>
     </listitem>

     <listitem>
      <para>
       Add <link
       linkend="monitoring-stats-funcs-table"><function>pg_stat_reset_single_table_counters()</function></link>
       and <function>pg_stat_reset_single_function_counters()</function>
       to allow resetting the statistics counters for individual
       tables and indexes (Magnus Hagander)
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Server Settings</title>

    <itemizedlist>

     <listitem>
      <para>
       Allow setting of configuration parameters based on <link
       linkend="sql-alterrole">database/role combinations</link>
       (Alvaro Herrera)
      </para>

      <para>
       Previously only per-database and per-role settings were possible,
       not combinations. All role and database settings are now stored
       in the new <structname>pg_db_role_setting</structname> system table. A new
       <application>psql</application> command <literal>\drds</literal> shows these settings.
       The legacy system views <structname>pg_roles</structname>,
       <structname>pg_shadow</structname>, and <structname>pg_user</structname>
       do not show combination settings, and therefore no longer
       completely represent the configuration for a user or database.
      </para>
     </listitem>

     <listitem>
      <para>
       Add server parameter <link
       linkend="guc-bonjour"><varname>bonjour</varname></link>, which
       controls whether a Bonjour-enabled server advertises
       itself via <productname>Bonjour</productname> (Tom Lane)
      </para>

      <para>
       The default is off, meaning it does not advertise.  This allows
       packagers to distribute Bonjour-enabled builds without worrying
       that individual users might not want the feature.
      </para>
     </listitem>

     <listitem>
      <para>
       Add server parameter <link
       linkend="guc-enable-material"><varname>enable_material</varname></link>, which
       controls the use of materialize nodes in the optimizer
       (Robert Haas)
      </para>

      <para>
       The default is on.  When off, the optimizer will not add
       materialize nodes purely for performance reasons, though they
       will still be used when necessary for correctness.
      </para>
     </listitem>

     <listitem>
      <para>
       Change server parameter <link
       linkend="guc-log-temp-files"><varname>log_temp_files</varname></link> to
       use default file size units of kilobytes (Robert Haas)
      </para>

      <para>
       Previously this setting was interpreted in bytes if no units were
       specified.
      </para>
     </listitem>

     <listitem>
      <para>
       Log changes of parameter values when <filename>postgresql.conf</filename> is
       reloaded (Peter Eisentraut)
      </para>

      <para>
       This lets administrators and security staff audit changes of database
       settings, and is also very convenient for checking the effects of
       <filename>postgresql.conf</filename> edits.
      </para>
     </listitem>

     <listitem>
      <para>
       Properly enforce superuser permissions for custom server parameters
       (Tom Lane)
      </para>

      <para>
       Non-superusers can no longer issue <command>ALTER
       ROLE</command>/<command>DATABASE SET</command> for parameters that are not currently
       known to the server.  This allows the server to correctly check that
       superuser-only parameters are only set by superusers.  Previously,
       the <literal>SET</literal> would be allowed and then ignored at session start,
       making superuser-only custom parameters practically useless.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

  </sect3>

  <sect3>
   <title>Queries</title>

   <itemizedlist>

    <listitem>
     <para>
      Perform <link linkend="sql-for-update-share"><command>SELECT
      FOR UPDATE</command>/<literal>SHARE</literal></link> processing after
      applying <literal>LIMIT</literal>, so the number of rows returned
      is always predictable (Tom Lane)
     </para>

     <para>
      Previously, changes made by concurrent transactions could cause a
      <command>SELECT FOR UPDATE</command> to unexpectedly return fewer rows than
      specified by its <literal>LIMIT</literal>. <literal>FOR UPDATE</literal> in combination
      with <literal>ORDER BY</literal> can still produce surprising results, but that
      can be corrected by placing <literal>FOR UPDATE</literal> in a subquery.
     </para>
    </listitem>

    <listitem>
     <para>
      Allow mixing of traditional and SQL-standard <link
      linkend="sql-limit"><literal>LIMIT</literal>/<literal>OFFSET</literal></link>
      syntax (Tom Lane)
     </para>
    </listitem>

    <listitem>
     <para>
      Extend the supported frame options in <link
      linkend="sql-window">window functions</link> (Hitoshi
      Harada)
     </para>

     <para>
      Frames can now start with <literal>CURRENT ROW</literal>, and the <literal>ROWS
      <replaceable>n</replaceable> PRECEDING</literal>/<literal>FOLLOWING</literal> options are now
      supported.
     </para>
    </listitem>

    <listitem>
     <para>
      Make <command>SELECT INTO</command> and <command>CREATE TABLE AS</command> return
      row counts to the client in their command tags
      (Boszormenyi Zoltan)
     </para>

     <para>
      This can save an entire round-trip to the client, allowing result counts
      and pagination to be calculated without an additional
      <command>COUNT</command> query.
     </para>
    </listitem>

   </itemizedlist>

   <sect4>
    <title>Unicode Strings</title>

    <itemizedlist>

     <listitem>
      <para>
       Add Unicode surrogate pair (dual 16-bit) support to
       <link
       linkend="sql-syntax-strings-uescape"><literal>U&amp;</literal></link>
       strings and identifiers (Peter Eisentraut)
      </para>
     </listitem>

     <listitem>
      <para>
       Support Unicode escapes in <link
       linkend="sql-syntax-strings-escape"><literal>E'...'</literal></link>
       strings (Marko Kreen)
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

  </sect3>

  <sect3>
   <title>Object Manipulation</title>

   <itemizedlist>

    <listitem>
     <para>
      Speed up <link linkend="sql-createdatabase"><command>CREATE
      DATABASE</command></link> by deferring flushes to disk (Andres
      Freund, Greg Stark)
     </para>
    </listitem>

    <listitem>
     <para>
      Allow <link linkend="sql-comment">comments</link> on
      columns of tables, views, and composite types only, not other
      relation types such as indexes and <acronym>TOAST</acronym> tables (Tom Lane)
     </para>
    </listitem>

    <listitem>
     <para>
      Allow the creation of <link
      linkend="sql-createtype-enum">enumerated types</link> containing
      no values (Bruce Momjian)
     </para>
    </listitem>

    <listitem>
     <para>
      Let values of columns having storage type <literal>MAIN</literal> remain on
      the main heap page unless the row cannot fit on a page (Kevin Grittner)
     </para>

     <para>
      Previously <literal>MAIN</literal> values were forced out to <acronym>TOAST</acronym>
      tables until the row size was less than one-quarter of the page size.
     </para>
    </listitem>

   </itemizedlist>

   <sect4>
    <title><command>ALTER TABLE</command></title>

    <itemizedlist>

     <listitem>
      <para>
       Implement <literal>IF EXISTS</literal> for <literal>ALTER TABLE DROP COLUMN</literal>
       and <literal>ALTER TABLE DROP CONSTRAINT </literal> (Andres Freund)
      </para>
     </listitem>

     <listitem>
      <para>
       Allow <command>ALTER TABLE</command> commands that rewrite tables to skip
       <acronym>WAL</acronym> logging (Itagaki Takahiro)
      </para>

      <para>
       Such operations either produce a new copy of the table or are rolled
       back, so <acronym>WAL</acronym> archiving can be skipped, unless running in
       continuous archiving mode.  This reduces I/O overhead and improves
       performance.
      </para>
     </listitem>

     <listitem>
      <para>
       Fix failure of <literal>ALTER TABLE <replaceable>table</replaceable> ADD COLUMN
       <replaceable>col</replaceable> serial</literal> when done by non-owner of table
       (Tom Lane)
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title><link linkend="sql-createtable"><command>CREATE TABLE</command></link></title>

    <itemizedlist>

     <listitem>
      <para>
       Add support for copying <literal>COMMENTS</literal> and <literal>STORAGE</literal>
       settings in <command>CREATE TABLE ... LIKE</command> commands
       (Itagaki Takahiro)
      </para>
     </listitem>

     <listitem>
      <para>
       Add support for copying all attributes in <command>CREATE
       TABLE ... LIKE</command> commands (Itagaki Takahiro)
      </para>
     </listitem>

     <listitem>
      <para>
       Add the SQL-standard
       <literal>CREATE TABLE ... OF <replaceable>type</replaceable></literal> command
       (Peter Eisentraut)
      </para>

      <para>
       This allows creation of a table that matches an existing composite
       type. Additional constraints and defaults can be specified in the
       command.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Constraints</title>

    <itemizedlist>

     <listitem>
      <para>
       Add <link linkend="sql-createtable-compatibility">deferrable
       unique constraints</link> (Dean Rasheed)
      </para>

      <para>
       This allows mass updates, such as
       <literal>UPDATE tab SET col = col + 1</literal>,
       to work reliably
       on columns that have unique indexes or are marked as primary keys.
       If the constraint is specified as <literal>DEFERRABLE</literal> it will be
       checked at the end of the statement, rather than after each row is
       updated. The constraint check can also be deferred until the end of the
       current transaction, allowing such updates to be spread over multiple
       SQL commands.
      </para>
     </listitem>

     <listitem>
      <para>
       Add
       <link linkend="ddl-constraints-exclusion">exclusion constraints</link>
       (Jeff Davis)
      </para>

      <para>
       Exclusion constraints generalize uniqueness constraints by allowing
       arbitrary comparison operators, not just equality.  They are created
       with the <link linkend="sql-createtable-exclude"><command>CREATE
       TABLE CONSTRAINT ... EXCLUDE</command></link> clause.
       The most common use of exclusion constraints is to specify that column
       entries must not overlap, rather than simply not be equal.  This is
       useful for time periods and other ranges, as well as arrays.
       This feature enhances checking of data integrity for many
       calendaring, time-management, and scientific applications.
      </para>
     </listitem>

     <listitem>
      <para>
       Improve uniqueness-constraint violation error messages to
       report the values causing the failure (Itagaki Takahiro)
      </para>

      <para>
       For example, a uniqueness constraint violation might now report
       <literal>Key (x)=(2) already exists</literal>.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Object Permissions</title>

    <itemizedlist>

     <listitem>
      <para>
       Add the ability to make mass permission changes across a whole
       schema using the new <link
       linkend="sql-grant"><command>GRANT</command>/<command>REVOKE
       IN SCHEMA</command></link> clause (Petr Jelinek)
      </para>

      <para>
       This simplifies management of object permissions
       and makes it easier to utilize database roles for application
       data security.
      </para>
     </listitem>

     <listitem>
      <para>
       Add <link linkend="sql-alterdefaultprivileges"><command>ALTER
       DEFAULT PRIVILEGES</command></link> command to control privileges
       of objects created later (Petr Jelinek)
      </para>

      <para>
       This greatly simplifies the assignment of object privileges in a
       complex database application.  Default privileges can be set for
       tables, views, sequences, and functions. Defaults may be assigned on a
       per-schema basis, or database-wide.
      </para>
     </listitem>

     <listitem>
      <para>
       Add the ability to control large object (BLOB) permissions with
       <command>GRANT</command>/<command>REVOKE</command> (KaiGai Kohei)
      </para>

      <para>
       Formerly, any database user could read or modify any large object.
       Read and write permissions can now be granted and revoked per
       large object, and the ownership of large objects is tracked.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

  </sect3>

  <sect3>
   <title>Utility Operations</title>

   <itemizedlist>

    <listitem>
     <para>
      Make <link linkend="sql-listen"><command>LISTEN</command></link>/<link
      linkend="sql-notify"><command>NOTIFY</command></link> store pending events
      in a memory queue, rather than in a system table (Joachim
      Wieland)
     </para>

     <para>
      This substantially improves performance, while retaining the existing
      features of transactional support and guaranteed delivery.
     </para>
    </listitem>

    <listitem>
     <para>
      Allow <link linkend="sql-notify"><command>NOTIFY</command></link>
      to pass an optional <quote>payload</quote> string to listeners
      (Joachim Wieland)
     </para>

     <para>
      This greatly improves the usefulness of
      <command>LISTEN</command>/<command>NOTIFY</command> as a
      general-purpose event queue system.
     </para>
    </listitem>

    <listitem>
     <para>
      Allow <link linkend="sql-cluster"><command>CLUSTER</command></link>
      on all per-database system catalogs (Tom Lane)
     </para>

     <para>
      Shared catalogs still cannot be clustered.
     </para>
    </listitem>

   </itemizedlist>

   <sect4>
    <title><link linkend="sql-copy"><command>COPY</command></link></title>

    <itemizedlist>

     <listitem>
      <para>
       Accept <literal>COPY ... CSV FORCE QUOTE *</literal>
       (Itagaki Takahiro)
      </para>

      <para>
       Now <literal>*</literal> can be used as shorthand for <quote>all columns</quote>
       in the <literal>FORCE QUOTE</literal> clause.
      </para>
     </listitem>

     <listitem>
      <para>
       Add new <command>COPY</command> syntax that allows options to be
       specified inside parentheses (Robert Haas, Emmanuel Cecchet)
      </para>

      <para>
       This allows greater flexibility for future <command>COPY</command> options.
       The old syntax is still supported, but only for pre-existing options.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title><link linkend="sql-explain"><command>EXPLAIN</command></link></title>

    <itemizedlist>

     <listitem>
      <para>
       Allow <command>EXPLAIN</command> to output in <acronym>XML</acronym>,
       <acronym>JSON</acronym>, or <acronym>YAML</acronym> format (Robert Haas, Greg
       Sabino Mullane)
      </para>

      <para>
       The new output formats are easily machine-readable, supporting the
       development of new tools for analysis of <command>EXPLAIN</command> output.
      </para>
     </listitem>

     <listitem>
      <para>
       Add new <literal>BUFFERS</literal> option to report query
       buffer usage during <command>EXPLAIN ANALYZE</command> (Itagaki Takahiro)
      </para>

      <para>
       This allows better query profiling for individual queries.
       Buffer usage is no longer reported in the output for <link
       linkend="runtime-config-statistics-monitor">log_statement_stats</link>
       and related settings.
      </para>
     </listitem>

     <listitem>
      <para>
       Add hash usage information to <command>EXPLAIN</command> output (Robert
       Haas)
      </para>
     </listitem>

     <listitem>
      <para>
       Add new <command>EXPLAIN</command> syntax that allows options to be
       specified inside parentheses (Robert Haas)
      </para>

      <para>
       This allows greater flexibility for future <command>EXPLAIN</command> options.
       The old syntax is still supported, but only for pre-existing options.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title><link linkend="sql-vacuum"><command>VACUUM</command></link></title>

    <itemizedlist>

     <listitem>
      <para>
       Change <command>VACUUM FULL</command> to rewrite the entire table and
       rebuild its indexes, rather than moving individual rows around to
       compact space (Itagaki Takahiro, Tom Lane)
      </para>

      <para>
       The previous method was usually slower and caused index bloat.
       Note that the new method will use more disk space transiently
       during <command>VACUUM FULL</command>; potentially as much as twice
       the space normally occupied by the table and its indexes.
      </para>

     </listitem>

     <listitem>
      <para>
       Add new <command>VACUUM</command> syntax that allows options to be
       specified inside parentheses (Itagaki Takahiro)
      </para>

      <para>
       This allows greater flexibility for future <command>VACUUM</command> options.
       The old syntax is still supported, but only for pre-existing options.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Indexes</title>

    <itemizedlist>

     <listitem>
      <para>
       Allow an index to be named automatically by omitting the index name in
       <link linkend="sql-createindex"><command>CREATE INDEX</command></link>
       (Tom Lane)
      </para>
     </listitem>

     <listitem>
      <para>
       By default, multicolumn indexes are now named after all their columns;
       and index expression columns are now named based on their expressions
       (Tom Lane)
      </para>
     </listitem>

     <listitem>
      <para>
       Reindexing shared system catalogs is now fully transactional
       and crash-safe (Tom Lane)
      </para>

      <para>
       Formerly, reindexing a shared index was only allowed in standalone
       mode, and a crash during the operation could leave the index in
       worse condition than it was before.
      </para>
     </listitem>

     <listitem>
      <para>
       Add <literal>point_ops</literal> operator class for <acronym>gist</acronym>
      (Teodor Sigaev)
      </para>

      <para>
       This feature permits <acronym>gist</acronym> indexing of <type>point</type>
       columns.  The index can be used for several types of queries
       such as <replaceable>point</replaceable> <literal>&lt;@</literal> <replaceable>polygon</replaceable>
       (point is in polygon).  This should make many
       <productname>PostGIS</productname> queries faster.
      </para>
     </listitem>

     <listitem>
      <para>
       Use red-black binary trees for <acronym>gin</acronym> index creation
       (Teodor Sigaev)
      </para>

      <para>
       Red-black trees are self-balancing.  This avoids slowdowns in
       cases where the input is in nonrandom order.
      </para>

     </listitem>

    </itemizedlist>

   </sect4>

  </sect3>

  <sect3>
   <title>Data Types</title>

   <itemizedlist>

    <listitem>
     <para>
      Allow <link linkend="datatype-binary"><type>bytea</type></link> values
      to be written in hex notation (Peter Eisentraut)
     </para>

     <para>
      The server parameter <link
      linkend="guc-bytea-output"><varname>bytea_output</varname></link> controls
      whether hex or traditional format is used for <type>bytea</type>
      output.  Libpq's <function>PQescapeByteaConn()</function> function automatically
      uses the hex format when connected to <productname>PostgreSQL</productname> 9.0
      or newer servers.
     </para>

     <para>
      The new hex format will be directly compatible with more applications
      that use binary data, allowing them to store and retrieve it without
      extra conversion.  It is also significantly faster to read and write
      than the traditional format.
     </para>
    </listitem>

    <listitem>
     <para>
      Allow server parameter <link
      linkend="guc-extra-float-digits">extra_float_digits</link>
      to be increased to <literal>3</literal> (Tom Lane)
     </para>

     <para>
      The previous maximum <varname>extra_float_digits</varname> setting was
      <literal>2</literal>.  There are cases where 3 digits are needed to dump and
      restore <type>float4</type> values exactly.  <application>pg_dump</application> will
      now use the setting of 3 when dumping from a server that allows it.
     </para>
    </listitem>

    <listitem>
     <para>
      Tighten input checking for <type>int2vector</type> values (Caleb
      Welton)
     </para>
    </listitem>

   </itemizedlist>

   <sect4>
    <title><link linkend="textsearch">Full Text Search</link></title>

    <itemizedlist>

     <listitem>
      <para>
       Add prefix support in <literal>synonym</literal> dictionaries
       (Teodor Sigaev)
      </para>
     </listitem>

     <listitem>
      <para>
       Add <firstterm>filtering</firstterm> dictionaries (Teodor Sigaev)
      </para>

      <para>
       Filtering dictionaries allow tokens to be modified then passed to
       subsequent dictionaries.
      </para>
     </listitem>

     <listitem>
      <para>
       Allow underscores in email-address tokens (Teodor Sigaev)
      </para>
     </listitem>

     <listitem>
      <para>
       Use more standards-compliant rules for parsing <acronym>URL</acronym> tokens
       (Tom Lane)
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

  </sect3>

  <sect3>
   <title>Functions</title>

   <itemizedlist>

    <listitem>
     <para>
      Support locale-specific <link
      linkend="functions-posix-regexp">regular expression</link>
      processing with <acronym>UTF-8</acronym> server encoding (Tom Lane)
     </para>

     <para>
      Locale-specific regular expression functionality includes
      case-insensitive matching and locale-specific character classes.
      Previously, these features only worked correctly for
      non-<acronym>ASCII</acronym> characters when using a single-byte server
      encoding (such as LATIN1).  They will still misbehave in multi-byte
      encodings other than <acronym>UTF-8</acronym>.
     </para>
    </listitem>

    <listitem>
     <para>
      Allow function calls to supply parameter names and match them to named
      parameters in the function definition (Pavel Stehule)
     </para>

     <para>
      For example, if a function is defined to take parameters <literal>a</literal>
      and <literal>b</literal>, it can be called with <literal>func(a := 7, b
      := 12)</literal> or <literal>func(b := 12, a := 7)</literal>.
     </para>
    </listitem>

    <listitem>
     <para>
      Add support for scientific notation in <link
      linkend="functions-formatting"><function>to_char()</function></link>
      (<link linkend="functions-formatting-numeric-table"><literal>EEEE</literal>
      specification</link>)
      (Pavel Stehule, Brendan Jurd)
     </para>
    </listitem>

    <listitem>
     <para>
      Make <function>to_char()</function> honor <link
      linkend="functions-formatting-datetimemod-table"><literal>FM</literal></link>
      (fill mode) in <literal>Y</literal>, <literal>YY</literal>, and
      <literal>YYY</literal> specifications (Bruce Momjian, Tom Lane)
     </para>

     <para>
      It was already honored by <literal>YYYY</literal>.
     </para>
    </listitem>

    <listitem>
     <para>
      Fix <function>to_char()</function> to output localized numeric and monetary
      strings in the correct encoding on <productname>Windows</productname>
      (Hiroshi Inoue, Itagaki Takahiro, Bruce Momjian)
     </para>
    </listitem>

    <listitem>
     <para>
      Correct calculations of <link
      linkend="functions-geometry-op-table"><quote>overlaps</quote></link>
      and <quote>contains</quote> operations for polygons (Teodor Sigaev)
     </para>

     <para>
      The polygon <literal>&amp;&amp;</literal> (overlaps) operator formerly just
      checked to see if the two polygons' bounding boxes overlapped.  It now
      does a more correct check.  The polygon <literal>@&gt;</literal> and
      <literal>&lt;@</literal> (contains/contained by) operators formerly checked
      to see if one polygon's vertexes were all contained in the other;
      this can wrongly report <quote>true</quote> for some non-convex polygons.
      Now they check that all line segments of one polygon are contained in
      the other.
     </para>
    </listitem>

   </itemizedlist>

   <sect4>
    <title>Aggregates</title>

    <itemizedlist>

     <listitem>
      <para>
       Allow aggregate functions to use <link
       linkend="syntax-aggregates"><literal>ORDER BY</literal></link> (Andrew Gierth)
      </para>

      <para>
       For example, this is now supported: <literal>array_agg(a ORDER BY
       b)</literal>.  This is useful with aggregates for which the order of input
       values is significant, and eliminates the need to use a nonstandard
       subquery to determine the ordering.
      </para>
     </listitem>

     <listitem>
      <para>
       Multi-argument aggregate functions can now use <literal>DISTINCT</literal>
       (Andrew Gierth)
      </para>
     </listitem>

     <listitem>
      <para>
       Add the <link
       linkend="functions-aggregate-table"><function>string_agg()</function></link>
       aggregate function to combine values into a single
       string (Pavel Stehule)
      </para>
     </listitem>

     <listitem>
      <para>
       Aggregate functions that are called with <literal>DISTINCT</literal> are
       now passed NULL values if the aggregate transition function is
       not marked as <literal>STRICT</literal> (Andrew Gierth)
      </para>

      <para>
       For example, <literal>agg(DISTINCT x)</literal> might pass a NULL <literal>x</literal>
       value to <function>agg()</function>.  This is more consistent with the behavior
       in non-<literal>DISTINCT</literal> cases.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Bit Strings</title>

    <itemizedlist>

     <listitem>
      <para>
       Add <link
       linkend="functions-binarystring-other"><function>get_bit()</function></link>
       and <function>set_bit()</function> functions for <type>bit</type>
       strings, mirroring those for <type>bytea</type> (Leonardo
       F)
      </para>
     </listitem>

     <listitem>
      <para>
       Implement <link
       linkend="functions-string-sql"><function>OVERLAY()</function></link>
       (replace) for <type>bit</type> strings and <type>bytea</type>
       (Leonardo F)
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Object Information Functions</title>

    <itemizedlist>

     <listitem>
      <para>
       Add <link
       linkend="functions-admin-dbsize"><function>pg_table_size()</function></link>
       and <function>pg_indexes_size()</function> to provide a more
       user-friendly interface to the <function>pg_relation_size()</function>
       function (Bernd Helmle)
      </para>
     </listitem>

     <listitem>
      <para>
       Add <link
       linkend="functions-info-access-table"><function>has_sequence_privilege()</function></link>
       for sequence permission checking (Abhijit Menon-Sen)
      </para>
     </listitem>

     <listitem>
      <para>
       Update the <link linkend="information-schema">information_schema</link>
       views to conform to SQL:2008
       (Peter Eisentraut)
      </para>
     </listitem>

     <listitem>
      <para>
       Make the <literal>information_schema</literal> views correctly display maximum
       octet lengths for <type>char</type> and <type>varchar</type> columns (Peter
       Eisentraut)
      </para>
     </listitem>

     <listitem>
      <para>
       Speed up <literal>information_schema</literal> privilege views
       (Joachim Wieland)
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Function and Trigger Creation</title>

    <itemizedlist>

     <listitem>
      <para>
       Support execution of anonymous code blocks using the <link
       linkend="sql-do"><command>DO</command></link> statement
       (Petr Jelinek, Joshua Tolley, Hannu Valtonen)
      </para>

      <para>
       This allows execution of server-side code without the need to create
       and delete a temporary function definition.  Code can be executed in
       any language for which the user has permissions to define a function.
      </para>
     </listitem>

     <listitem>
      <para>
       Implement SQL-standard-compliant <link
       linkend="sql-createtrigger">per-column triggers</link>
       (Itagaki Takahiro)
      </para>

      <para>
       Such triggers are fired only when the specified column(s) are affected
       by the query, e.g. appear in an <command>UPDATE</command>'s <literal>SET</literal>
       list.
      </para>
     </listitem>

     <listitem>
      <para>
       Add the <literal>WHEN</literal> clause to <link
       linkend="sql-createtrigger"><command>CREATE TRIGGER</command></link>
       to allow control over whether a trigger is fired (Itagaki
       Takahiro)
      </para>

      <para>
       While the same type of check can always be performed inside the
       trigger, doing it in an external <literal>WHEN</literal> clause can have
       performance benefits.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

  </sect3>

  <sect3>
   <title>Server-Side Languages</title>

   <itemizedlist>

    <listitem>
     <para>
      Add the <literal>OR REPLACE</literal> clause to <link
      linkend="sql-createlanguage"><command>CREATE LANGUAGE</command></link>
      (Tom Lane)
     </para>

     <para>
      This is helpful to optionally install a language if it does not
      already exist, and is particularly helpful now that PL/pgSQL is
      installed by default.
     </para>
    </listitem>

    </itemizedlist>

    <sect4>
    <title><link linkend="plpgsql">PL/PgSQL</link> Server-Side
    Language</title>

    <itemizedlist>

     <listitem>
      <para>
       Install PL/pgSQL by default (Bruce Momjian)
      </para>

      <para>
       The language can still be removed from a particular database if the
       administrator has security or performance concerns about making it
       available.
      </para>
     </listitem>

     <listitem>
      <para>
       Improve handling of cases where PL/pgSQL variable names conflict with
       identifiers used in queries within a function
       (Tom Lane)
      </para>

      <para>
       The default behavior is now to throw an error when there is a conflict,
       so as to avoid surprising behaviors.  This can be modified, via the
       configuration parameter <link
       linkend="plpgsql-var-subst"><varname>plpgsql.variable_conflict</varname></link>
       or the per-function option <literal>#variable_conflict</literal>, to allow
       either the variable or the query-supplied column to be used.  In any
       case PL/pgSQL will no longer attempt to substitute variables in places
       where they would not be syntactically valid.
      </para>
     </listitem>

     <listitem>
      <para>
       Make PL/pgSQL use the main lexer, rather than its own version
       (Tom Lane)
      </para>

      <para>
       This ensures accurate tracking of the main system's behavior for details
       such as string escaping.  Some user-visible details, such as the set
       of keywords considered reserved in PL/pgSQL, have changed in
       consequence.
      </para>
     </listitem>

     <listitem>
      <para>
       Avoid throwing an unnecessary error for an invalid record reference
       (Tom Lane)
      </para>

      <para>
       An error is now thrown only if the reference is actually fetched,
       rather than whenever the enclosing expression is reached.  For
       example, many people have tried to do this in triggers:
<programlisting>
if TG_OP = 'INSERT' AND NEW.col1 = ... then
</programlisting>
       This will now actually work as expected.
      </para>
     </listitem>

     <listitem>
      <para>
       Improve PL/pgSQL's ability to handle row types with dropped columns
       (Pavel Stehule)
      </para>
     </listitem>

     <listitem>
      <para>
       Allow input parameters to be assigned values within
       PL/pgSQL functions (Steve Prentice)
      </para>

      <para>
       Formerly, input parameters were treated as being declared
       <literal>CONST</literal>, so the function's code could not change their
       values.  This restriction has been removed to simplify
       porting of functions from other DBMSes that do not impose the
       equivalent restriction.  An input parameter now acts like a local
       variable initialized to the passed-in value.
      </para>
     </listitem>

     <listitem>
      <para>
       Improve error location reporting in PL/pgSQL (Tom Lane)
      </para>
     </listitem>

     <listitem>
      <para>
       Add <replaceable>count</replaceable> and <literal>ALL</literal> options to <command>MOVE
       FORWARD</command>/<literal>BACKWARD</literal> in PL/pgSQL (Pavel Stehule)
      </para>
     </listitem>

     <listitem>
      <para>
       Allow PL/pgSQL's <literal>WHERE CURRENT OF</literal> to use a cursor
       variable (Tom Lane)
      </para>
     </listitem>

     <listitem>
      <para>
       Allow PL/pgSQL's <command>OPEN <replaceable>cursor</replaceable> FOR EXECUTE</command> to
       use parameters (Pavel Stehule, Itagaki Takahiro)
      </para>

      <para>
       This is accomplished with a new <literal>USING</literal> clause.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title><link linkend="plperl">PL/Perl</link> Server-Side Language</title>

    <itemizedlist>

     <listitem>
      <para>
       Add new PL/Perl functions: <link
       linkend="plperl-utility-functions"><function>quote_literal()</function></link>,
       <function>quote_nullable()</function>, <function>quote_ident()</function>,
       <function>encode_bytea()</function>, <function>decode_bytea()</function>,
       <function>looks_like_number()</function>,
       <function>encode_array_literal()</function>,
       <function>encode_array_constructor()</function> (Tim Bunce)
      </para>
     </listitem>

     <listitem>
      <para>
       Add server parameter <link
       linkend="guc-plperl-on-init"><varname>plperl.on_init</varname></link> to
       specify a PL/Perl initialization function (Tim
       Bunce)
      </para>

      <para>
       <link
       linkend="guc-plperl-on-plperl-init"><varname>plperl.on_plperl_init</varname></link>
       and <link
       linkend="guc-plperl-on-plperl-init"><varname>plperl.on_plperlu_init</varname></link>
       are also available for initialization that is specific to the trusted
       or untrusted language respectively.
      </para>
     </listitem>

     <listitem>
      <para>
       Support <command>END</command> blocks in PL/Perl (Tim Bunce)
      </para>

      <para>
       <command>END</command> blocks do not currently allow database access.
      </para>
     </listitem>

     <listitem>
      <para>
       Allow <command>use strict</command> in PL/Perl (Tim Bunce)
      </para>

      <para>
       Perl <literal>strict</literal> checks can also be globally enabled with the
       new server parameter <link
       linkend="guc-plperl-use-strict"><varname>plperl.use_strict</varname></link>.
      </para>
     </listitem>

     <listitem>
      <para>
       Allow <command>require</command> in PL/Perl (Tim Bunce)
      </para>

      <para>
       This basically tests to see if the module is loaded, and if not,
       generates an error.  It will not allow loading of modules that
       the administrator has not preloaded via the initialization parameters.
      </para>
     </listitem>

     <listitem>
      <para>
       Allow <command>use feature</command> in PL/Perl if Perl version 5.10 or
       later is used (Tim Bunce)
      </para>
     </listitem>

     <listitem>
      <para>
       Verify that PL/Perl return values are valid in the server encoding
       (Andrew Dunstan)
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title><link linkend="plpython">PL/Python</link> Server-Side Language</title>

    <itemizedlist>

     <listitem>
      <para>
       Add Unicode support in PL/Python (Peter Eisentraut)
      </para>

      <para>
       Strings are automatically converted from/to the server encoding as
       necessary.
      </para>
     </listitem>

     <listitem>
      <para>
       Improve <type>bytea</type> support in PL/Python (Caleb Welton)
      </para>

      <para>
       <type>Bytea</type> values passed into PL/Python are now represented as
       binary, rather than the PostgreSQL <type>bytea</type> text format.
       <type>Bytea</type> values containing null bytes are now also output
       properly from PL/Python.  Passing of boolean, integer, and float
       values was also improved.
      </para>
     </listitem>

     <listitem>
      <para>
       Support <link linkend="plpython-arrays">arrays</link> as parameters and
       return values in PL/Python (Peter Eisentraut)
      </para>
     </listitem>

     <listitem>
      <para>
       Improve mapping of SQL domains to Python types (Peter Eisentraut)
      </para>
     </listitem>

     <listitem>
      <para>
       Add <application>Python</application> 3 support to PL/Python (Peter Eisentraut)
      </para>

      <para>
       The new server-side language is called <link
       linkend="plpython-python23"><literal>plpython3u</literal></link>.  This
       cannot be used in the same session with the
       <application>Python</application> 2 server-side language.
      </para>
     </listitem>

     <listitem>
      <para>
       Improve error location and exception reporting in PL/Python (Peter Eisentraut)
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

  </sect3>

  <sect3>
   <title>Client Applications</title>

   <itemizedlist>

    <listitem>
    <para>
     Add <link linkend="app-vacuumdb"><command>vacuumdb</command></link>
     <option>--analyze-only</option> option to analyze without vacuuming
     (Bruce Momjian)
     </para>
    </listitem>

   </itemizedlist>

   <sect4>
    <title><link linkend="app-psql"><application>psql</application></link></title>

    <itemizedlist>

     <listitem>
      <para>
       Add support for quoting/escaping the values of <application>psql</application>
       <link linkend="app-psql-variables">variables</link> as SQL strings or
       identifiers (Pavel Stehule, Robert Haas)
      </para>

      <para>
       For example, <literal>:'var'</literal> will produce the value of
       <literal>var</literal> quoted and properly escaped as a literal string, while
       <literal>:"var"</literal> will produce its value quoted and escaped as an
       identifier.
      </para>
     </listitem>

     <listitem>
      <para>
       Ignore a leading UTF-8-encoded Unicode byte-order marker in
       script files read by <application>psql</application> (Itagaki Takahiro)
      </para>

      <para>
       This is enabled when the client encoding is <acronym>UTF-8</acronym>.
       It improves compatibility with certain editors, mostly on Windows,
       that insist on inserting such markers.
      </para>
     </listitem>

     <listitem>
      <para>
       Fix <command>psql --file -</command> to properly honor <link
       linkend="R1-app-psql-3"><option>--single-transaction</option></link>
       (Bruce Momjian)
      </para>
     </listitem>

     <listitem>
      <para>
       Avoid overwriting of <application>psql</application>'s command-line history when
       two <application>psql</application> sessions are run concurrently (Tom Lane)
      </para>
     </listitem>

     <listitem>
      <para>
       Improve <application>psql</application>'s tab completion support (Itagaki
       Takahiro)
      </para>
     </listitem>

     <listitem>
      <para>
       Show <literal>\timing</literal> output when it is enabled, regardless of
       <quote>quiet</quote> mode (Peter Eisentraut)
      </para>
     </listitem>

    </itemizedlist>

    <sect5>
    <title><application>psql</application> Display</title>

     <itemizedlist>

      <listitem>
       <para>
        Improve display of wrapped columns in <application>psql</application> (Roger
        Leigh)
       </para>

       <para>
        This behavior is now the default.
        The previous formatting is available by using <command>\pset linestyle
        old-ascii</command>.
       </para>
      </listitem>

      <listitem>
       <para>
        Allow <application>psql</application> to use fancy Unicode line-drawing
        characters via <command>\pset linestyle unicode</command> (Roger Leigh)
       </para>
      </listitem>

     </itemizedlist>

    </sect5>

    <sect5>
     <title><application>psql</application> <link
     linkend="app-psql-meta-commands"><command>\d</command></link>
     Commands</title>

     <itemizedlist>

      <listitem>
       <para>
        Make <command>\d</command> show child tables that inherit from the specified
        parent (Damien Clochard)
       </para>

       <para>
        <command>\d</command> shows only the number of child tables, while
        <command>\d+</command> shows the names of all child tables.
       </para>
      </listitem>

      <listitem>
       <para>
        Show definitions of index columns in <command>\d index_name</command>
        (Khee Chin)
       </para>

       <para>
        The definition is useful for expression indexes.
       </para>
      </listitem>

      <listitem>
       <para>
        Show a view's defining query only in
        <command>\d+</command>, not in <command>\d</command> (Peter Eisentraut)
       </para>

       <para>
        Always including the query was deemed overly verbose.
       </para>
      </listitem>

     </itemizedlist>

    </sect5>
   </sect4>

   <sect4>
    <title><link linkend="app-pgdump"><application>pg_dump</application></link></title>

    <itemizedlist>

     <listitem>
      <para>
       Make <application>pg_dump</application>/<application>pg_restore</application>
       <link linkend="pg-dump-options"><option>--clean</option></link>
       also remove large objects (Itagaki Takahiro)
      </para>
     </listitem>

     <listitem>
      <para>
       Fix <application>pg_dump</application> to properly dump large objects when
       <literal>standard_conforming_strings</literal> is enabled (Tom Lane)
      </para>

      <para>
       The previous coding could fail when dumping to an archive file
       and then generating script output from <application>pg_restore</application>.
      </para>
     </listitem>

     <listitem>
      <para>
       <application>pg_restore</application> now emits large-object data in hex format
       when generating script output (Tom Lane)
      </para>

      <para>
       This could cause compatibility problems if the script is then
       loaded into a pre-9.0 server.  To work around that, restore
       directly to the server, instead.
      </para>
     </listitem>

     <listitem>
      <para>
       Allow <application>pg_dump</application> to dump comments attached to columns
       of composite types (Taro Minowa (Higepon))
      </para>
     </listitem>

     <listitem>
      <para>
       Make <application>pg_dump</application> <link
       linkend="pg-dump-options"><option>--verbose</option></link>
       output the <application>pg_dump</application> and server versions
       in text output mode (Jim Cox, Tom Lane)
      </para>

      <para>
       These were already provided in custom output mode.
      </para>
     </listitem>

     <listitem>
      <para>
       <application>pg_restore</application> now complains if any command-line arguments
       remain after the switches and optional file name (Tom Lane)
      </para>

      <para>
       Previously, it silently ignored any such arguments.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title><link
    linkend="app-pg-ctl"><application>pg_ctl</application></link></title>

    <itemizedlist>

     <listitem>
      <para>
       Allow <application>pg_ctl</application> to be used safely to start the
       <application>postmaster</application> during a system reboot (Tom Lane)
      </para>

      <para>
       Previously, <application>pg_ctl</application>'s parent process could have been
       mistakenly identified as a running <application>postmaster</application> based on
       a stale <application>postmaster</application> lock file, resulting in a transient
       failure to start the database.
      </para>
     </listitem>

     <listitem>
      <para>
       Give <application>pg_ctl</application> the ability to initialize the database
       (by invoking <application>initdb</application>) (Zdenek Kotala)
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

  </sect3>

  <sect3>
   <title><application>Development Tools</application></title>

   <sect4>
    <title><link linkend="libpq"><application>libpq</application></link></title>

    <itemizedlist>

     <listitem>
      <para>
       Add new <application>libpq</application> functions
       <link
       linkend="libpq-connect"><function>PQconnectdbParams()</function></link>
       and <function>PQconnectStartParams()</function> (Guillaume
       Lelarge)
      </para>

      <para>
       These functions are similar to <function>PQconnectdb()</function> and
       <function>PQconnectStart()</function> except that they accept a null-terminated
       array of connection options, rather than requiring all options to
       be provided in a single string.
      </para>
     </listitem>

     <listitem>
      <para>
       Add <application>libpq</application> functions <link
       linkend="libpq-exec-escape-string"><function>PQescapeLiteral()</function></link>
       and <function>PQescapeIdentifier()</function> (Robert Haas)
      </para>

      <para>
       These functions return appropriately quoted and escaped SQL string
       literals and identifiers. The caller is not required to pre-allocate
       the string result, as is required by <function>PQescapeStringConn()</function>.
      </para>
     </listitem>

     <listitem>
      <para>
       Add support for a per-user service file (<link
       linkend="libpq-pgservice"><filename>.pg_service.conf</filename></link>),
       which is checked before the site-wide service file
       (Peter Eisentraut)
      </para>
     </listitem>

     <listitem>
      <para>
       Properly report an error if the specified <application>libpq</application> service
       cannot be found (Peter Eisentraut)
      </para>
     </listitem>

     <listitem>
      <para>
       Add <link linkend="libpq-keepalives">TCP keepalive settings</link>
       in libpq (Tollef Fog Heen, Fujii Masao, Robert Haas)
      </para>

      <para>
       Keepalive settings were already supported on the server end of
       TCP connections.
      </para>
     </listitem>

     <listitem>
      <para>
       Avoid extra system calls to block and unblock <literal>SIGPIPE</literal>
       in <application>libpq</application>, on platforms that offer alternative methods
       (Jeremy Kerr)
      </para>
     </listitem>

     <listitem>
      <para>
       When a <link linkend="libpq-pgpass"><filename>.pgpass</filename></link>-supplied
       password fails, mention where the password came from in the error
       message (Bruce Momjian)
      </para>
     </listitem>

     <listitem>
      <para>
       Load SSL certificate chains (Tom Lane)
      </para>

      <para>
       This improves support for indirectly-signed SSL certificates.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title><link linkend="ecpg"><application>ecpg</application></link></title>

    <itemizedlist>

     <listitem>
      <para>
       Add <link linkend="ecpg-descriptors"><acronym>SQLDA</acronym></link>
       (SQL Descriptor Area) support to <application>ecpg</application>
       (Boszormenyi Zoltan)
      </para>
     </listitem>

     <listitem>
      <para>
       Add the <link linkend="ecpg-descriptors"><command>DESCRIBE</command>
       [<literal>OUTPUT</literal>]</link> statement to <application>ecpg</application>
       (Boszormenyi Zoltan)
      </para>
     </listitem>

     <listitem>
      <para>
       Add an <application>ecpg</application> function <link
       linkend="ecpg-library">ECPGtransactionStatus</link> to return the
       current transaction status (Bernd Helmle)
      </para>
     </listitem>

     <listitem>
      <para>
       Add the <literal>string</literal> data type in <application>ecpg</application>
       Informix-compatibility mode (Boszormenyi Zoltan)
      </para>
     </listitem>

     <listitem>
      <para>
       Allow <application>ecpg</application> to use <literal>new</literal> and <literal>old</literal>
       variable names without restriction (Michael Meskes)
      </para>
     </listitem>

     <listitem>
      <para>
       Allow <application>ecpg</application> to use variable names in
       <function>free()</function> (Michael Meskes)
      </para>
     </listitem>

     <listitem>
      <para>
       Make <function>ecpg_dynamic_type()</function> return zero for non-SQL3 data
       types (Michael Meskes)
      </para>

      <para>
       Previously it returned the negative of the data type OID.
       This could be confused with valid type OIDs, however.
      </para>
     </listitem>

     <listitem>
      <para>
       Support <type>long long</type> types on platforms that already have 64-bit
       <type>long</type> (Michael Meskes)
      </para>
     </listitem>

     </itemizedlist>

     <sect5>
      <title><application>ecpg</application> Cursors</title>

      <itemizedlist>

      <listitem>
       <para>
        Add out-of-scope cursor support in <application>ecpg</application>'s native mode
        (Boszormenyi Zoltan)
       </para>

       <para>
        This allows <command>DECLARE</command> to use variables that are not in
        scope when <command>OPEN</command> is called. This facility already existed
        in <application>ecpg</application>'s Informix-compatibility mode.
       </para>
      </listitem>

      <listitem>
       <para>
        Allow dynamic cursor names in <application>ecpg</application> (Boszormenyi Zoltan)
       </para>
      </listitem>

      <listitem>
       <para>
        Allow <application>ecpg</application> to use noise words <literal>FROM</literal> and
        <literal>IN</literal> in <command>FETCH</command> and <command>MOVE</command> (Boszormenyi
        Zoltan)
       </para>
      </listitem>

     </itemizedlist>

    </sect5>

   </sect4>

  </sect3>

  <sect3>
   <title>Build Options</title>

   <itemizedlist>

    <listitem>
     <para>
      Enable client thread safety by default (Bruce Momjian)
     </para>

     <para>
      Thread-safe builds can be disabled with <link
      linkend="configure"><literal>configure</literal></link>
      <option>--disable-thread-safety</option>.
     </para>
    </listitem>

    <listitem>
     <para>
      Add support for controlling the Linux out-of-memory killer
      (Alex Hunsaker, Tom Lane)
     </para>

     <para>
      Now that <filename>/proc/self/oom_adj</filename> allows disabling
      of the <productname>Linux</productname> out-of-memory (<acronym>OOM</acronym>)
      killer, it's recommendable to disable OOM kills for the postmaster.
      It may then be desirable to re-enable OOM kills for the postmaster's
      child processes.  The new compile-time option <link
      linkend="linux-memory-overcommit"><literal>LINUX_OOM_ADJ</literal></link>
      allows the killer to be reactivated for child processes.
     </para>
    </listitem>

   </itemizedlist>

   <sect4>
    <title>Makefiles</title>

    <itemizedlist>

     <listitem>
      <para>
       New <filename>Makefile</filename> targets <link
       linkend="build"><literal>world</literal></link>,
       <literal>install-world</literal>, and <literal>installcheck-world</literal>
       (Andrew Dunstan)
      </para>

      <para>
       These are similar to the existing <literal>all</literal>, <literal>install</literal>,
       and <literal>installcheck</literal> targets, but they also build
       <acronym>HTML</acronym> documentation, build and test <filename>contrib</filename>,
       and test server-side languages and <application>ecpg</application>.
      </para>
     </listitem>

     <listitem>
      <para>
       Add data and documentation installation location control to <link
       linkend="xfunc-c-pgxs"><acronym>PGXS</acronym></link> Makefiles
       (Mark Cave-Ayland)
      </para>
     </listitem>

    <listitem>
     <para>
      Add Makefile rules to build documentation as a single <acronym>HTML</acronym>
      file or as a single plain-text file
      (Peter Eisentraut, Bruce Momjian)
     </para>
    </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Windows</title>

    <itemizedlist>

     <listitem>
      <para>
       Support compiling on <link
       linkend="install-win32">64-bit
       <productname>Windows</productname></link> and running in 64-bit
       mode (Tsutomu Yamada, Magnus Hagander)
      </para>

      <para>
       This allows for large shared memory sizes on <productname>Windows</productname>.
      </para>
     </listitem>

     <listitem>
      <para>
       Support server builds using <link
       linkend="install-win32-full"><productname>Visual Studio
       2008</productname></link> (Magnus Hagander)
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

  </sect3>

  <sect3>
   <title>Source Code</title>

   <itemizedlist>

    <listitem>
     <para>
      Distribute prebuilt documentation in a subdirectory tree, rather than
      as tar archive files inside the distribution tarball
      (Peter Eisentraut)
     </para>

     <para>
      For example, the prebuilt <acronym>HTML</acronym> documentation is now in
      <filename>doc/src/sgml/html/</filename>; the manual pages are packaged
      similarly.
     </para>
    </listitem>

    <listitem>
     <para>
      Make the server's lexer reentrant (Tom Lane)
     </para>

     <para>
      This was needed for use of the lexer by PL/pgSQL.
     </para>
    </listitem>

    <listitem>
     <para>
      Improve speed of memory allocation (Tom Lane, Greg Stark)
     </para>
    </listitem>

    <listitem>
     <para>
      User-defined constraint triggers now have entries in
      <structname>pg_constraint</structname> as well as <structname>pg_trigger</structname>
      (Tom Lane)
     </para>

     <para>
      Because of this change,
      <structname>pg_constraint</structname>.<structfield>pgconstrname</structfield> is now
      redundant and has been removed.
     </para>
    </listitem>

    <listitem>
     <para>
      Add system catalog columns
      <structname>pg_constraint</structname>.<structfield>conindid</structfield> and
      <structname>pg_trigger</structname>.<structfield>tgconstrindid</structfield>
      to better document the use of indexes for constraint
      enforcement (Tom Lane)
     </para>
    </listitem>

    <listitem>
     <para>
      Allow multiple conditions to be communicated to backends using a single
      operating system signal (Fujii Masao)
     </para>

     <para>
      This allows new features to be added without a platform-specific
      constraint on the number of signal conditions.
     </para>
    </listitem>

    <listitem>
     <para>
      Improve source code test coverage, including <filename>contrib</filename>, PL/Python,
      and PL/Perl (Peter Eisentraut, Andrew Dunstan)
     </para>
    </listitem>

    <listitem>
     <para>
      Remove the use of flat files for system table bootstrapping
      (Tom Lane, Alvaro Herrera)
     </para>

     <para>
      This improves performance when using many roles or
      databases, and eliminates some possible failure conditions.
     </para>
    </listitem>

    <listitem>
     <para>
      Automatically generate the initial contents of
      <structname>pg_attribute</structname> for <quote>bootstrapped</quote> catalogs
      (John Naylor)
     </para>

     <para>
      This greatly simplifies changes to these catalogs.
     </para>
    </listitem>

    <listitem>
     <para>
      Split the processing of
      <command>INSERT</command>/<command>UPDATE</command>/<command>DELETE</command> operations out
      of <filename>execMain.c</filename> (Marko Tiikkaja)
     </para>

     <para>
      Updates are now executed in a separate ModifyTable node.  This change is
      necessary infrastructure for future improvements.
     </para>
    </listitem>

    <listitem>
     <para>
      Simplify translation of <application>psql</application>'s SQL help text
      (Peter Eisentraut)
     </para>
    </listitem>

    <listitem>
     <para>
      Reduce the lengths of some file names so that all file paths in the
      distribution tarball are less than 100 characters (Tom Lane)
     </para>

     <para>
      Some decompression programs have problems with longer file paths.
     </para>
    </listitem>

    <listitem>
     <para>
      Add a new <link
      linkend="errcodes-table"><literal>ERRCODE_INVALID_PASSWORD</literal></link>
      <literal>SQLSTATE</literal> error code (Bruce Momjian)
     </para>
    </listitem>

    <listitem>
     <para>
      With authors' permissions, remove the few remaining personal source code
      copyright notices (Bruce Momjian)
     </para>

     <para>
      The personal copyright notices were insignificant but the community
      occasionally had to answer questions about them.
     </para>
    </listitem>

    <listitem>
     <para>
      Add new documentation <link linkend="non-durability">section</link>
      about running <productname>PostgreSQL</productname> in non-durable mode
      to improve performance (Bruce Momjian)
     </para>
    </listitem>

    <listitem>
     <para>
      Restructure the <acronym>HTML</acronym> documentation
      <filename>Makefile</filename> rules to make their dependency checks work
      correctly, avoiding unnecessary rebuilds (Peter Eisentraut)
     </para>
    </listitem>

    <listitem>
     <para>
      Use <productname>DocBook</productname> <acronym>XSL</acronym> stylesheets for man page
      building, rather than <productname>Docbook2X</productname> (Peter Eisentraut)
     </para>

     <para>
      This changes the set of tools needed to build the man pages.
     </para>
    </listitem>

    <listitem>
     <para>
      Improve PL/Perl code structure (Tim Bunce)
     </para>
    </listitem>

    <listitem>
     <para>
      Improve error context reports in PL/Perl (Alexey Klyukin)
     </para>
    </listitem>

   </itemizedlist>

   <sect4>
    <title>New Build Requirements</title>

     <para>
      Note that these requirements do not apply when building from a
      distribution tarball, since tarballs include the files that these
      programs are used to build.
     </para>

    <itemizedlist>
     <listitem>
      <para>
       Require <application>Autoconf</application> 2.63 to build
       <application>configure</application> (Peter Eisentraut)
      </para>
     </listitem>

     <listitem>
      <para>
       Require <application>Flex</application> 2.5.31 or later to build
       from a <acronym>CVS</acronym> checkout (Tom Lane)
      </para>
     </listitem>

     <listitem>
      <para>
       Require <application>Perl</application> version 5.8 or later to build
       from a <acronym>CVS</acronym> checkout (John Naylor, Andrew Dunstan)
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Portability</title>

    <itemizedlist>

     <listitem>
      <para>
       Use a more modern <acronym>API</acronym> for <application>Bonjour</application> (Tom Lane)
      </para>

      <para>
       Bonjour support now requires <productname>OS X</productname> 10.3 or later.
       The older API has been deprecated by Apple.
      </para>
     </listitem>

     <listitem>
      <para>
       Add spinlock support for the <productname>SuperH</productname>
       architecture (Nobuhiro Iwamatsu)
      </para>
     </listitem>

     <listitem>
      <para>
       Allow non-<application>GCC</application> compilers to use inline functions if
       they support them (Kurt Harriman)
      </para>
     </listitem>

     <listitem>
      <para>
       Remove support for platforms that don't have a working 64-bit
       integer data type (Tom Lane)
      </para>
     </listitem>

     <listitem>
      <para>
       Restructure use of <literal>LDFLAGS</literal> to be more consistent
       across platforms (Tom Lane)
      </para>

      <para>
       <literal>LDFLAGS</literal> is now used for linking both executables and shared
       libraries, and we add on <literal>LDFLAGS_EX</literal> when linking
       executables, or <literal>LDFLAGS_SL</literal> when linking shared libraries.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Server Programming</title>

    <itemizedlist>

     <listitem>
      <para>
       Make backend header files safe to include in <productname>C++</productname>
       (Kurt Harriman, Peter Eisentraut)
      </para>

      <para>
       These changes remove keyword conflicts that previously made
       <productname>C++</productname> usage difficult in backend code.  However, there
       are still other complexities when using <productname>C++</productname> for backend
       functions. <literal>extern "C" { }</literal> is still necessary in
       appropriate places, and memory management and error handling are
       still problematic.
      </para>
     </listitem>

     <listitem>
      <para>
       Add <link
       linkend="xaggr"><function>AggCheckCallContext()</function></link>
       for use in detecting if a <productname>C</productname> function is
       being called as an aggregate (Hitoshi Harada)
      </para>
     </listitem>

     <listitem>
      <para>
       Change calling convention for <function>SearchSysCache()</function> and related
       functions to avoid hard-wiring the maximum number of cache keys
       (Robert Haas)
      </para>

      <para>
       Existing calls will still work for the moment, but can be expected to
       break in 9.1 or later if not converted.
      </para>
     </listitem>

     <listitem>
      <para>
       Require calls of <function>fastgetattr()</function> and
       <function>heap_getattr()</function> backend macros to provide a non-NULL fourth
       argument (Robert Haas)
      </para>
     </listitem>

     <listitem>
      <para>
       Custom typanalyze functions should no longer rely on
       <structname>VacAttrStats</structname>.<structfield>attr</structfield> to determine the type
       of data they will be passed (Tom Lane)
      </para>

      <para>
       This was changed to allow collection of statistics on index columns
       for which the storage type is different from the underlying column
       data type.  There are new fields that tell the actual datatype being
       analyzed.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Server Hooks</title>

    <itemizedlist>

     <listitem>
      <para>
       Add parser hooks for processing ColumnRef and ParamRef nodes
       (Tom Lane)
      </para>
     </listitem>

     <listitem>
      <para>
       Allow the calling of parser hooks from <acronym>SPI</acronym> and cached
       plans (Tom Lane)
      </para>
     </listitem>

     <listitem>
      <para>
       Add a ProcessUtility hook so loadable modules can control utility
       commands (Itagaki Takahiro)
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

   <sect4>
    <title>Binary Upgrade Support</title>

    <itemizedlist>

    <listitem>
     <para>
      Add <link linkend="pgupgrade"><filename>contrib/pg_upgrade</filename></link>
      to support in-place upgrades (Bruce Momjian)
     </para>

     <para>
      This avoids the requirement of dumping/reloading the database when
      upgrading to a new major release of PostgreSQL, thus reducing downtime
      by orders of magnitude. It supports upgrades to 9.0
      from PostgreSQL 8.3 and 8.4.
     </para>
    </listitem>

     <listitem>
      <para>
       Add support for preserving relation <link
       linkend="catalog-pg-class"><structname>relfilenode</structname></link> values
       during binary upgrades (Bruce Momjian)
      </para>
     </listitem>

     <listitem>
      <para>
       Add support for preserving <structname>pg_type</structname>
       and <structname>pg_enum</structname> OIDs during binary upgrades
       (Bruce Momjian)
      </para>
     </listitem>

     <listitem>
      <para>
       Move data files within tablespaces into
       <productname>PostgreSQL</productname>-version-specific subdirectories
       (Bruce Momjian)
      </para>

      <para>
       This simplifies binary upgrades.
      </para>
     </listitem>

    </itemizedlist>

   </sect4>

  </sect3>

  <sect3>
   <title>Contrib</title>

   <itemizedlist>

    <listitem>
     <para>
      Add multithreading option (<option>-j</option>) to <link
      linkend="pgbench"><filename>contrib/pgbench</filename></link>
      (Itagaki Takahiro)
     </para>

     <para>
      This allows multiple <acronym>CPU</acronym>s to be used by pgbench,
      reducing the risk of pgbench itself becoming the test bottleneck.
     </para>
    </listitem>

    <listitem>
     <para>
      Add <command>\shell</command> and <command>\setshell</command> meta
      commands to <link
      linkend="pgbench"><filename>contrib/pgbench</filename></link>
      (Michael Paquier)
     </para>
    </listitem>

    <listitem>
     <para>
      New features for <link
      linkend="dict-xsyn"><filename>contrib/dict_xsyn</filename></link>
      (Sergey Karpov)
     </para>

     <para>
      The new options are <literal>matchorig</literal>, <literal>matchsynonyms</literal>,
      and <literal>keepsynonyms</literal>.
     </para>
    </listitem>

    <listitem>
     <para>
      Add full text dictionary <link
      linkend="unaccent"><filename>contrib/unaccent</filename></link>
      (Teodor Sigaev)
     </para>

     <para>
      This filtering dictionary removes accents from letters, which
      makes full-text searches over multiple languages much easier.
     </para>
    </listitem>

    <listitem>
     <para>
      Add <link
      linkend="contrib-dblink-get-notify"><function>dblink_get_notify()</function></link>
      to <filename>contrib/dblink</filename> (Marcus Kempe)
     </para>

     <para>
      This allows asynchronous notifications in <productname>dblink</productname>.
     </para>
    </listitem>

    <listitem>
     <para>
      Improve <filename>contrib/dblink</filename>'s handling of dropped columns
      (Tom Lane)
     </para>

     <para>
      This affects <link
      linkend="CONTRIB-DBLINK-BUILD-sql-insert"><function>dblink_build_sql_insert()</function></link>
      and related functions.  These functions now number columns according
      to logical not physical column numbers.
     </para>
    </listitem>

    <listitem>
     <para>
      Greatly increase <link
      linkend="hstore"><filename>contrib/hstore</filename></link>'s data
      length limit, and add B-tree and hash support so <literal>GROUP
      BY</literal> and <literal>DISTINCT</literal> operations are possible on
      <type>hstore</type> columns (Andrew Gierth)
     </para>

     <para>
      New functions and operators were also added.  These improvements
      make <type>hstore</type> a full-function key-value store embedded in
      <productname>PostgreSQL</productname>.
     </para>
    </listitem>

    <listitem>
     <para>
      Add <link
      linkend="passwordcheck"><filename>contrib/passwordcheck</filename></link>
      to support site-specific password strength policies (Laurenz
      Albe)
     </para>

     <para>
      The source code of this module should be modified to implement
      site-specific password policies.
     </para>
    </listitem>

    <listitem>
     <para>
      Add <link
      linkend="pgarchivecleanup"><filename>contrib/pg_archivecleanup</filename></link>
      tool (Simon Riggs)
     </para>

     <para>
      This is designed to be used in the
      <literal>archive_cleanup_command</literal>
      server parameter, to remove no-longer-needed archive files.
     </para>
    </listitem>

    <listitem>
     <para>
      Add query text to <link
      linkend="auto-explain"><filename>contrib/auto_explain</filename></link>
      output (Andrew Dunstan)
     </para>
    </listitem>

    <listitem>
     <para>
      Add buffer access counters to <link
      linkend="pgstatstatements"><filename>contrib/pg_stat_statements</filename></link>
      (Itagaki Takahiro)
     </para>
    </listitem>

    <listitem>
     <para>
      Update <link
      linkend="server-start"><filename>contrib/start-scripts/linux</filename></link>
      to use <filename>/proc/self/oom_adj</filename> to disable the
      <link linkend="linux-memory-overcommit"><productname>Linux</productname>
      out-of-memory</link> (<acronym>OOM</acronym>) killer (Alex
      Hunsaker, Tom Lane)
     </para>
    </listitem>

   </itemizedlist>

  </sect3>
 </sect2>
</sect1>
