<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

 <chapter id="tutorial-start">
  <title>Cominciare</title>

  <sect1 id="tutorial-install">
   <title>Installazione</title>

   <para>
Prima di usare bisogna installarlo, ovviamente.
È possibile che <productname>PostgreSQL</productname> sia già installato, 
sia perchè è già incluso nella distribuzione del proprio sistema operativo,
sia che l'amministratore di sistema lo abbia già installato.
Se ci so trova nel secondo caso, si dovrebbero ottenere inromazioni 
dalla documentzione del sistema operativo o dall'amministratore di distema 
su come avere accesso a <productname>PostgreSQL</productname>.
   </para>

   <para>
Se non si è sicuri che <productname>PostgreSQL</productname>
sia già disponibile o che lo possiate utilizzare per sperimentazioni
allora è possibile installarlo. Non è difficile farlo
e può essere un buon esercizio.
<productname>PostgreSQL</productname> può essere installato da un utente 
non provolegiato; Non è richiesto l'accesso superutente (<systemitem>root</systemitem>).
   </para>

   <para>
Se si sta installando <productname>PostgreSQL</productname>
da soli, allora riferirsi a <xref linkend="installation"/>
per istruzioni sull'installazione, e tornare a questa guida quando 
l'installazione è completata. 
Assicurarsi di seguire alla lettera la sezione sull'impostazione delle variabili d'ambiente 
appropriate.
   </para>

   <para>
Se l'amministratore del proprio sito non ha impostato le cose nel modo predefinito,
si potrebbe aver bisogno di fare del lavoro in più. Per esempio, se la 
macchina del server database è remota, si dovrà impostare la variabile d'ambiente
<envar>PGHOST</envar> al nome della macchina su cui gira il server database.
Potrebbe essere necessario impostare anche la variabile d'ambiente <envar>PGPORT</envar>. 
Un ultima cosa: se si prova ad avviare un'applicazione ed essa si lamenta
che non possa connettersi al database, si dovrebbe consultare l'amministratore del sito o,
se lo siete voi stessi, la documentazione per essere sicuri che il proprio ambiente sia
impostato in modo appropriato. Se non si è capito il paragrafo precedente 
allora leggere la prossima sezione.
   </para>
  </sect1>


  <sect1 id="tutorial-arch">
   <title>Fondamenti sull'architettura</title>


   <para>
Prima di procedere, si dovrebbe comprendere l'architettura di base del sistema
<productname>PostgreSQL</productname>.
Capire come interagiscono le parti di <productname>PostgreSQL</productname> 
renderà questo capitolo un po' più chiaro.
   </para>

   <para>
Nel gergo dei database,  <productname>PostgreSQL</productname> usa un modello
client/server. Una sessione  <productname>PostgreSQL</productname>
consiste dei seguenti processi cooperanti (programmi):

    <itemizedlist>
     <listitem>
      <para>
Un processo server, che gestisce i file del database, accetta 
connessioni al database da applicazioni client, ed esegue azioni 
per mezzo dei client. Il programma server è chiamato <filename>postgres</filename>.
       <indexterm><primary>postgres</primary></indexterm>
      </para>
     </listitem>

     <listitem>
      <para>
L'applicazione client (frontend) dell'utente che vuole eseguire operazioni sul database. 
Le applicazioni client possono essere di natura molto diversa: 
un client potrebbe essere uno strumento testuale, un'applicazione grafica,
un server web che ha accesso al database per visualizzare pagine web,
oppure uno strumento specializzato per la manutenzione del database.
Alcune appllicazioni client vengono fornite con la distribuzione di 
<productname>PostgreSQL</productname>; la maggior parte sono sviluppate dagli utenti.
      </para>
     </listitem>

    </itemizedlist>
   </para>

   <para>
Come tipico delle applicazioni client/server, il client e il server 
possono essere su host diversi. In quel caso comunicano attraverso
una connessione di rete TCP/IP. Si dovrebbe tenere a mente questo,
dato che i file a cui si ha accesso sulla macchina client potrebbero
non essere accessibili 
sulla macchina server (o potrebbero essere accessibili solo usando un nome diverso).
   </para>

   <para>
Il server <productname>PostgreSQL</productname> può gestire 
connessioni multiple concorrenti dai client. Per realizzare ciò 
il server avvia (<quote>forka</quote>) un nuovo processo per ogni connessione.
Da quel punto in poi, il client e il nuovo processo server comunicano
senza intervento del processo <filename>postgres</filename> originale.
Così, il processo server "master" è sempre in esecuzione, aspettando 
connessioni dai client, mentre i processi client e server associato  
vanno avanti. (Tutto questo è, ovviamente, invisibile all'utente. È stato
menzionato qui solo per completezza.)
   </para>
  </sect1>


  <sect1 id="tutorial-createdb">
   <title>Creare un database</title>

   <indexterm zone="tutorial-createdb">
    <primary>database</primary>
    <secondary>creating</secondary>
   </indexterm>

   <indexterm zone="tutorial-createdb">
    <primary>createdb</primary>
   </indexterm>

   <para>
La prima prova per vedere se si ha accesso al server database
è provare a creare un database. Un server <productname>PostgreSQL</productname>  
in esecuzione può gestire molti database.
Tipicamente, viene usato un database separato per ogni progetto o per 
ogni utente.
   </para>

   <para>
Possibilmente, l'amministratore del vostro sito ha già creato un database
per il vostro uso. Dovrebbe aver comunicato il nome del vostro database.
In quel caso si può evitare questo passo e saltare alla prossima sezione.
   </para>

   <para>
Per creare un nuovo database, in questo esempio chiamato
    <literal>mydb</literal>, usare il seguente comando:
<screen>
<prompt>$</prompt> <userinput>createdb mydb</userinput>
</screen>
Se questo non produce risposta allora questo passo ha avuto successo e si può saltare 
il resto di questa sezione.
   </para>

   <para>
Se si ottiene un messaggio simile a:
<screen>
createdb: command not found
</screen>
allora <productname>PostgreSQL</productname> non è stato installato bene. O non è stato
installato per niente o il percorso di ricerca della shell 
non è stato impostato per includerlo.
Provare a lanciare il comando con un percorso assoluto: 
<screen>
<prompt>$</prompt> <userinput>/usr/local/pgsql/bin/createdb mydb</userinput>
</screen>
Il percorso potrebbe essere diverso. Contattare l'amministratore del proprio sito 
o controllare le istruzioni di installazione per correggere la situazione.
   </para>

   <para>
    Un'altra risposta potrebbe essere questa:
<screen>
createdb: could not connect to database postgres: could not connect to server: No such file or directory
        Is the server running locally and accepting
        connections on Unix domain socket "/tmp/.s.PGSQL.5432"?
</screen>
Questo significa che il server non è stato avviato, o non è stato avviato dove
il comando <command>createdb</command> se lo aspettava. Di nuovo, controllare 
le istruzioni di installazione o consultare l'amministratore.
   </para>

   <para>
    Un'altra risposta potrebbe essere questa:
<screen>
createdb: could not connect to database postgres: FATAL:  role "joe" does not exist
</screen>
dove è menzionato il proprio nome di login. Questo succederà se 
l'amministratore non ha creato un account utente <productname>PostgreSQL</productname>
per voi. Gli account utente <productname>PostgreSQL</productname> sono diversi dagli
account utente del sistema operativo. Se si è amministratore, vedere
<xref linkend="user-manag"/> per aiuto sulla creazione di account. Si avrà bisogno di
diventare l'utente del sistema operativo con il quale è stato installato
<productname>PostgreSQL</productname> (di solito <literal>postgres</literal>) per creare
il primo account utente. Potrebbe anche essere che venga assegnato un nome utente 
<productname>PostgreSQL</productname> diverso dal nome utente del sistema operativo; 
in quel caso è necessario usare l'opzione <option>-U</option>
o impostare la variabile d'ambiente <envar>PGUSER</envar> per specificare il nome utente
<productname>PostgreSQL</productname>.
   </para>

   <para>
Se si ha un account utente che non ha i privilegi richiesti per 
creare un database, vedrai:
<screen>
createdb: database creation failed: ERROR:  permission denied to create database
</screen>
Non ogni utente ha l'autorizzazione a creare nuovi database. Se 
<productname>PostgreSQL</productname> si rifiuta di creare database
allora l'amministratore del sito ha bisogno di concederi il permesso per farlo.
Consultare l'amministratore se si verfica ciò.
Se si è installto <productname>PostgreSQL</productname> da soli
allora, per gli scopi di questo tutorial,  
si dovrebbe effettuare il log in 
con l'account utente col quale si è avviato il server.

    <footnote>
     <para>
Una spiegazione sul perchè questo funziona:
i nomi utente di <productname>PostgreSQL</productname> sono separati 
dagli account utente del sistema operativo. Quando ci si connette a un
database, è possibile scegliere con quale
nome utente <productname>PostgreSQL</productname> connettersi;
se non lo si fa, verrà preso come predefinito lo stesso nome dell'account  
corrente del sistema operativo. Dato questo, ci sarà sempre un account utente 
<productname>PostgreSQL</productname> che ha lo stesso nome 
dell'utente del sistema operativo che ha avviato il server,
e succede anche che quell'utente ha sempre il permesso di 
creare database. Invece di effettuare il log in come quell'utente è possibile 
anche specificare con l'opzione <option>-U</option> il nome utente col 
quale connettersi.
     </para>
    </footnote>
   </para>

   <para>
È anche possibile creare database con altri nomi.
<productname>PostgreSQL</productname> permette la creazione di qualsiasi numero di 
database per un dato sito. I nome di dei database devono avere il primo carattere alfabetico 
e sono limitati a una lunghezza di 63 caratteri. Una scelta comoda è di creare
un database con lo stesso nome del proprio nome utente corrente. 
Molti strumenti assumono quel nome di database come predefinito, così da poter 
risparmiare qualche battitura. Per creare quel database, digitare semplicemente:
<screen>
<prompt>$</prompt> <userinput>createdb</userinput>
</screen>
   </para>

   <para>
Se non si vuole più usare il database è possibile rimuoverlo.
Per esempio, se si è il possessore (creatore) del database
<literal>mydb</literal>, è possibile eliminarlo usando il seguente comando:
<screen>
<prompt>$</prompt> <userinput>dropdb mydb</userinput>
</screen>
(Per questo comando, non viene usato un nome di database predefinito uguale al nome
dell'utente. Si deve sempre specificarlo). Questa azione rimuove fisicamente 
tutti i file associati al database e non è reversibile, 
così dovrebbe essere fatta solo con grande premeditazione.
   </para>

   <para>
Più informazioni su <command>createdb</command> e <command>dropdb</command> possono 
essere trovate rispettivamente in <xref linkend="app-createdb"/> e <xref linkend="app-dropdb"/>.
   </para>
  </sect1>


  <sect1 id="tutorial-accessdb">
   <title>Accedere al database</title>

   <indexterm zone="tutorial-accessdb">
    <primary>psql</primary>
   </indexterm>

   <para>
Una volta che si è creato il database, è possibile accederci in vari modi:

    <itemizedlist spacing="compact" mark="bullet">
     <listitem>
      <para>
Eseguendo il terminale interattivo di <productname>PostgreSQL</productname> chiamato 
<application><firstterm>psql</firstterm></application>, che permette 
di inserire, editare ed eseguire comandi <acronym>SQL</acronym>.
      </para>
     </listitem>

     <listitem>
      <para>
       Using an existing graphical frontend tool like
       <application>pgAdmin</application> or an office suite with
       <acronym>ODBC</acronym> or <acronym>JDBC</acronym> support to create and manipulate a
       database.  These possibilities are not covered in this
       tutorial.
      </para>
     </listitem>

     <listitem>
      <para>
       Writing a custom application, using one of the several
       available language bindings.  These possibilities are discussed
       further in <xref linkend="client-interfaces"/>.
      </para>
     </listitem>
    </itemizedlist>

    You probably want to start up <command>psql</command> to try
    the examples in this tutorial.  It can be activated for the
    <literal>mydb</literal> database by typing the command:
<screen>
<prompt>$</prompt> <userinput>psql mydb</userinput>
</screen>
    If you do not supply the database name then it will default to your
    user account name.  You already discovered this scheme in the
    previous section using <command>createdb</command>.
   </para>

   <para>
    In <command>psql</command>, you will be greeted with the following
    message:
<screen>
psql (&version;)
Type "help" for help.
 
mydb=&gt;
</screen>
    <indexterm><primary>superuser</primary></indexterm>
    The last line could also be:
<screen>
mydb=#
</screen>
    That would mean you are a database superuser, which is most likely
    the case if you installed <productname>PostgreSQL</productname>
    yourself.  Being a superuser means that you are not subject to
    access controls.  For the purposes of this tutorial that is not
    important.
   </para>

   <para>
    If you encounter problems starting <command>psql</command>
    then go back to the previous section.  The diagnostics of
    <command>createdb</command> and <command>psql</command> are
    similar, and if the former worked the latter should work as well.
   </para>

   <para>
    The last line printed out by <command>psql</command> is the
    prompt, and it indicates that <command>psql</command> is listening
    to you and that you can type <acronym>SQL</acronym> queries into a
    work space maintained by <command>psql</command>.  Try out these
    commands:
    <indexterm><primary>version</primary></indexterm>
<screen>
<prompt>mydb=&gt;</prompt> <userinput>SELECT version();</userinput>
                               version
 -----------------------------------------------------------------------
 PostgreSQL &version; on i586-pc-linux-gnu, compiled by GCC 2.96, 32-bit
(1 row)

<prompt>mydb=&gt;</prompt> <userinput>SELECT current_date;</userinput>
    date
------------
 2002-08-31
(1 row)

<prompt>mydb=&gt;</prompt> <userinput>SELECT 2 + 2;</userinput>
 ?column?
----------
        4
(1 row)
</screen>
   </para>

   <para>
    The <command>psql</command> program has a number of internal
    commands that are not SQL commands.  They begin with the backslash
    character, <quote><literal>\</literal></quote>.
    For example,
    you can get help on the syntax of various
    <productname>PostgreSQL</productname> <acronym>SQL</acronym>
    commands by typing:
<screen>
<prompt>mydb=&gt;</prompt> <userinput>\h</userinput>
</screen>
   </para>

   <para>
    To get out of <command>psql</command>, type:
<screen>
<prompt>mydb=&gt;</prompt> <userinput>\q</userinput>
</screen>
    and <command>psql</command> will quit and return you to your
    command shell. (For more internal commands, type
    <literal>\?</literal> at the <command>psql</command> prompt.)  The
    full capabilities of <command>psql</command> are documented in
    <xref linkend="app-psql"/>.  If <productname>PostgreSQL</productname> is
    installed correctly you can also type <literal>man psql</literal>
    at the operating system shell prompt to see the documentation.  In
    this tutorial we will not use these features explicitly, but you
    can use them yourself when it is helpful.
   </para>

  </sect1>
 </chapter>
