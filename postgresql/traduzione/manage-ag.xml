<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

<chapter id="managing-databases">
 <title>Gestire un database</title>

 <indexterm zone="managing-databases"><primary>database</primary></indexterm>

 <para>
Ogni istanza di un server <productname>PostgreSQL</productname>
in esecuzione gestisce uno o più database. I database sono inoltre il livello gerarchico più alto 
per l'organizzazione degli oggetti <acronym>SQL</acronym> 
(<quote>oggetti del database</quote>). Questo capitolo descrive 
le proprietà dei database, e come crearli, gestirli e distruggerli.
 </para>

 <sect1 id="manage-ag-overview">
  <title>Panoramica</title>

  <indexterm zone="manage-ag-overview">
   <primary>schema</primary>
  </indexterm>

  <para>
Un database è una collezione nominata di oggetti <acronym>SQL</acronym>
(<quote>oggetti del database</quote>). Generalmente, ogni oggetto del database
(tabelle, funzioni, ecc.) appartiene ad un e uno soltanto database.
(Comunque ci sono alcuni cataloghi di sistema, per esempio
<literal>pg_database</literal>, che appartengono all'intero cluster e
sono accessibili da ogni database all'interno del cluster). Più 
precisamente, un database è una collezione di schemi e gli schemi contengono le
tabelle, funzioni, ecc. Così la gerarchia completa è:
server, database, schema, tabella (o altri tipi di oggetto,
tipo una funzione).
  </para>

  <para>
Quando ci si connette a un server database, un client deve specificare 
nella sua richieta di connessione il nome del database a cui vuole connettersi.
Non è possibile avere accesso a più di un database per connessione.
Comunque, un'applicazione non ha vincoli per quanto riguarda il numero di connessioni
che apre sullo stesso o su altri database. I database sono 
fisicamente separati e il controllo degli accessi è gestito a livello di 
connessione. Se un'istanza di server <productname>PostgreSQL</productname>
serve a più progetti o utenti che dovrebbero essere separati e
per la maggior parte insicuri a vicenda, è comunque raccomandabile 
metterli in database separati. Se i progetti
degli utenti sono collegati e dovrebbero essere capaci di usare le risorse vicendevolmente,
dovrebbero essere messi nello stesso database ma possibilmente 
in schemi separati. Hli schemi sono una struttura puramente logica e chi può
accedere a cosa è gestito dal sistema dei privilegi. Maggiori informazioni sulla gestione degli schemi 
si trovano in <xref linkend="ddl-schemas"/>.
  </para>

  <para>
I database vengono creati con il comando <command>CREATE DATABASE</command>
(si veda <xref linkend="manage-ag-createdb"/>) e distrutte con il comando 
<command>DROP DATABASE</command> 
(si veda <xref linkend="manage-ag-dropdb"/>).
Per determinare l'insieme di database esistenti, esaminare il catalogo di sistema
<structname>pg_database</structname>, per esempio
<synopsis>
SELECT datname FROM pg_database;
</synopsis>
Il meta-comando <literal>\l</literal> del programma <xref linkend="app-psql"/>
e l'opzione a linea di comando <option>-l</option> sono utili anche per eselncare 
i database esistenti.
  </para>

  <note>
   <para>
Lo standard <acronym>SQL</acronym> chiama i database <quote>cataloghi</quote>, ma 
in pratica non c'è differenza.
   </para>
  </note>
 </sect1>

 <sect1 id="manage-ag-createdb">
  <title>Creare un database</title>

  <para>
Per creare un database, il server <productname>PostgreSQL</productname>
deve essere in esecuzione (si veda <xref
linkend="server-start"/>).
  </para>

  <para>
I database vengono creati con il comando SQL 
<xref linkend="sql-createdatabase"/>:<indexterm><primary>CREATE
DATABASE</primary></indexterm>
<synopsis>
CREATE DATABASE <replaceable>name</replaceable>;
</synopsis>
dove <replaceable>name</replaceable> segue le solite regole per 
gli identificatori <acronym>SQL</acronym>. Il ruolo corrente diventa automaticamente 
il possessore del nuovo database. È privilegio del possessore di un database
la possibilità di rimuoverlo (operazione che rimuove anche tutti gli oggetti
al suo interno, anche se hanno proprietari diversi).
  </para>

  <para>
La creazione di database è un'operazione riservata. Si veda  <xref
linkend="role-attributes"/>  per come concedere i permessi.
  </para>

  <para>
Dato che si ha la necessità di essere connessi al server database per eseguire
il comando <command>CREATE DATABASE</command>, la questione rimane 
come può essere creato il <emphasis>primo</emphasis> database ad ogni dato sito.
Il primo database è creato sempre dal comando 
<command>initdb</command> quando l'area di immagazzinamento dei dati viene inizializzata.
(Si veda <xref linkend="creating-cluster"/>). Questo database
viene chiamato 
<literal>postgres</literal>.<indexterm><primary>postgres</primary></indexterm> così per creare
il primo database <quote>normale</quote> ci si può connettere a 
<literal>postgres</literal>.
  </para>

  <para>
Un secondo database,
<literal>template1</literal>,<indexterm><primary>template1</primary></indexterm>
viene inoltre creato durante l'inizializzazione del cluster. Ogni volta che
un nuovo database viene creato all'interno del
cluster, <literal>template1</literal> viene essenzialmente clonato.
Questo significa che ogni cambiamento fatto in <literal>template1</literal> è
propagato a tutti i database creati successivamente. Per questo, 
evitare di creare oggetti in <literal>template1</literal> a meno che si voglia che siano 
propagati ad ogni database creato. MAggiori dettagli 
appaiono in <xref linkend="manage-ag-templatedbs"/>.
  </para>

  <para>
Per convenienza, c'è un programma che è possibile eseguire 
dalla schell per creare nuovi database,
<command>createdb</command>.<indexterm><primary>createdb</primary></indexterm>


<synopsis>
createdb <replaceable class="parameter">dbname</replaceable>
</synopsis>

<command>createdb</command> non fa magie. Si connette al database <literal>postgres</literal>
ed esegue il comando <command>CREATE DATABASE</command>,
esattamente come descritto sopra.
La pagina di riferimento <xref linkend="app-createdb"/> contiene i dettagli per l'invocazione
Notare che  <command>createdb</command> senza argomenti creerà un database chiamato come l'utente corrente.
  </para>

  <note>
   <para>
<xref linkend="client-authentication"/> contiene informazioni su come
restringere chi può connettersi a un dato database.
   </para>
  </note>

  <para>
A volte si vuole creare un database per qualcun altro, e renderlo il proprietario del
nuovo database, così che possa configurarlo e gestirlo da solo.
Per realizzare questo, usare uno dei seguenti comandi:
<programlisting>
CREATE DATABASE <replaceable>dbname</replaceable> OWNER <replaceable>rolename</replaceable>;
</programlisting>
dall'ambiente SQL, o:
<programlisting>
createdb -O <replaceable>rolename</replaceable> <replaceable>dbname</replaceable>
</programlisting>
dalla shell.
Solo il superutente è autorizzato a creare un database per qualcun altro
(cioè, per un ruolo di cui non si è membri).
  </para>
 </sect1>

 <sect1 id="manage-ag-templatedbs">
  <title>Database template</title>

  <para>
<command>CREATE DATABASE</command> funziona effettivamente copiando un database esistente.
In maniera predefinita, copia il database standard di sistema chiamato 
<literal>template1</literal>.<indexterm><primary>template1</primary></indexterm> Così quel database è
il <quote>modello</quote> dal quale i nuovi database sono creati.
Se si aggiungono oggetti a <literal>template1</literal>, questi oggetti 
saranno copiati nei database creati successivamente. Questo comportamento
permette modifiche locali al sito all'insieme degli oggetti standard nei database.
Per esempio, se si installa il linguaggio procedurale
<application>PL/Perl</application> in <literal>template1</literal>, sarà disponibile automaticamente
nei database degli utenti senza che venga fatta nessuna azione aggiuntiva
quandi questi database vengono creati.
  </para>

  <para>
C'è un secono database standard di sistema chiamato 
<literal>template0</literal>.<indexterm><primary>template0</primary></indexterm> Questo
database contiene gli stessi dati iniziali di 
<literal>template1</literal>, cioè, solo gli oggetti standard
predefiniti dalla versione di 
<productname>PostgreSQL</productname>.  <literal>template0</literal>
non dovrebbe mai essere cambiato dopo che il cluster di database è stato inizializzato.
Istruendo <command>CREATE DATABASE</command> a copiare da <literal>template0</literal> invece
che da <literal>template1</literal>, si può creare un utente del database <quote>vergine</quote>
che non contiene le aggiunte fate localmente al sito in 
<literal>template1</literal>. Questo è particolarmente utile quando si sta ripristinando un
dump <literal>pg_dump</literal>: lo script di dump dovrebbe essere ripristinato in un database 
vergine per assicurarsi che ricrei i contenuti corretti
del database sottoposto a dump, senza avere conflitti con oggetti che
potrebbero essere stati aggiunti a <literal>template1</literal> più tardi.
  </para>

  <para>
Un'altra ragione comune per copiare da <literal>template0</literal> invece che 
da <literal>template1</literal> è che nuove impostazioni di codifica e localizzazione
possono essere specificare quando si copia <literal>template0</literal>, mentre una copia 
do <literal>template1</literal> deve usare gli stessi settaggi.
Questo perchè <literal>template1</literal> potrebbe contenere dati specifici della codifica
o della localizzazione, mentre <literal>template0</literal> non lo fa.
  </para>

  <para>
Per creare un database copiando da <literal>template0</literal>, usare:
<programlisting>
CREATE DATABASE <replaceable>dbname</replaceable> TEMPLATE template0;
</programlisting>
dall'ambiente SQL, o:
<programlisting>
createdb -T template0 <replaceable>dbname</replaceable>
</programlisting>
dalla shell.
  </para>

  <para>
È possibile creare database template aggiuntivi, ed è effettivamente 
possibile copiare qualsiasi database in un cluster specificando il suo nome
come il template per <command>CREATE DATABASE</command>.  È importante capire,
comunque, che questo non è (ancora) inteso come
una funzione <quote><command>COPY DATABASE</command></quote> di scopo generale.
La limitazione principale è che non possono essere connesse altre sessioni 
al database sorgente mentre sta avvenendo la copia. <command>CREATE
DATABASE</command> fallirà se qualsiasi altra connessione esiste quando comincia;
durante l'operazione di copia, le nuove connessioni al database sorgente
sono impedite.
  </para>

  <para>
Ci sono due utili flag in <literal>pg_database</literal><indexterm><primary>pg_database</primary></indexterm>
per ogni database: le colonne  <literal>datistemplate</literal> e
<literal>datallowconn</literal>.  <literal>datistemplate</literal> 
può esssere impostata per indicare che un database viene considerato come un template
per <command>CREATE DATABASE</command>. Se questo flag è impostato, il database può essere
clonato da qualsiasi utente con privilegi <literal>CREATEDB</literal>; se non è impostato,
solo i superutenti e il proprietario del database può clonarlo.
Se <literal>datallowconn</literal> è false, allora non viene permessa 
nessuna nuova connessione al database (ma le sessioni già esistenti non vengono 
terminate semplicemente impostando questo flag a false). Il database <literal>template0</literal>
è normalmente contrassegnato da <literal>datallowconn = false</literal> per
prevenire la sua modifica.
Sia <literal>template0</literal> che <literal>template1</literal>
dovrebbero essere sempre contrassegnati con <literal>datistemplate = true</literal>.
  </para>

  <note>
   <para>
<literal>template1</literal> e <literal>template0</literal> non hanno nessuno stato speciale
a parte il fatto che il nome <literal>template1</literal> è il nome predefinito
per il database sorgente per <command>CREATE DATABASE</command>.
Per esempio, si potrebbe eliminare <literal>template1</literal> e ricrearlo da
<literal>template0</literal> senza nessun effetto negativo. Comportarsi in questo modo 
potrebbe essere consigliabile se qualcuno ha aggiunto imprudentemente della "robaccia" a
<literal>template1</literal>. (Per cancellare <literal>template1</literal>,
deve avere <literal>pg_database.datistemplate = false</literal>).
   </para>

   <para>
Quando un cluster viene inizializzato viene anche creato 
il database <literal>postgres</literal>. 
Questo database è intesi come database predefinito per le connessione di utenti e applicazioni.
È semplicemente una una copia di 
<literal>template1</literal> e può essere eliminato e ricreato se necessario.
   </para>
  </note>
 </sect1>

 <sect1 id="manage-ag-config">
  <title>Configurazione del database</title>

  <para>
Ricordare da <xref linkend="runtime-config"/> che il server 
<productname>PostgreSQL</productname> fornisce un grande numero di 
variabili di configurazione "run-time". Si possono impostare valori predefiniti 
specifici del database per molte di queste impostazioni.
  </para>

  <para>
Per esempio, se per qualche ragione si vuole disabilitare l'ottimizzatore
<acronym>GEQO</acronym> per un dato database, si dovrebbe normalmente 
o disabilitarlo per tutti i database o assicurarsi
che ogni connessione del client è prudente ad eseguire <literal>SET geqo
TO off</literal>.  Per rendere quest'impostazione predefinita all'interno di un 
database particolare, si può eseguire il comando:
<programlisting>
ALTER DATABASE mydb SET geqo TO off;
</programlisting>
Questo salverà l'impostazione (ma non la imposta immediatamente). In 
connessioni successive a questo database apparirà sebbene
<literal>SET geqo TO off;</literal> sia stata eseguita appena prima che la sessione è partita.
Notare che gli utenti possono ancora modificare quest'impostazione durante le loro sessioni;
saranno solo i predefiniti. Per annullare qualsiasi di queste impostazioni, usare
<literal>ALTER DATABASE <replaceable>dbname</replaceable> RESET
<replaceable>varname</replaceable></literal>.
  </para>
 </sect1>

 <sect1 id="manage-ag-dropdb">
  <title>Distruggere un Database</title>

  <para>
I database vengono distrutto con il comando
<xref linkend="sql-dropdatabase"/>:<indexterm><primary>DROP DATABASE</primary></indexterm>
<synopsis>
DROP DATABASE <replaceable>name</replaceable>;
</synopsis>
Solo il proprietario del database, o un superutente,
può eliminare un database. Eliminare un database rimuove tutti gli oggetti
che erano contenuti all'interno del database. La distruzione di un database
non può essere annullata.
  </para>

  <para>
Non è possibile eseguire il comando <command>DROP DATABASE</command>
mentre si è connessi al database. Si può, comunque, connettersi a qualsiasi altro database, incluso 
<literal>template1</literal>.
<literal>template1</literal> sarebbe l'unica opzione per eliminare l'ultimo database utente di un 
dato cluster.
  </para>

  <para>
Per convenienza, c'è anche un programma shell per eliminare  
i database, <xref linkend="app-dropdb"/>:<indexterm><primary>dropdb</primary></indexterm>
<synopsis>
dropdb <replaceable class="parameter">dbname</replaceable>
</synopsis>
(Diversamente da <command>createdb</command>, eliminare il database chiamato come l'utente corrente
non è l'azione predefinita).
  </para>
 </sect1>

 <sect1 id="manage-ag-tablespaces">
  <title>Tablespace</title>

  <indexterm zone="manage-ag-tablespaces">
   <primary>tablespace</primary>
  </indexterm>

  <para>
I tablespace in <productname>PostgreSQL</productname> permettono agli amministratori di database
di definire posizioni nel file system dove possono essere immagazzinati file che rappresentano
gli oggetti del database. Una volta creato, si si può riferire a un un tablespace 
attraverso il suo nome quando si creano 
oggetti del database.
  </para>

  <para>
Usando i tablespace, un amministratore può controllare il layout del disco 
di un'installazione di <productname>PostgreSQL</productname>. Questo è utile in almeno 
due casi. Primo, se la partizione o il volume sul quale è stato inizializzato il cluster 
eccede lo spazio disponibile e non può essere esteso,
può essere creato un tablespace su una partizione differente e usato finchè
il sistema non viene riconfigurato.
  </para>

  <para>
Secondo, i tablespace permettono ad un amministratore di usare la conoscenza 
del modello di utilizzo degli oggetti del database per ottimizzare le prestazioni. Per
esempio, un indice che è usato pesantemente può essere posizionato su un disco 
molto veloce, altamente disponibile, tipo un apparecchio costoso a stato solido.
Allo stesso tempo una tabella che immagazzina dati archiviati che è
usata raramente o non ha problemi di prestazioni potrebbe essere immagazzinata su un disco
meno costoso e più lento.
  </para>

  <para>
Per definire un tablespace, usare il comando <xref
linkend="sql-createtablespace"/>, 
per esempio: <indexterm><primary>CREATE TABLESPACE</primary></indexterm>:
<programlisting>
CREATE TABLESPACE fastspace LOCATION '/mnt/sda1/postgresql/data';
</programlisting>
La posizione deve essere una directory vuota esistente in possesso dall'utente  
<productname>PostgreSQL</productname> del sistema operativo. Tutti gli oggetti creati successivamente
all'interno del tablespace saranno immagazzinati in file sottostanti questa directory.
  </para>

  <note>
   <para>
Di solito non è molto vantaggioso fare più di un tablespace per
file system logico, dato che non si può controllare la posizione di file individuali
all'interno di un file system logico. Comunque,
<productname>PostgreSQL</productname> non forza nessun tipo di limitazione, e
effettivamente non è direttamente consapevole dei limiti del file system del sistema.
Semplicemente immagazzina file nelle directory che gli si dice di usare.
   </para>
  </note>

  <para>
La creazione del tablespace stesso dev'essere fatta come superutente del database,
ma dopo è possibile permettere agli utenti normali del database di usarlo.
Per fare ciò, condcedergli il privilegio <literal>CREATE</literal> su di lui. 
  </para>

  <para>
Tabelle, indici e interi database possono essere assegnati a tablespace particolari.
Per fare ciò, un utente con il privilegio <literal>CREATE</literal>
su un dato tablespace deve passare il nome del tablespace come parametro 
del comando pertinente. Per esempio, il seguente comando crea una tabella 
nel tablespace <literal>space1</literal>:
<programlisting>
CREATE TABLE foo(i int) TABLESPACE space1;
</programlisting>
  </para>

  <para>
Alternativamente, usare il parametro <xref linkend="guc-default-tablespace"/>:
<programlisting>
SET default_tablespace = space1;
CREATE TABLE foo(i int);
</programlisting>
Quando <varname>default_tablespace</varname> è impostato a qualsiasi cosa non sia una una 
stringa vuota, fornise un implicita clausola <literal>TABLESPACE</literal> per 
i comandi <command>CREATE TABLE</command> e <command>CREATE INDEX</command> che 
non ne hanno una esplicita.
  </para>

  <para>
C'è anche un parametro <xref linkend="guc-temp-tablespaces"/>, che determina 
il posizionamento di tabelle temporanee e indici, così come 
file temporanei che sono usati per scopi tipo l'ordinamento di grandi 
insiemi di dati. Questo può essere un elenco di nomi di tablespace, piuttosto che uno solo,
così che il caricamento associato ad oggetti temporanei che possono essere divisi  
su molteplici tablespace. Un membro casuale dell'elenco è scelto ogni volta che viene creato  
che un oggetto temporaneo. 
  </para>

  <para>
Il tablespace associato ad un database viene usato per immagazzinare 
i cataloghi di quel database. Inoltre, è il tablespace predefinito  
usato per le tabelle, gli indici e i file temporanei creati all'interno del database,
se nessuna clausola <literal>TABLESPACE</literal> è fornita e nessuna altra selezione è 
specificata da <varname>default_tablespace</varname> o 
<varname>temp_tablespaces</varname> (come appropriato).
Se un database viene creato senza specificare un tablespace,
usa lo stesso tablespace del database template da cui viene copiato.
  </para>

  <para>
Due tablespace sono creati automaticamente quando il cluster di database 
viene inizializzato. Il tablespace <literal>pg_global</literal> è usato per cataloghi di  
sistema condivisi. Il tablespace <literal>pg_default</literal> è il tablespace predefinito
dei dtabase <literal>template1</literal> e <literal>template0</literal> (e, inoltre,
sarà quello predefinito anche per altri database, a meno che non si sovrascriva
con una clausola <literal>TABLESPACE</literal> in <command>CREATE
DATABASE</command>).
  </para>

  <para>
Una volta creato, un tablespace può essere usato da qualsiasi database, purchè
l'utente abbia sufficienti privilegi. Questo significa che un tablespace 
non può essere eliminato finchè gli oggetti (di tutti i database) che usano quel tablespace 
sono stati rimossi.
  </para>

  <para>
Per rimuovere un tablespace vuoto, usare il comando <xref
linkend="sql-droptablespace"/>.
  </para>

  <para>
Per determinare l'insieme di tablesapce esistenti, esaminare il catalogo di sistema
<structname>pg_tablespace</structname>, per esempio
<synopsis>
SELECT spcname FROM pg_tablespace;
</synopsis>
Il meta comando di <xref linkend="app-psql"/> <literal>\db</literal>
è utile anche per elencare i tablespace.
  </para>

  <para>
<productname>PostgreSQL</productname> utilizza i link simbolici
per semplificare l'implementazione dei tablespace. Questo 
significa che i tablespace possono essere usati <emphasis>solo</emphasis> su sistemi
che supportano i link simbolici.
  </para>

  <para>
La directory <filename>$PGDATA/pg_tblspc</filename> contiene link simbolici che
puntano ad ogni tablespace non predefinito del cluster.
Anche se non è raccomandato, è possibile aggiustare il layout dei tablespace
a mano ridefinendo questi link. Due avvertimenti: non fare questo mentre il server è in esecuzione; 
e dopo che si è riavviato il server,
aggiornare il catalogo <structname>pg_tablespace</structname> con le nuove posizioni.
(Se non lo si fa, <literal>pg_dump</literal> continuerà a mostrare in output
le vecchie posizioni dei tablespace).
  </para>

 </sect1>
</chapter>
