<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

 <chapter id="xplang">
  <title>Linguaggi procedurali</title>

  <indexterm zone="xplang">
   <primary>linguaggio procedurale</primary>
  </indexterm>

  <para>
<productname>PostgreSQL</productname> permette che le funzioni 
definite dall'utente siano scritte in altri linguaggi oltre a SQL e C. Questi altri
linguaggi sono chiamati genericalmente <firstterm>linguaggi procedurali</firstterm>
(<acronym>PL</acronym>). Per una funzione
scritta in un linguaggio procedurale, il server database non
ha conoscienze incluse riguardo a come interpretare il sorgenete della funzione.
Invece, il compito viene passato a un gestore speciale che conosce 
i dettagli del linguaggio. Il gestore potrebbe fare sia tutto il lavoro di parsing, 
analisi di sintassi, esecuzione, ecc. da solo, sia fungere da <quote>collante</quote>
tra <productname>PostgreSQL</productname> e un'implementazione esistente
di un linguaggio di programmazione. Il gestore stesso è una funzione 
C compilata all'interno di un oggetto condiviso e caricato su richiesta,
esattamente come qualsiasi altra funzione C.
  </para>

  <para>
Attualmente ci sono quattro linguaggi procedurali disponibili nella
distribuzione standard di <productname>PostgreSQL</productname>:
<application>PL/pgSQL</application> (<xref linkend="plpgsql"/>),
<application>PL/Tcl</application> (<xref linkend="pltcl"/>),
<application>PL/Perl</application> (<xref linkend="plperl"/>) e
<application>PL/Python</application> (<xref linkend="plpython"/>).
Ci sono linguaggi procedurali aggiuntivi disponibili che non sono
incluse nella distribuzione core.  <xref linkend="external-projects"/>
raccoglie informazioni su come trovarli. In aggiunta possono essere definiti altri linguaggi dall'utente;
le basi per lo sviluppo di un nuovo linguaggio procedurale 
sono trattate in <xref linkend="plhandler"/>.
  </para>

  <sect1 id="xplang-install">
   <title>Installare i linguaggi procedurali</title>

   <para>
Un linguaggio procedurale deve essere <quote>installato</quote> in ogni
database dove sarà usato. Ma i linguaggi procedurali installati nel database  
<literal>template1</literal> sono automaticamente disponibili in tutti
i database creati successivamente, dato che le loro voci in
<literal>template1</literal> saranno copiate da <command>CREATE DATABASE</command>.
Così l'amministratore può decidere
quali linguaggi sono disponibili in quali database e se vuole può rendere 
alcuni linguaggi disponibili in modo predefinito.
   </para>

   <para>
Per i linguaggi forniti con la distribuzione standard, è necessario solamente
eseguire <command>CREATE LANGUAGE</command>
<replaceable>language_name</replaceable> per installare il linguaggio nel database
corrente. Alternitavamente, il programma <xref
linkend="app-createlang"/> può essere usato per farlo dalla shell.
Per esempio, per installare il linguaggio 
<application>PL/Perl</application> nel database 
<literal>template1</literal>, usare:
<programlisting>
createlang plperl template1
</programlisting>
La procedura manuale descritta sotto è raccomandata solo per installare 
linguaggi personalizzati sconosciuti a  <command>CREATE LANGUAGE</command>.
   </para>

   <procedure>
    <title>
     Installazione manuale di un linguaggio procedurale
    </title>

    <para>
Un linguaggio procedurale viene installato in un database in cinque passi,
che devono essere portati avanti da un superutente del database. (Per linguaggi
conosciuti a <command>CREATE LANGUAGE</command>, i passi dal secondo al quarto 
possono essere omessi, dato che saranno svolti automaticamente
se necessario).
    </para>

    <step performance="required" id="xplang-install-cr1">
     <para>
L'oggetto condiviso per il gestore del linguaggio deve essere compilato e
installato in una directory apposita. Questo funziona nello stesso modo
di compilare e installare moduli come fanno normali funzioni C definite dall'utente;
si veda  <xref linkend="dfunc"/>. Spesso, il gestore del linguaggio 
dipenderò da una libreria esterna che fornisce l'effetivo motore del linguaggio di 
programmazione; se è così, dev'essere installato anche quello.
     </para>
    </step>

    <step performance="required" id="xplang-install-cr2">
     <para>
Il gestore dev'essere dichiarato con il comando
<synopsis>
CREATE FUNCTION <replaceable>handler_function_name</replaceable>()
    RETURNS language_handler
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C;
</synopsis>
Il tipo di ritorno speciale <type>language_handler</type> dice al 
sistema di database che questa funzione non restituisce un tipo di dato 
definito in <acronym>SQL</acronym> e non è direttamente usabile 
in istruzioni <acronym>SQL</acronym>.
     </para>
    </step>

    <step performance="optional" id="xplang-install-cr3">
     <para>
Opzionalmente, il gestore del linguaggio può fornire una funzioni <quote>inline</quote>
che esegue blocchi anonimi di codice
(comandi <xref linkend="sql-do"/>)
scritti in questo linguaggio. Se una funzione handler inline 
viene fornita dal linguaggio, dichiararla con un comando come
<synopsis>
CREATE FUNCTION <replaceable>inline_function_name</replaceable>(internal)
    RETURNS void
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C;
</synopsis>
     </para>
    </step>

    <step performance="optional" id="xplang-install-cr4">
     <para>
Opzionalmente, il gestore del linguaggio può fornire una funzione <quote>validator</quote>
che controlla la correttezza di una funzione senza eseguira realmente. La funzione validator
è chiamata da <command>CREATE FUNCTION</command> se esiste. Se una funzione validator
viene fornita dal linguaggio, dichiararla con un comando come
<synopsis>
CREATE FUNCTION <replaceable>validator_function_name</replaceable>(oid)
    RETURNS void
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C;
</synopsis>
     </para>
    </step>

    <step performance="required" id="xplang-install-cr5">
     <para>
Il PL dev'essere dichiarato con il comando
<synopsis>
CREATE <optional>TRUSTED</optional> <optional>PROCEDURAL</optional> LANGUAGE <replaceable>language-name</replaceable>
    HANDLER <replaceable>handler_function_name</replaceable>
    <optional>INLINE <replaceable>inline_function_name</replaceable></optional>
    <optional>VALIDATOR <replaceable>validator_function_name</replaceable></optional> ;
</synopsis>
La parola chiave opzionale <literal>TRUSTED</literal> specifica che 
il linguaggio non concede accesso ai dati che l'utente 
non avrebbe altrimenti. I linguaggi trusted sono progettati per 
utenti normali del database (quelli senza privilegio di superutente) e permettono loro
di creare in maniera sicura funzioni e procedure trigger.
Dato che le funzioni PL sono eseguite all'interno del server  database, 
il flag <literal>TRUSTED</literal> dovrebbe essere fornito solo per linguaggi che 
non permettono l'accesso all'interno del server database o al file system.
I linguagggi
<application>PL/pgSQL</application>,
<application>PL/Tcl</application>, e
<application>PL/Perl</application>
sono considerati trusted; i linguaggi 
<application>PL/TclU</application>,
<application>PL/PerlU</application>, e
<application>PL/PythonU</application>
sono progettati per fornire funzionalità illimitate e <emphasis>non</emphasis> 
dovrebbero essere segnati come trusted.
     </para>
    </step>
   </procedure>

   <para>
<xref linkend="xplang-install-example"/> mostra come la procedura di installazione manuale 
dovrebbe funzionare con il linguaggio 
<application>PL/Perl</application>.
   </para>

   <example id="xplang-install-example">
    <title>Installazione manuale di <application>PL/Perl</application></title>

     <para>
I seguenti comandi dicono al server database dove trovare l'oggetto condiviso 
per la funzione che gestisce le chiamate del linguaggio <application>PL/Perl</application>:

<programlisting>
CREATE FUNCTION plperl_call_handler() RETURNS language_handler AS
    '$libdir/plperl' LANGUAGE C;
</programlisting>
     </para>

     <para>
<application>PL/Perl</application> ha una funzione di gestione inline 
e una funzione validator, così si dichiarano anche queste:

<programlisting>
CREATE FUNCTION plperl_inline_handler(internal) RETURNS void AS
    '$libdir/plperl' LANGUAGE C;

CREATE FUNCTION plperl_validator(oid) RETURNS void AS
    '$libdir/plperl' LANGUAGE C;
</programlisting>
     </para>

     <para>
Il comando:
<programlisting>
CREATE TRUSTED PROCEDURAL LANGUAGE plperl
    HANDLER plperl_call_handler
    INLINE plperl_inline_handler
    VALIDATOR plperl_validator;
</programlisting>
quindi definire che le funzioni dichiarate precedentemente 
dovrebbero essere invocate per le funzioni e le procedure trigger dove 
l'attributo linguaggio è <literal>plperl</literal>.
     </para>
  </example>

   <para>
In una installazione predefinita di <productname>PostgreSQL</productname>,
il gestore per il linguaggio <application>PL/pgSQL</application>
è compilato e installato nella directory <quote>library</quote>;
inoltre, il linguaggio <application>PL/pgSQL</application> stesso
vine installato in tutti i database.
Se il supporto a <application>Tcl</application> è configurato, i gestori per 
<application>PL/Tcl</application> and <application>PL/TclU</application> sono compilati e installati
nella directory library, ma il linguaggio stesso non viene installato in nessun
database in maniera predefinita.
Ugualmente, i gestori di  <application>PL/Perl</application> e <application>PL/PerlU</application>
sono compilati e installati se il supporto Perl è configurato, e il gestore 
<application>PL/PythonU</application> viene installato se il supporto a Python è configurato,
ma questi linguaggi non sono installati in modo predefinito.
   </para>

  </sect1>

</chapter>
