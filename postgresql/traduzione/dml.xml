<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

<chapter id="dml">
 <title>Manipolazione dei dati</title>

 <remark>
  Questo capitolo è  ancora abbastanza incompleto.
 </remark>

 <para>
  Il capitolo precedente ha discusso come creare le tabelle e le altre strutture
  che dovranno contenere i vostri dati. Ora è il momento di riempire le
  tabelle con i dati. Questo capitolo spiega come inserire, aggiornare e cancellare
  i dati nelle tabelle. Il capitolo successivo a questo spiegherà infine come estrarre
  dal database i vostri dati persi da tempo.
 </para>

 <sect1 id="dml-insert">
  <title>Inserimento dati</title>

  <indexterm zone="dml-insert">
   <primary>inserimento</primary>
  </indexterm>

  <indexterm zone="dml-insert">
   <primary>INSERT</primary>
  </indexterm>

  <para>
   Quando viene creata una tabella, essa non contiene dati. La prima cosa
   da fare prima di utilizzare un database è di inserire i dati. I dati sono
   concettualmente inseriti una riga per volta. Naturalmente è possibile
   inserire più di una riga, ma non è possibile inserire meno di una
   riga alla volta. Anche se si conoscono solo i valori di alcune colonne, deve essere
   creata una riga completa.
  </para>

  <para>
   Per creare una nuova riga, usare il comando <xref linkend="sql-insert"
   endterm="sql-insert-title" />. Il comando richiede il nome
   della tabella e un valore per ognuna delle colonne della tabella. Per
   esempio, considerate la tabella prodotti del <xref linkend="ddl" />:
<programlisting>
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric
);
</programlisting>
   Un comando di esempio per l'inserimento di una riga potrebbe essere:
<programlisting>
INSERT INTO products VALUES (1, 'Cheese', 9.99);
</programlisting>
   I valori dei dati sono elencati nell'ordine nel quale compaiono nella
   tabella, separati da virgole. Normalmente, i valori dei dati saranno
   letterali (costanti), ma sono anche consentite espressioni scalari.
  </para>

  <para>
   La sintassi vista sopra ha lo svantaggio che è necessario conoscere
   l'ordine delle colonne nella tabella. Per evitare questo è possibile
   elencare le colonne esplicitamente. Per esempio, ambedue i seguenti comandi
   hanno lo stesso effetto del comando visto sopra:
<programlisting>
INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', 9.99);
INSERT INTO products (name, price, product_no) VALUES ('Cheese', 9.99, 1);
</programlisting>
   Molti utenti considerano un buon metodo elencare sempre i nomi delle
   colonne.
  </para>

  <para>
   Se non avete i valori per tutte le colonne, potete omettere alcuni di essi.
   In questo caso, le colonne saranno riempite con i loro valori predefiniti.
   Per esempio:
<programlisting>
INSERT INTO products (product_no, name) VALUES (1, 'Cheese');
INSERT INTO products VALUES (1, 'Cheese');

</programlisting>
   La seconda forma è una estensione di <productname>PostgreSQL</productname>.
   Essa riempie le colonne da sinistra a destra nello stesso ordine in cui
   sono state fornite, e il resto sarà riempito con i valori predefiniti.
  </para>

  <para>
   Per chiarezza, è anche possibile richiedere esplicitamente i
   valori predefiniti, per singole colonne o per l'intera riga:
<programlisting>

INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', DEFAULT);
INSERT INTO products DEFAULT VALUES;

</programlisting>
  </para>

  <para>
   Potete inserire righe multiple con un singolo comando:
<programlisting>

INSERT INTO products (product_no, name, price) VALUES
    (1, 'Cheese', 9.99),
    (2, 'Bread', 1.99),
    (3, 'Milk', 2.99);

</programlisting>
  </para>

  <tip>
   <para>
    Quando inserite molti dati nello stesso tempo, considerate l'uso
    del comando <xref linkend="sql-copy" endterm="sql-copy-title" />.
    Esso non è flessibile come il comando <xref linkend="sql-insert"
    endterm="sql-insert-title" />, ma è molto efficiente. Per ulteriori
    informazioni circa il miglioramento delle prestazioni, per grossi
    caricamenti, vedere dentro <xref linkend="populate" />.
   </para>
  </tip>
 </sect1>

 <sect1 id="dml-update">
  <title>Aggiornamento dati</title>

  <indexterm zone="dml-update">
   <primary>aggiornamento</primary>
  </indexterm>

  <indexterm zone="dml-update">
   <primary>UPDATE</primary>
  </indexterm>

  <para>
   La modifica dei dati che sono già presenti nel database si
   identifica come aggiornamento. Potete aggiornare righe individuali, tutte le
   righe in una tabella, o un sottoinsieme di tutte le righe. Ogni colonna può essere
   aggiornata separatamente; le altre colonne non sono interessate.
  </para>

  <para>
   Per effettuare un aggiornamento, avete bisogno di tre informazioni:
   <orderedlist spacing="compact">
    <listitem>
     <para>Il nome della tabella e della colonna da aggiornare,</para>
    </listitem>

    <listitem>
     <para>Il nuovo valore della colonna,</para>
    </listitem>

    <listitem>
     <para>Quale riga o righe aggiornare.</para>
    </listitem>
   </orderedlist>
  </para>

  <para>
   Ricordarsi dal <xref linkend="ddl" /> che SQL, in generale, non
   fornisce un identificatore unico per le righe. Di conseguenze, non
   è possibile specificare direttamente quale riga aggiornare.
   Dovete, invece, specificare quali condizioni una riga deve soddisfare
   per essere aggiornata. Solo se avete nella tabella una chiave primaria (non importa
   se l'avete dichiarata oppure no) potete indirizzare individualmente le righe,
   scegliendo una condizione che uguaglia la chiave primaria.
   Gli strumenti di accesso ai database grafici contano su questo fatto per consentirvi di
   aggiornare le righe individualmente.
  </para>

  <para>
   Per esempio, questo comando aggiorna tutti i prodotti che hanno un prezzo di 5
   portandolo a 10:
<programlisting>
UPDATE products SET price = 10 WHERE price = 5;
</programlisting>
    Questo comando può causare l'aggiornamento di zero, uno, o più righe. Non è
    un errore tentare un aggiornamento che non soddisfa nessuna riga.
  </para>

  <para>
   Guardiamo il comando in dettaglio. In testa c'è la parola chiave 
   <literal>UPDATE</literal> seguita dal nome della tabella. Come di consueto,
   il nome della tabella può essere qualificato con schema, altrimenti viene cercato
   nel percorso. Dopo c'è la parola chiave <literal>SET</literal> seguita
   dal nome della colonna, un segno uguale ed il nuovo valore della colonna. Il
   nuovo valore della colonna può essere una espressione scalare, non solo una costante.
   Per esempio, se volete incrementare il prezzo di tutti i prodotti del 10%
   dovrete usare:
<programlisting>
UPDATE products SET price = price * 1.10;
</programlisting>
   Come potete vedere, l'espressione relativa al nuovo valore può far riferimento ai valori
   esistenti nelle righe. Non è stata utilizzata la clausula <literal>WHERE</literal>.
   Se è stata omessa, significa che tutte le righe della tabella verranno aggiornate.
   Se è presente, solo le righe che soddisfano la condizione <literal>WHERE</literal>
   verranno aggiornate. Notare che il segno uguale nella clausula <literal>SET</literal> è
   un'assegnazione mentre lo stesso segno uguale nella clausula <literal>WHERE</literal> è
   un confronto, ma questo non crea nessuna ambiguità. Naturalmente, la condizione
   <literal>WHERE</literal> non deve essere usata come test di uguaglianza. Per fare questo sono
   disponibili molti altri operatori (vedere il <xref linkend="functions" />). Ma l'espressione
   deve portare a valutare un risultato di tipo Booleano.
  </para>

  <para>
   Potete aggiornare più di una colonna in un comando
   <command>UPDATE</command> inserendo più di un assegnamento
   nella clausula <literal>SET</literal>. Per esempio:
<programlisting>
UPDATE miatabella SET a = 5, b = 3, c = 1 WHERE a &gt; 0;
</programlisting>
  </para>
 </sect1>

 <sect1 id="dml-delete">
  <title>Cancellazione dati</title>

  <indexterm zone="dml-delete">
   <primary>cancellare</primary>
  </indexterm>

  <indexterm zone="dml-delete">
   <primary>DELETE</primary>
  </indexterm>

  <para>
   Fino ad ora abbiamo spiegato come aggiungere i dati nelle tabella e come
   cambiarli. Rimane da vedere come rimuovere dati che non sono più
   necessari. Come per l'aggiunta dei dati, questo è possibile solamente
   per la riga intera, potete rimuovere solo righe intere da una tabella. Nella precedente
   sezione abbiamo spiegato che SQL non fornisce un modo per indirizzare direttamente
   righe individuali. Di conseguenza, le righe possono essere rimosse solamente specificando
   le condizioni che dovranno soddisfare. Potrete specificare una riga esatta
   da rimuovere solamente se nella tabella avete una chiave primaria. Ma potrete anche
   rimuovere gruppi di righe che soddisfano una condizione, o potrete rimuovere completamente
   tutte le righe di una tabella.
  </para>

  <para>
   Per rimuovere le righe potete usare il comando
   <xref linkend="sql-delete" />; La sintassi è molto simile
   al comando <command>UPDATE</command>. Per esempio, per rimuovere tutte le
   righe che hanno un prezzo di 10 dalla tabella prodotti, usare:
<programlisting>
DELETE FROM products WHERE price = 10;
</programlisting>
  </para>

  <para>
   Se scrivete semplicemente:
<programlisting>
DELETE FROM products;
</programlisting>
   verranno cancellate tutte le righe della tabella! Avvertenza per i programmatori.
  </para>
 </sect1>
</chapter>

