<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

 <chapter id="tutorial-start">
  <title>Cominciare</title>

  <sect1 id="tutorial-install">
   <title>Installazione</title>

   <para>
Prima di usare bisogna installarlo, ovviamente.
È possibile che <productname>PostgreSQL</productname> sia già installato, 
sia perchè è già incluso nella distribuzione del proprio sistema operativo,
sia che l'amministratore di sistema lo abbia già installato.
Se ci so trova nel secondo caso, si dovrebbero ottenere inromazioni 
dalla documentzione del sistema operativo o dall'amministratore di distema 
su come avere accesso a <productname>PostgreSQL</productname>.
   </para>

   <para>
Se non si è sicuri che <productname>PostgreSQL</productname>
sia già disponibile o che lo possiate utilizzare per sperimentazioni
allora è possibile installarlo. Non è difficile farlo
e può essere un buon esercizio.
<productname>PostgreSQL</productname> può essere installato da un utente 
non provolegiato; Non è richiesto l'accesso superutente (<systemitem>root</systemitem>).
   </para>

   <para>
Se si sta installando <productname>PostgreSQL</productname>
da soli, allora riferirsi a <xref linkend="installation"/>
per istruzioni sull'installazione, e tornare a questa guida quando 
l'installazione è completata. 
Assicurarsi di seguire alla lettera la sezione sull'impostazione delle variabili d'ambiente 
appropriate.
   </para>

   <para>
Se l'amministratore del proprio sito non ha impostato le cose nel modo predefinito,
si potrebbe aver bisogno di fare del lavoro in più. Per esempio, se la 
macchina del server database è remota, si dovrà impostare la variabile d'ambiente
<envar>PGHOST</envar> al nome della macchina su cui gira il server database.
Potrebbe essere necessario impostare anche la variabile d'ambiente <envar>PGPORT</envar>. 
Un ultima cosa: se si prova ad avviare un'applicazione ed essa si lamenta
che non possa connettersi al database, si dovrebbe consultare l'amministratore del sito o,
se lo siete voi stessi, la documentazione per essere sicuri che il proprio ambiente sia
impostato in modo appropriato. Se non si è capito il paragrafo precedente 
allora leggere la prossima sezione.
   </para>
  </sect1>


  <sect1 id="tutorial-arch">
   <title>Fondamenti sull'architettura</title>


   <para>
Prima di procedere, si dovrebbe comprendere l'architettura di base del sistema
<productname>PostgreSQL</productname>.
Capire come interagiscono le parti di <productname>PostgreSQL</productname> 
renderà questo capitolo un po' più chiaro.
   </para>

   <para>
Nel gergo dei database,  <productname>PostgreSQL</productname> usa un modello
client/server. Una sessione  <productname>PostgreSQL</productname>
consiste dei seguenti processi cooperanti (programmi):

    <itemizedlist>
     <listitem>
      <para>
Un processo server, che gestisce i file del database, accetta 
connessioni al database da applicazioni client, ed esegue azioni 
per mezzo dei client. Il programma server è chiamato <filename>postgres</filename>.
       <indexterm><primary>postgres</primary></indexterm>
      </para>
     </listitem>

     <listitem>
      <para>
      <warning><para>TODO</para></warning>
       The user's client (frontend) application that wants to perform
       database operations.  Client applications can be very diverse
       in nature:  a client could be a text-oriented tool, a graphical
       application, a web server that accesses the database to
       display web pages, or a specialized database maintenance tool.
       Some client applications are supplied with the
       <productname>PostgreSQL</productname> distribution; most are
       developed by users.
      </para>
     </listitem>

    </itemizedlist>
   </para>

   <para>
Come tipico delle applicazioni client/server, il client e il server 
possono essere su host diversi. In quel caso comunicano attraverso
una connessione di rete TCP/IP. Si dovrebbe tenere a mente questo,
dato che i file a cui si ha accesso sulla macchina client potrebbero
non essere accessibili 
sulla macchina server (o potrebbero essere accessibili solo usando un nome diverso).
   </para>

   <para>
Il server <productname>PostgreSQL</productname> può gestire 
connessioni multiple concorrenti dai client. Per realizzare ciò 
il server avvia (<quote>forka</quote>) un nuovo processo per ogni connessione.
Da quel punto in poi, il client e il nuovo processo server comunicano
senza intervento del processo <filename>postgres</filename> originale.
Così, il processo server "master" è sempre in esecuzione, aspettando 
connessioni dai client, mentre i processi client e server associato  
vanno avanti. (Tutto questo è, ovviamente, invisibile all'utente. È stato
menzionato qui solo per completezza.)
   </para>
  </sect1>


  <sect1 id="tutorial-createdb">
   <title>Creare un database</title>

   <indexterm zone="tutorial-createdb">
    <primary>database</primary>
    <secondary>creating</secondary>
   </indexterm>

   <indexterm zone="tutorial-createdb">
    <primary>createdb</primary>
   </indexterm>

   <para>
La prima prova per vedere se si ha accesso al server database
è provare a creare un database. Un server <productname>PostgreSQL</productname>  
in esecuzione può gestire molti database.
Tipicamente, viene usato un database separato per ogni progetto o per 
ogni utente.
   </para>

   <para>
Possibilmente, l'amministratore del vostro sito ha già creato un database
per il vostro uso. Dovrebbe aver comunicato il nome del vostro database.
In quel caso si può evitare questo passo e saltare alla prossima sezione.
   </para>

   <para>
    To create a new database, in this example named
Per creare un nuovo database, in questo esempio chiamato
    <literal>mydb</literal>, usare il seguente comando:
<screen>
<prompt>$</prompt> <userinput>createdb mydb</userinput>
</screen>
Se questo non produce risposta allora questo passo ha avuto successo e si può saltare 
il resto di questa sezione.
   </para>

   <para>
Se si ottiene un messaggio simile a:
<screen>
createdb: command not found
</screen>
allora <productname>PostgreSQL</productname> non è stato installato bene. O non è stato
installato per niente o il percorso di ricerca della shell 
non è stato impostato per includerlo.
Provare a lanciare il comando con un percorso assoluto: 
<screen>
<prompt>$</prompt> <userinput>/usr/local/pgsql/bin/createdb mydb</userinput>
</screen>
Il percorso potrebbe essere diverso. Contattare l'amministratore del proprio sito 
o controllare le istruzioni di installazione per correggere la situazione.
   </para>

   <para>
    Another response could be this:
<screen>
createdb: could not connect to database postgres: could not connect to server: No such file or directory
        Is the server running locally and accepting
        connections on Unix domain socket "/tmp/.s.PGSQL.5432"?
</screen>
    This means that the server was not started, or it was not started
    where <command>createdb</command> expected it.  Again, check the
    installation instructions or consult the administrator.
   </para>

   <para>
    Another response could be this:
<screen>
createdb: could not connect to database postgres: FATAL:  role "joe" does not exist
</screen>
    where your own login name is mentioned.  This will happen if the
    administrator has not created a <productname>PostgreSQL</productname> user account
    for you.  (<productname>PostgreSQL</productname> user accounts are distinct from
    operating system user accounts.)  If you are the administrator, see
    <xref linkend="user-manag"/> for help creating accounts.  You will need to
    become the operating system user under which <productname>PostgreSQL</productname>
    was installed (usually <literal>postgres</literal>) to create the first user
    account.  It could also be that you were assigned a
    <productname>PostgreSQL</productname> user name that is different from your
    operating system user name; in that case you need to use the <option>-U</option>
    switch or set the <envar>PGUSER</envar> environment variable to specify your
    <productname>PostgreSQL</productname> user name.
   </para>

   <para>
    If you have a user account but it does not have the privileges required to
    create a database, you will see the following:
<screen>
createdb: database creation failed: ERROR:  permission denied to create database
</screen>
    Not every user has authorization to create new databases.  If
    <productname>PostgreSQL</productname> refuses to create databases
    for you then the site administrator needs to grant you permission
    to create databases.  Consult your site administrator if this
    occurs.  If you installed <productname>PostgreSQL</productname>
    yourself then you should log in for the purposes of this tutorial
    under the user account that you started the server as.

    <footnote>
     <para>
      As an explanation for why this works:
      <productname>PostgreSQL</productname> user names are separate
      from operating system user accounts.  When you connect to a
      database, you can choose what
      <productname>PostgreSQL</productname> user name to connect as;
      if you don't, it will default to the same name as your current
      operating system account.  As it happens, there will always be a
      <productname>PostgreSQL</productname> user account that has the
      same name as the operating system user that started the server,
      and it also happens that that user always has permission to
      create databases.  Instead of logging in as that user you can
      also specify the <option>-U</option> option everywhere to select
      a <productname>PostgreSQL</productname> user name to connect as.
     </para>
    </footnote>
   </para>

   <para>
    You can also create databases with other names.
    <productname>PostgreSQL</productname> allows you to create any
    number of databases at a given site.  Database names must have an
    alphabetic first character and are limited to 63 characters in
    length.  A convenient choice is to create a database with the same
    name as your current user name.  Many tools assume that database
    name as the default, so it can save you some typing.  To create
    that database, simply type:
<screen>
<prompt>$</prompt> <userinput>createdb</userinput>
</screen>
   </para>

   <para>
    If you do not want to use your database anymore you can remove it.
    For example, if you are the owner (creator) of the database
    <literal>mydb</literal>, you can destroy it using the following
    command:
<screen>
<prompt>$</prompt> <userinput>dropdb mydb</userinput>
</screen>
    (For this command, the database name does not default to the user
    account name.  You always need to specify it.)  This action
    physically removes all files associated with the database and
    cannot be undone, so this should only be done with a great deal of
    forethought.
   </para>

   <para>
    More about <command>createdb</command> and <command>dropdb</command> can
    be found in <xref linkend="app-createdb"/> and <xref linkend="app-dropdb"/>
    respectively.
   </para>
  </sect1>


  <sect1 id="tutorial-accessdb">
   <title>Accessing a Database</title>

   <indexterm zone="tutorial-accessdb">
    <primary>psql</primary>
   </indexterm>

   <para>
    Once you have created a database, you can access it by:

    <itemizedlist spacing="compact" mark="bullet">
     <listitem>
      <para>
       Running the <productname>PostgreSQL</productname> interactive
       terminal program, called <application><firstterm>psql</firstterm></application>, which allows you
       to interactively enter, edit, and execute
       <acronym>SQL</acronym> commands.
      </para>
     </listitem>

     <listitem>
      <para>
       Using an existing graphical frontend tool like
       <application>pgAdmin</application> or an office suite with
       <acronym>ODBC</acronym> or <acronym>JDBC</acronym> support to create and manipulate a
       database.  These possibilities are not covered in this
       tutorial.
      </para>
     </listitem>

     <listitem>
      <para>
       Writing a custom application, using one of the several
       available language bindings.  These possibilities are discussed
       further in <xref linkend="client-interfaces"/>.
      </para>
     </listitem>
    </itemizedlist>

    You probably want to start up <command>psql</command> to try
    the examples in this tutorial.  It can be activated for the
    <literal>mydb</literal> database by typing the command:
<screen>
<prompt>$</prompt> <userinput>psql mydb</userinput>
</screen>
    If you do not supply the database name then it will default to your
    user account name.  You already discovered this scheme in the
    previous section using <command>createdb</command>.
   </para>

   <para>
    In <command>psql</command>, you will be greeted with the following
    message:
<screen>
psql (&version;)
Type "help" for help.
 
mydb=&gt;
</screen>
    <indexterm><primary>superuser</primary></indexterm>
    The last line could also be:
<screen>
mydb=#
</screen>
    That would mean you are a database superuser, which is most likely
    the case if you installed <productname>PostgreSQL</productname>
    yourself.  Being a superuser means that you are not subject to
    access controls.  For the purposes of this tutorial that is not
    important.
   </para>

   <para>
    If you encounter problems starting <command>psql</command>
    then go back to the previous section.  The diagnostics of
    <command>createdb</command> and <command>psql</command> are
    similar, and if the former worked the latter should work as well.
   </para>

   <para>
    The last line printed out by <command>psql</command> is the
    prompt, and it indicates that <command>psql</command> is listening
    to you and that you can type <acronym>SQL</acronym> queries into a
    work space maintained by <command>psql</command>.  Try out these
    commands:
    <indexterm><primary>version</primary></indexterm>
<screen>
<prompt>mydb=&gt;</prompt> <userinput>SELECT version();</userinput>
                               version
 -----------------------------------------------------------------------
 PostgreSQL &version; on i586-pc-linux-gnu, compiled by GCC 2.96, 32-bit
(1 row)

<prompt>mydb=&gt;</prompt> <userinput>SELECT current_date;</userinput>
    date
------------
 2002-08-31
(1 row)

<prompt>mydb=&gt;</prompt> <userinput>SELECT 2 + 2;</userinput>
 ?column?
----------
        4
(1 row)
</screen>
   </para>

   <para>
    The <command>psql</command> program has a number of internal
    commands that are not SQL commands.  They begin with the backslash
    character, <quote><literal>\</literal></quote>.
    For example,
    you can get help on the syntax of various
    <productname>PostgreSQL</productname> <acronym>SQL</acronym>
    commands by typing:
<screen>
<prompt>mydb=&gt;</prompt> <userinput>\h</userinput>
</screen>
   </para>

   <para>
    To get out of <command>psql</command>, type:
<screen>
<prompt>mydb=&gt;</prompt> <userinput>\q</userinput>
</screen>
    and <command>psql</command> will quit and return you to your
    command shell. (For more internal commands, type
    <literal>\?</literal> at the <command>psql</command> prompt.)  The
    full capabilities of <command>psql</command> are documented in
    <xref linkend="app-psql"/>.  If <productname>PostgreSQL</productname> is
    installed correctly you can also type <literal>man psql</literal>
    at the operating system shell prompt to see the documentation.  In
    this tutorial we will not use these features explicitly, but you
    can use them yourself when it is helpful.
   </para>

  </sect1>
 </chapter>
