<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

 <chapter id="triggers">
  <title>Trigger</title>

  <indexterm zone="triggers">
   <primary>trigger</primary>
  </indexterm>

  <para>
Questo capitolo fornisce informazioni generali sulla scrittura di funzioni trigger.
Le funzioni trigger possono essere scritte nella maggior parte dei linguaggi procedurali,
inclusi
<application>PL/pgSQL</application> (<xref linkend="plpgsql"/>),
<application>PL/Tcl</application> (<xref linkend="pltcl"/>),
<application>PL/Perl</application> (<xref linkend="plperl"/>), e
<application>PL/Python</application> (<xref linkend="plpython"/>).
Dopo aver letto questo capitolo, si dovrebbe consultare il capitolo riguardante
il linguaggio procedurale preferito per scoprire i dettagli specifici del linguaggio
e come usarlo per scrivere un trigger.
  </para>

  <para>
È anche possibile scrivere una funzione trigger in C, sebbene la maggior parte delle  
persone trova più semplice usare uno dei linguaggi procedurali. 
Attualmente non è possibile scrivere una funzione trigger utilizzando il  linguaggio funzionale SQL.
  </para>

  <sect1 id="trigger-definition">
   <title>Panoramica del comportamento dei trigger</title>

   <para>
Un trigger è una specifica che indica che il database dovrebbe eseguire automaticamente 
una funzione particolare ogni volte che un certo tipo di operazione viene svolta.
I trigger possono essere definiti per essere eseguiti sia prima che dopo qualsiasi operazione  
<command>INSERT</command>, <command>UPDATE</command>, o
<command>DELETE</command>, sia una volta per ogni riga modificata,
sia una volta per ogni funzione <acronym>SQL</acronym>.
I trigger <command>UPDATE</command> possono inoltre essere impostati per attivarsi solo 
se certe colonne sono menzionate nella clausola <literal>SET</literal> dell'istruzione 
<command>UPDATE</command>.
I trigger possono anche attivarsi per istruzioni <command>TRUNCATE</command>.
Se si manifesta un evento trigger, la funzione trigger viene chiamata nel momento opportuno 
per gestire l'evento.
   </para>

   <para>
La funzione trigger deve essere definita prima che il trigger stesso possa essere creato.
La funzione trigger dev'essere dichiarata come una funzione che non prende
argomenti e che restituisce il tipo <literal>trigger</literal>.
(La funzione trigger riceve il suo input attraverso una struttura <structname>TriggerData</structname> 
passata in modo speciale, non nella forma degli argomenti normali di funzione).
   </para>

   <para>
Una volte che una funzione trigger adatta è stata creata, il trigger è
definito con
<xref linkend="sql-createtrigger"/>.
La stessa funzione trigger può essere usata per molteplici trigger.
   </para>

   <para>
<productname>PostgreSQL</productname> offre sia trigger <firstterm>per-riga</firstterm>
che trigger <firstterm>per-istruzione</firstterm>. Con un trigger per-riga, 
la funzione trigger viene invocata una volta per ogni riga che è coinvolta 
dall'istruzione che ha lanciato il trigger. Al contrario, un trigger per-istruzione
viene invocato solo una volta quando un'istruzione adatta viene eseguita,
a prescindere dal numero di righe coinvolte dall'istruzione. In particolare,
un'istruzione che coinvolge zero righe risulterà comunque nell'esecuzione
di qualsiasi trigger per-istruzione applicabile. Questi due tipi 
di tipi di trigger a volte vengono chiamati rispettivamente trigger <firstterm>a livello di riga</firstterm>
e trigger <firstterm>a livello di funzione</firstterm>.
I trigger sul <command>TRUNCATE</command> possono essere definiti solo 
a livello di istruzione.
   </para>

   <para>
I trigger vengono classificati anche come trigger <firstterm>before</firstterm> e 
trigger <firstterm>after</firstterm>.
I trigger before a livello di istruzione naturalmente si attivano prima 
che l'istruzione cominci a fare qualsiasi cosa, mentre i trigger after 
a livello di istruzione si attivano alla reale fine dell'istruzione. I trigger
before a livello di riga si attivano immediatamente prima si operi su una riga,
mentre i trigger after a livello di riga si attivano alla fine dell'istruzione
(ma prima di qualsiasi trigger after a livello di istruzione).
   </para>

   <para>
Le funzioni trigger invocate dai trigger per instruzione dovrebbero sempre 
ritornare <symbol>NULL</symbol>. Le funzioni trigger invocate da trigger 
per riga possono ritornare una riga di tabella (un valore di
tipo <structname>HeapTuple</structname>), se vogliono.
Un trigger a livello di riga attivato prima di un'operazione ha le seguenti possibilità:

    <itemizedlist>
     <listitem>
      <para>
Può ritornare <symbol>NULL</symbol> per saltare l'operazione per la riga corrente.
Questo istruisce l'esecutore a non svolgere l'operazione a livello di riga 
che ha invocato il trigger (l'inserimento o la modifica
di una particolare riga di tabella).
      </para>
     </listitem>

     <listitem>
      <para>
Solo per trigger <command>INSERT</command> e <command>UPDATE</command>
a livello di riga, la riga ritornata
diventa la riga che sarà inserita o rimpiazzerà la riga che è stata aggiornata.
Questo permette  che la funzione trigger modifichi la riga che è 
stata inserita o aggiornata.
      </para>
     </listitem>
    </itemizedlist>

Un trigger before a livello di riga che non intende causare nessuno di questi 
comportamenti deve far attenzione a restituire come suo risultato la stessa
riga che gli è stata passata (cioè, la riga <varname>NEW</varname>
per i trigger <command>INSERT</command> e <command>UPDATE</command>,
la riga  <varname>OLD</varname> per i trigger 
<command>DELETE</command>).
   </para>

   <para>
Il valore di ritorno viene ignorato per trigger a livello di riga attivati dopo 
un operazione, e quindi possono ritornare <symbol>NULL</symbol>.
   </para>

   <para>
Se è definito più di un trigger per lo stesso evento sulla stessa relazione,
i trigger saranno attivati in ordine alfabetico per nome del trigger.
Nel caso di trigger before, la riga restituita possibilmente-modificata
da ogni trigger diventa l'input del prossimo trigger. Se qualunque
dei trigger before ritorna <symbol>NULL</symbol>, l'operazione 
viene abbandonata per quella riga e i trigger successivi non vengono attivati.
   </para>

   <para>
La definizione di un trigger può anche specificare una condizione booleana <literal>WHEN</literal>,
che sarà testata per vedere se il trigger dovrebbe essere attivato.
Nei trigger a livello di riga la condizione <literal>WHEN</literal> può esaminare 
i valori vecchi e/o nuovi delle colonne della riga. (I trigger a livello di istruzione
possono anche avere condizioni <literal>WHEN</literal>, anche se la caratteristica
non gli è utile). In un trigger before, la condizione <literal>WHEN</literal>
viene valutata appena prima che la funzione venga o verrebbe eseguita,
per questo usare <literal>WHEN</literal> in pratica non è differente da testare 
la stessa condizione all'inizio della funzione trigger. Comunque, in un trigger after,
la condizione <literal>WHEN</literal> viene valutata appena dopo 
che avvenga l'aggiornamento della riga, e determina se un evento viene messo in coda per 
attivare il trigger alla fine dell'istruzione. Per questo quando la condizione 
<literal>WHEN</literal> del trigger non ritorna true, non è necessario 
mettere in coda un evento e nemmeno ri-ottenere la riga alla fine dell'istruzione. Questo 
può risultare in significative velocizzazioni di instruzioni che modificano molte
righe, se il trigger necessita di essere attivato solo per poche righe.
   </para>

   <para>
Tipicamente, i trigger before a livello di riga sono usati per controllare o
modificare i dati che saranno inseriti o aggiornati. Per esempio,
un trigger before potrebbe essere usato per inserire l'orario corrente in una 
colonna <type>timestamp</type>, o per controllare che due elementi della riga siano
consistenti. I trigger after a livello di riga sono i più usati per 
propagare gli aggiornamenti ad altre tabelle, o per fare controlli di consistenza
rispetto ad altre tabelle. La ragione per questa divisione del lavoro è che 
un trigger after può essere certo che sta vedendo il valore finale della riga,
mentre un trigger before non può; ci potrebbero essere altri trigger before 
che si attivano dopo. Se non si hanno ragioni specifiche per realizzare un trigger befor o after,
la modalità before è più efficiente, dato che l'informazione sull'operazione
non deve essere salvata fino alla fine dell'istruzione.
   </para>

   <para>
Se una funzione trigger esegue comandi SQL allora questi comandi
potrebbero attivare altri trigger. Questi sono conosciuti come 
trigger in cascata. Non c'è una limitazione diretta sul numero di livelli in cascata.
È possibile causare un'invocazione ricorsiva dello stesso trigger;
per esempio, un trigger <command>INSERT</command>
potrebbe eseguire un comando che inserisce una riga addizionale
nella stessa tabella, causando l'ulteriore attivazione del trigger <command>INSERT</command>.
È responsabilità del programmatore di trigger
escludere le ricursioni infinite in tali scenari.
   </para>

   <para>
Quando si definisce un trigger, gli si possono specificare degli argomenti.
<indexterm><primary>trigger</primary><secondary>argomenti per funzioni trigger</secondary></indexterm> 
Lo scopo di includere argomenti nella definizione del trigger
è di permette che trigger diversi con requisiti simili
chiamino la stessa funzione. Come esempio, ci potrebbe essere
una funzione trigger generalizzata che prende come argomenti
due nomi di colonna e mette l'utente corrente in una e il timestap corrente 
nell'altra. Se scritta correttamente, questa funzione trigger    
sarà indipendente della specifica tabella su cui sta "triggerando".
Per questo la stessa funzione potrebbe essere usata per eventi 
<command>INSERT</command> su ogni tabella con colonne adatte,
per esempio 
per tenere traccia automaticamente della creazione di record in una 
tabella di transazione. Può essere anche usata per tenere traccia
degli eventi aggiornati per ultimi se definito come trigger <command>UPDATE</command>.
   </para>

   <para>
Ogni linguaggio di programmazione che supporta i trigger ha i propri metodi
per rendere i dati in input al trigger disponibili alla funzione trigger.
Questi dati in input includono il tipo dell'evento trigger (per es.,
<command>INSERT</command> o <command>UPDATE</command>) così come qualsiasi
argomento elencato in <command>CREATE TRIGGER</command>.
Per un trigger a livello di riga, i dati in input includono anche 
la riga  <varname>NEW</varname> per trigger <command>INSERT</command> e 
<command>UPDATE</command>, e/o la riga <varname>OLD</varname>
per trigger <command>UPDATE</command> e <command>DELETE</command>.
I trigger a livello di istruzione non hanno attualmente nessuna possibilità di 
esaminare la riga/e individuale modificata dall'istruzione.
   </para>

  </sect1>

  <sect1 id="trigger-datachanges">
   <title>Visibilità del cambiamento dei dati</title>

   <para>
Se si eseguono comandi SQL nella funzione trigger, e questi comandi
accedono alla tabella su cui è il trigger, allora si deve stare attenti 
alle regole di visibilità dei dati, dato che esse determinano 
se questi comandi SQL vedranno il cambiamento dei dati su cui è attivo il trigger.
Brevemente:

    <itemizedlist>

     <listitem>
      <para>
I trigger a livello di istruzione seguono regole di visibilità semplici: 
nessuno dei cambiamenti fatti da un'istruzione è visibile ai trigger a livello di  
istruzione che sono invocati prima dell'istruzione, mentre tutte le
modifiche sono visibili ai trigger after a livello di istruzione.
      </para>
     </listitem>

     <listitem>
      <para>
Il cambiamento dei dati (inserimento, aggiornamento o cancellazione) provoca
che il trigger da attivare <emphasis>non</emphasis> sia naturalmente visibile
ai comandi SQL eseguiti in un trigger before a livello di riga, dato che non è ancora 
accaduto.
      </para>
     </listitem>

     <listitem>
      <para>
Comunque, i comandi SQL eseguiti in un trigger before a livello di riga  
<emphasis>vedranno</emphasis> gli effetti dei cambiamenti ai dati 
per le righe processate precedendemente nello stesso comando esterno.
Questo richiede cautela, dato che l'ordine di questi eventi di modifica non è 
generalmente prevedibile; un comando SQL che coinvolge molteplici righe 
può visitare le righe in qualsiasi ordine.
      </para>
     </listitem>

     <listitem>
      <para>
Quando viene attivato un trigger after a livello di riga, tutti i cambiamenti ai dati
fatti dal comando più esterno sono già completati, e sono visibili alla funzione 
trigger invocata.
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
Se la funzione trigger è scritta in uno qualsiasi dei linguaggi procedurali standard,
allora le istruzioni sopra si applicano solo se la funzione è dichiarata 
<literal>VOLATILE</literal>.  Le funzioni dichiarate 
<literal>STABLE</literal> o <literal>IMMUTABLE</literal> non vedranno cambiamenti fatti dal 
comando chiamante in ogni caso.
   </para>

   <para>
Ulteriori informazioni sulle regole di visibilità dei dati possono essere trovate
in <xref linkend="spi-visibility"/>.   L'esempio in <xref
linkend="trigger-example"/> contiene una dimostrazione di queste regole.
   </para>
  </sect1>

  <sect1 id="trigger-interface">
   <title>Scrivere funzioni trigger in C</title>

   <indexterm zone="trigger-interface">
    <primary>trigger</primary>
    <secondary>in C</secondary>
   </indexterm>

   <para>
Questa sezione descrive i dettagli a basso livello dell'interfaccia verso una 
funzione trigger. Queste informazioni sono necessarie solo quando si scrive una funzione
trigger in C. Se si sta usando un linguaggio di più alto livello allora questi dettagli sono
gestiti per te. Nella maggior parte dei casi di dovrebbe prenderre in considerazione 
l'utilizzo di un linguaggio procedurale prima di scrivere un trigger in C. 
La documentazione di ogni linguaggio procedurale spiega come scrivere un 
trigger in quel linguaggio.
   </para>

   <para>
Le funzioni trigger devono usare l'interfaccia di gestione delle funzioni <quote>version 1</quote>.
   </para>

   <para>
Quando una funzione viene chiamata dal gestore dei trigger, non viene passato  
nessun normale argomento, ma viene passato un puntatore <quote>context</quote> 
che punta a una struttura <structname>TriggerData</structname>. 
Le funzioni C possono controllare se sono state chiamate dal gestore dei trigger 
o no eseguendo la macro:
<programlisting>
CALLED_AS_TRIGGER(fcinfo)
</programlisting>
che si espande in:
<programlisting>
((fcinfo)-&gt;context != NULL &amp;&amp; IsA((fcinfo)-&gt;context, TriggerData))
</programlisting>
Se questo restituisce true, allora è sicuro eseguire un cast
<literal>fcinfo-&gt;context</literal> al tipo <literal>TriggerData
*</literal> ed usare la struttura    
<structname>TriggerData</structname>. La funzione <emphasis>non</emphasis>  deve
modificate la struttura <structname>TriggerData</structname>
o qualsiasi dato a cui punta.
   </para>

   <para>
La struttura <structname>TriggerData</structname> è definita in
    <filename>commands/trigger.h</filename>:

<programlisting>
typedef struct TriggerData
{
    NodeTag       type;
    TriggerEvent  tg_event;
    Relation      tg_relation;
    HeapTuple     tg_trigtuple;
    HeapTuple     tg_newtuple;
    Trigger      *tg_trigger;
    Buffer        tg_trigtuplebuf;
    Buffer        tg_newtuplebuf;
} TriggerData;
</programlisting>

dove i membri sono definiti come segue:

    <variablelist>
     <varlistentry>
      <term><structfield>type</structfield></term>
      <listitem>
       <para>
Sempre <literal>T_TriggerData</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><structfield>tg_event</structfield></term>
      <listitem>
       <para>
Descrive l'evento per il quale la funzione è chiamata. Si possono usare le seguenti macro 
per esaminare <literal>tg_event</literal>:

        <variablelist>
         <varlistentry>
          <term><literal>TRIGGER_FIRED_BEFORE(tg_event)</literal></term>
          <listitem>
           <para>
Restituisce true se il trigger è avvenuto prima dell'operazione.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>TRIGGER_FIRED_AFTER(tg_event)</literal></term>
          <listitem>
           <para>
Restituisce true se il trigger è avvenuto dopo l'operazione.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>TRIGGER_FIRED_FOR_ROW(tg_event)</literal></term>
          <listitem>
           <para>
Restituisce true se il trigger è avvenuto per un evento a livello di riga.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>TRIGGER_FIRED_FOR_STATEMENT(tg_event)</literal></term>
          <listitem>
           <para>
Restituisce true se il trigger è avvenuto per un evento a livello di istruzione.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>TRIGGER_FIRED_BY_INSERT(tg_event)</literal></term>
          <listitem>
           <para>
Restituisce true se il trigger è stato attivato da un comando <command>INSERT</command>. 
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>TRIGGER_FIRED_BY_UPDATE(tg_event)</literal></term>
          <listitem>
           <para>
Restituisce true se il trigger è stato attivato da un comando <command>UPDATE</command>.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>TRIGGER_FIRED_BY_DELETE(tg_event)</literal></term>
          <listitem>
           <para>
Restituisce true se il trigger è stato atttivato da un comando <command>DELETE</command>.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>TRIGGER_FIRED_BY_TRUNCATE(tg_event)</literal></term>
          <listitem>
           <para>
Restituisce true se il trigger è stato attivato da un comando <command>TRUNCATE</command>.
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><structfield>tg_relation</structfield></term>
      <listitem>
       <para>
Un puntatore a una struttura che descrive la relazione per la quale il trigger si è attivato.
Si veda <filename>utils/rel.h</filename> per dettagli su questa 
struttura. Le cose più interessanti sono
<literal>tg_relation-&gt;rd_att</literal> (descrittore delle tuple della relazione)
e <literal>tg_relation-&gt;rd_rel-&gt;relname</literal>
(nome della relazione; il tipo non è <type>char*</type> ma 
<type>NameData</type>; usare 
<literal>SPI_getrelname(tg_relation)</literal> per ottenere un <type>char*</type> se si ha bisogno 
della copia del nome).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><structfield>tg_trigtuple</structfield></term>
      <listitem>
       <para>
Un puntatore alla riga per la quale è stato attivato il trigger. Questa è 
la riga che è stata inserita, aggiornata o cancellata. Se questo trigger
è stato attivato con un <command>INSERT</command> o
<command>DELETE</command> allora questo è quello che si dovrebbe restituire
dalla funzione se non si vuole sostituire la riga  con una diversa
(nel caso di <command>INSERT</command>) o saltare l'operazione.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><structfield>tg_newtuple</structfield></term>
      <listitem>
       <para>
Un puntatore alla nuova versione della riga, se il trigger è stato attivato 
per un <command>UPDATE</command>, e <symbol>NULL</symbol> se
è per un <command>INSERT</command> o un <command>DELETE</command>. 
Questo è quello che si deve restituire dalla funzione se l'evento
è un <command>UPDATE</command> e non si vuole sostituire 
questa riga con una diversa o saltare l'operazione.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><structfield>tg_trigger</structfield></term>
      <listitem>
       <para>
Un puntatore a una struttura di tipo <structname>Trigger</structname>,
definita in <filename>utils/rel.h</filename>:

<programlisting>
typedef struct Trigger
{
    Oid         tgoid;
    char       *tgname;
    Oid         tgfoid;
    int16       tgtype;
    bool        tgenabled;
    bool        tgisinternal;
    Oid         tgconstrrelid;
    Oid         tgconstrindid;
    Oid         tgconstraint;
    bool        tgdeferrable;
    bool        tginitdeferred;
    int16       tgnargs;
    int16       tgnattr;
    int16      *tgattr;
    char      **tgargs;
    char       *tgqual;
} Trigger;
</programlisting>

dove <structfield>tgname</structfield> è il nome del trigger,
<structfield>tgnargs</structfield> è il numero di argomenti in 
<structfield>tgargs</structfield>, e <structfield>tgargs</structfield> è un array di 
puntatori agli argomenti specificati nell'istruzione <command>CREATE
TRIGGER</command>. Gli altri membri sono solo per uso interno.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><structfield>tg_trigtuplebuf</structfield></term>
      <listitem>
       <para>
Il buffer contenente <structfield>tg_trigtuple</structfield>, o <symbol>InvalidBuffer</symbol> non c'è
quella tupla o non è salvata in un buffer disco.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><structfield>tg_newtuplebuf</structfield></term>
      <listitem>
       <para>
Il buffer contenente <structfield>tg_newtuple</structfield>, o <symbol>InvalidBuffer</symbol> se non c'è
quella tupla o non è salvata in un buffer disco.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

   <para>
Una funzione trigger deve restituire o un puntatore 
<structname>HeapTuple</structname> o un puntatore <symbol>NULL</symbol>
(<emphasis>non</emphasis> un valore null SQL, cioè, non imposta <parameter>isNull</parameter> a true).
Fare attenzione a restituire o
<structfield>tg_trigtuple</structfield> o <structfield>tg_newtuple</structfield>,
nel modo giusto, se non si vuole modificare la riga sulla quale si è operato.
   </para>
  </sect1>

  <sect1 id="trigger-example">
   <title>Un esempio completo di trigger</title>

   <para>
Ecco un semplice esempio di funzione trigger scritta in C. 
(Esempi di trigger scritti in linguaggi procedurali possono essere trovati
nella documentazione dei linguaggi procedurali).
   </para>

   <para>
La funzione  <function>trigf</function> riporta il numero di righe nella tabella 
<structname>ttest</structname> e salta l'attuale operazione se il comando tenta di inserire 
un valore null nella colonna 
<structfield>x</structfield>. (Per questo il trigger agisce come un vincolo non null ma
non annulla la transione).
   </para>

   <para>
Prima, la definizione della tabella:
<programlisting>
CREATE TABLE ttest (
    x integer
);
</programlisting>
   </para>

   <para>
Questo è il sorgenete della funzione trigger:
<programlisting><![CDATA[
#include "postgres.h"
#include "executor/spi.h"       /* this is what you need to work with SPI */
#include "commands/trigger.h"   /* ... and triggers */

#ifdef PG_MODULE_MAGIC
PG_MODULE_MAGIC;
#endif

extern Datum trigf(PG_FUNCTION_ARGS);

PG_FUNCTION_INFO_V1(trigf);

Datum
trigf(PG_FUNCTION_ARGS)
{
    TriggerData *trigdata = (TriggerData *) fcinfo->context;
    TupleDesc   tupdesc;
    HeapTuple   rettuple;
    char       *when;
    bool        checknull = false;
    bool        isnull;
    int         ret, i;

    /* make sure it's called as a trigger at all */
    if (!CALLED_AS_TRIGGER(fcinfo))
        elog(ERROR, "trigf: not called by trigger manager");

    /* tuple to return to executor */
    if (TRIGGER_FIRED_BY_UPDATE(trigdata->tg_event))
        rettuple = trigdata->tg_newtuple;
    else
        rettuple = trigdata->tg_trigtuple;

    /* check for null values */
    if (!TRIGGER_FIRED_BY_DELETE(trigdata->tg_event)
        && TRIGGER_FIRED_BEFORE(trigdata->tg_event))
        checknull = true;

    if (TRIGGER_FIRED_BEFORE(trigdata->tg_event))
        when = "before";
    else
        when = "after ";

    tupdesc = trigdata->tg_relation->rd_att;

    /* connect to SPI manager */
    if ((ret = SPI_connect()) < 0)
        elog(ERROR, "trigf (fired %s): SPI_connect returned %d", when, ret);

    /* get number of rows in table */
    ret = SPI_exec("SELECT count(*) FROM ttest", 0);

    if (ret < 0)
        elog(ERROR, "trigf (fired %s): SPI_exec returned %d", when, ret);

    /* count(*) returns int8, so be careful to convert */
    i = DatumGetInt64(SPI_getbinval(SPI_tuptable->vals[0],
                                    SPI_tuptable->tupdesc,
                                    1,
                                    &isnull));

    elog (INFO, "trigf (fired %s): there are %d rows in ttest", when, i);

    SPI_finish();

    if (checknull)
    {
        SPI_getbinval(rettuple, tupdesc, 1, &isnull);
        if (isnull)
            rettuple = NULL;
    }

    return PointerGetDatum(rettuple);
}
]]>
</programlisting>
   </para>

   <para>
Dopo che si è compilato il codice sorgenete (si veda <xref
linkend="dfunc"/>), dichiarare la funzione e il trigger:

<programlisting>
CREATE FUNCTION trigf() RETURNS trigger
    AS '<replaceable>filename</replaceable>'
    LANGUAGE C;

CREATE TRIGGER tbefore BEFORE INSERT OR UPDATE OR DELETE ON ttest
    FOR EACH ROW EXECUTE PROCEDURE trigf();

CREATE TRIGGER tafter AFTER INSERT OR UPDATE OR DELETE ON ttest
    FOR EACH ROW EXECUTE PROCEDURE trigf();
</programlisting>
   </para>

   <para>
Adesso è possibile testare l'operazione del trigger:
<screen>
=&gt; INSERT INTO ttest VALUES (NULL);
INFO:  trigf (fired before): there are 0 rows in ttest
INSERT 0 0

-- Insertion skipped and AFTER trigger is not fired

=&gt; SELECT * FROM ttest;
 x
---
(0 rows)

=&gt; INSERT INTO ttest VALUES (1);
INFO:  trigf (fired before): there are 0 rows in ttest
INFO:  trigf (fired after ): there are 1 rows in ttest
                                       ^^^^^^^^
                             ricordare cosa abbiamo detto sulla visibilità.
INSERT 167793 1
vac=&gt; SELECT * FROM ttest;
 x
---
 1
(1 row)

=&gt; INSERT INTO ttest SELECT x * 2 FROM ttest;
INFO:  trigf (fired before): there are 1 rows in ttest
INFO:  trigf (fired after ): there are 2 rows in ttest
                                       ^^^^^^
                             ricordare cosa abbiamo detto sulla visibilità.
INSERT 167794 1
=&gt; SELECT * FROM ttest;
 x
---
 1
 2
(2 rows)

=&gt; UPDATE ttest SET x = NULL WHERE x = 2;
INFO:  trigf (fired before): there are 2 rows in ttest
UPDATE 0
=&gt; UPDATE ttest SET x = 4 WHERE x = 2;
INFO:  trigf (fired before): there are 2 rows in ttest
INFO:  trigf (fired after ): there are 2 rows in ttest
UPDATE 1
vac=&gt; SELECT * FROM ttest;
 x
---
 1
 4
(2 rows)

=&gt; DELETE FROM ttest;
INFO:  trigf (fired before): there are 2 rows in ttest
INFO:  trigf (fired before): there are 1 rows in ttest
INFO:  trigf (fired after ): there are 0 rows in ttest
INFO:  trigf (fired after ): there are 0 rows in ttest
                                       ^^^^^^
                             ricordare cosa abbiamo detto sulla visibilità.
DELETE 2
=&gt; SELECT * FROM ttest;
 x
---
(0 rows)
</screen>

   </para>

   <para>
Ci sono esempi più complessi in
<filename>src/test/regress/regress.c</filename> e
in <filename>contrib/spi</filename>.
   </para>
  </sect1>
 </chapter>
