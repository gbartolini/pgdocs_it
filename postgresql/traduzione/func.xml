<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

<chapter id="functions">
    <title>Funzioni e Operatori</title>

    <indexterm zone="functions">
        <primary>funzioni</primary>
    </indexterm>
    <indexterm zone="functions">
        <primary>operatori</primary>
    </indexterm>

    <para>
<productname>PostgreSQL</productname> fornisce un gran numero di
funzioni e operatori per i tipi dati incorporati. Gli utenti possono anche
definire le proprie funzioni e operatori, come descritto in
<xref linkend="server-programming" />. I comandi <application>psql</application>
<command>\df</command> e <command>\do</command> possono essere usati per
visualizzare, rispettivamente, l'elenco di tutte le funzioni e di tutti gli
operatori attualmente disponibili.
    </para>

    <para>
Se ci si preoccupa della portabilità notare che la maggior
parte delle funzioni e degli operatori descritti in questo capitolo, con
l'eccezione degli operatori aritmetici e di confronto più banali
e di alcune funzioni segnalate esplicitamente, non sono specificate dallo
standard <acronym>SQL</acronym>. Qualcuna di queste funzionalità
è presente in altri sistemi di gestione di database <acronym>SQL</acronym>,
e in molti casi è compatibile e coerente
tra le diverse implementazioni. Inoltre questo capitolo non è
esaustivo; Funzioni aggiuntive vengono visualizzate nelle sezioni di pertinenza 
del manuale.
    </para>

    <sect1 id="functions-logical">
        <title>Operatori logici</title>

        <indexterm zone="functions-logical">
            <primary>operatore</primary>
            <secondary>logico</secondary>
        </indexterm>
        <indexterm>
            <primary>Booleani</primary>
            <secondary>operatori</secondary>
            <see>operatori, logici</see>
        </indexterm>

        <para>
Sono disponibili gli usuali operatori logici:

        <indexterm>
            <primary>AND (operatore)</primary>
        </indexterm>
        <indexterm>
            <primary>OR (operatore)</primary>
        </indexterm>
        <indexterm>
            <primary>NOT (operatore)</primary>
        </indexterm>
        <indexterm>
            <primary>congiunzione</primary>
        </indexterm>
        <indexterm>
            <primary>disgiunzione</primary>
        </indexterm>
        <indexterm>
            <primary>negazione</primary>
        </indexterm>

        <simplelist>
            <member><literal>AND</literal></member>
            <member><literal>OR</literal></member>
            <member><literal>NOT</literal></member>
        </simplelist>

<acronym>SQL</acronym> utilizza una logica a tre-valori dove il null rappresenta un valore
<quote>sconosciuto</quote>. Osservare la seguente tabella della verità:

        <informaltable>
            <tgroup cols="4">
            <thead>
                <row>
                    <entry><replaceable>a</replaceable></entry>
                    <entry><replaceable>b</replaceable></entry>
                    <entry><replaceable>a</replaceable> AND 
                    <replaceable>b</replaceable></entry>
                    <entry><replaceable>a</replaceable> OR 
                    <replaceable>b</replaceable></entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry>TRUE</entry>
                    <entry>TRUE</entry>
                    <entry>TRUE</entry>
                    <entry>TRUE</entry>
                </row>
                <row>
                    <entry>TRUE</entry>
                    <entry>FALSE</entry>
                    <entry>FALSE</entry>
                    <entry>TRUE</entry>
                </row>
                <row>
                    <entry>TRUE</entry>
                    <entry>NULL</entry>
                    <entry>NULL</entry>
                    <entry>TRUE</entry>
                </row>
                <row>
                    <entry>FALSE</entry>
                    <entry>FALSE</entry>
                    <entry>FALSE</entry>
                    <entry>FALSE</entry>
                </row>
                <row>
                    <entry>FALSE</entry>
                    <entry>NULL</entry>
                    <entry>FALSE</entry>
                    <entry>NULL</entry>
                </row>
                <row>
                    <entry>NULL</entry>
                    <entry>NULL</entry>
                    <entry>NULL</entry>
                    <entry>NULL</entry>
                </row>
            </tbody>
            </tgroup>
        </informaltable>
        <informaltable>
            <tgroup cols="2">
            <thead>
                <row>
                    <entry><replaceable>a</replaceable></entry>
                    <entry>NOT <replaceable>a</replaceable></entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry>TRUE</entry>
                    <entry>FALSE</entry>
                </row>
                <row>
                    <entry>FALSE</entry>
                    <entry>TRUE</entry>
                </row>
                <row>
                    <entry>NULL</entry>
                    <entry>NULL</entry>
                </row>
            </tbody>
            </tgroup>
        </informaltable>
    </para>

    <para>
        Gli operatori <literal>AND</literal> e <literal>OR</literal> sono
        commutativi, che significa che è possibile 
        commutare gli operandi di destra e di sinistra
        senza influenzare il risultato. Consultare <xref
        linkend="syntax-express-eval" /> per ulteriori informazioni 
        circa l'ordine di calcolo delle espressioni.
    </para>
</sect1>

<sect1 id="functions-comparison">
    <title>Operatori di confronto</title>

    <indexterm zone="functions-comparison">
        <primary>confronto</primary>
        <secondary>operatori</secondary>
    </indexterm>

    <para>
        Sono disponibili gli usuali operatori di confronto, visualizzati nella tabella <xref
        linkend="functions-comparison-table" />.
    </para>

    <table id="functions-comparison-table">
        <title>Operatori di confronto</title>
        <tgroup cols="2">
        <thead>
            <row>
                <entry>Operatore</entry>
                <entry>Descrizione</entry>
            </row>
        </thead>
        <tbody>
            <row>
                <entry> <literal>&lt;</literal> </entry>
                <entry>minore di</entry>
            </row>
            <row>
                <entry> <literal>&gt;</literal> </entry>
                <entry>maggiore di</entry>
            </row>
            <row>
                <entry> <literal>&lt;=</literal> </entry>
                <entry>minore di o uguale a</entry>
            </row>
            <row>
                <entry> <literal>&gt;=</literal> </entry>
                <entry>maggiore di o uguale a</entry>
            </row>
            <row>
                <entry> <literal>=</literal> </entry>
                <entry>uguale</entry>
            </row>
            <row>
                <entry> <literal>&lt;&gt;</literal> o <literal>!=</literal> </entry>
                <entry>diverso</entry>
            </row>
        </tbody>
        </tgroup>
    </table>

    <note>
        <para>
L'operatore <literal>!=</literal> viene convertito in
<literal>&lt;&gt;</literal> nello stadio di analisi. Non è
possibile implementare gli operatori <literal>!=</literal> e
<literal>&lt;&gt;</literal> per fargli fare cose diverse.
        </para>
    </note>

    <para>
Gli operatori di confronto sono disponibili per tutti i tipi di dato dove il loro
utilizzo ha un senso. Tutti gli operatori di confronto sono operatori binari che
restituiscono un valore di tipo <type>boolean</type>; Una espressione tipo
<literal>1 &lt; 2 &lt; 3</literal> non è valida (in quanto non c'è 
un operatore <literal>&lt;</literal> per confrontare un valore boolean con
<literal>3</literal>).
    </para>

    <para>
        <indexterm>
            <primary>BETWEEN</primary>
        </indexterm>
In aggiunta agli operatori di confronto, è  disponibile il costrutto
speciale <token>BETWEEN</token>:

<synopsis>
    <replaceable>a</replaceable> BETWEEN <replaceable>x</replaceable> 
    AND <replaceable>y</replaceable>
</synopsis>
    
è equivalente a

<synopsis>
    <replaceable>a</replaceable> &gt;= <replaceable>x</replaceable> 
    AND <replaceable>a</replaceable> &lt;= <replaceable>y</replaceable>
</synopsis>
    
    Notare che <token>BETWEEN</token> tratta i valori i punti finali come inclusi 
    nell'intervallo.
    <literal>NOT BETWEEN</literal> fa il confronto opposto:

<synopsis>
    <replaceable>a</replaceable> NOT BETWEEN <replaceable>x</replaceable> 
    AND <replaceable>y</replaceable>
</synopsis>
    
    è equivalente a

<synopsis>
    <replaceable>a</replaceable> &lt; <replaceable>x</replaceable> 
    OR <replaceable>a</replaceable> &gt; <replaceable>y</replaceable>
</synopsis>
    
    <indexterm>
        <primary>BETWEEN SYMMETRIC</primary>
    </indexterm>
        
è lo stesso di <literal>BETWEEN</literal>
        ad eccezione che non richiede che l'argomento a sinistra di 
         <literal>AND</literal> sia minore o uguale all'argomento di destra.
        Se non lo è, questi due argomenti vengono scambiati automaticamente, così
        che un intervallo non vuoto è sempre implicito.
   </para>

   <para>
    <indexterm>
     <primary>IS NULL</primary>
    </indexterm>
    <indexterm>
     <primary>IS NOT NULL</primary>
    </indexterm>
    <indexterm>
     <primary>ISNULL</primary>
    </indexterm>
    <indexterm>
     <primary>NOTNULL</primary>
    </indexterm>
    Per controllare se un valore è null o non null, utilizzare il costrutto
<synopsis>
<replaceable>espressione</replaceable> IS NULL
<replaceable>espressione</replaceable> IS NOT NULL
</synopsis>
    oppure il costrutto equivalente, ma non standard
<synopsis>
<replaceable>espressione</replaceable> ISNULL
<replaceable>espressione</replaceable> NOTNULL
</synopsis>
    <indexterm><primary>valore null</primary><secondary>cofronto</secondary></indexterm>
   </para>


   <para>
    Fare attenzione a <emphasis>non</emphasis> scrivere
    <literal><replaceable>espressione</replaceable> = NULL</literal>
    in quanto <literal>NULL</literal> non è <quote>uguale a</quote>
    <literal>NULL</literal>.  (Il valore null rappresenta un valore sconosciuto
    e non si può sapere quando due valori sconosciuti sono uguali.) Questo
    comportamento è conforme allo standard SQL.
   </para>

  <tip>
   <para>
    Alcune applicazioni possono aspettarsi che
    <literal><replaceable>espressione</replaceable> = NULL</literal>
    restituisca true se <replaceable>espressione</replaceable> calcola un
    valore null. È raccomandato che queste applicazioni
    vengano modificate per aderire allo standard SQL. Tuttavia, se ciò
    non può essere fatto, si può utilizzare la variabile di configurazione
    <xref linkend="guc-transform-null-equals" />. Se essa viene abilitata,
    <productname>PostgreSQL</productname> convertirà la clausola <literal>x =
    NULL</literal> nel formato <literal>x IS NULL</literal>. Questo era il comportamento
    predefinito nelle versioni di <productname>PostgreSQL</productname> dalla 6.5 fino alla 7.1.
   </para>
  </tip>



  <note>
   <para>
    Se l'<replaceable>espressione</replaceable> viene valutata per riga, allora
    <literal>IS NULL</literal> è true quando la stessa espressione di riga è null
    o quando tutti i campi delle riga sono null, mentre
    <literal>IS NOT NULL</literal> è true quando la stessa espressione di riga è non-null
    e tutti i campi della riga sono non-null.
    Dato questo comportamento, 
    <literal>IS NULL</literal> e <literal>IS NOT NULL</literal> non ritorna sempre 
    risultati inversi per espressioni che contengono valori  sia NULL che non-null restituirà false
    per tutti e due i test.
    Questa definizione è conforme allo standard SQL, ed è una modifica rispetto
    al comportamento incoerente tenuto da <productname>PostgreSQL</productname> nelle
    versioni precedenti alla 8.2.
   </para>
  </note>

   <para>
    <indexterm>
     <primary>IS DISTINCT FROM</primary>
    </indexterm>
    <indexterm>
     <primary>IS NOT DISTINCT FROM</primary>
    </indexterm>
    
    Gli operatori di confronto ordinari restituiscono null (che significa <quote>sconosciuto</quote>)
    quando entrambi gli input sono null. Per esempio,
    <literal>7 = NULL</literal> produce null. Quando questo comportamento non è adatto,
    usare i costrutti 
     <literal>IS <optional> NOT </optional> DISTINCT FROM</literal>:

<synopsis>
<replaceable>expression</replaceable> IS DISTINCT FROM <replaceable>expression</replaceable>
<replaceable>expression</replaceable> IS NOT DISTINCT FROM <replaceable>expression</replaceable>
</synopsis>
    Per input non-null, <literal>IS DISTINCT FROM</literal> è
    identico all'operatore <literal>&lt;&gt;</literal>. Tuttavia, quando ambedue
    gli input sono null esso restituirà false, e se solo un input è
    null esso restituirà true. In maniera simile, per input non-null <literal>IS
    NOT DISTINCT FROM</literal> è identico a <literal>=</literal>, ma esso
    restituirà true quando ambedue gli input sono null e false quando solo un
    input è null. Quindi, questi costrutti si comportano effettivamente  come se null
    fosse un normale valore di dato, piuttosto che un valore <quote>sconosciuto</quote>.
    
   </para>

   <para>
    <indexterm>
     <primary>IS TRUE</primary>
    </indexterm>
    <indexterm>
     <primary>IS NOT TRUE</primary>
    </indexterm>
    <indexterm>
     <primary>IS FALSE</primary>
    </indexterm>
    <indexterm>
     <primary>IS NOT FALSE</primary>
    </indexterm>
    <indexterm>
     <primary>IS UNKNOWN</primary>
    </indexterm>
    <indexterm>
     <primary>IS NOT UNKNOWN</primary>
    </indexterm>
    I valori booleani possono anche essere esaminati usando i costrutti
<synopsis>
<replaceable>expression</replaceable> IS TRUE
<replaceable>expression</replaceable> IS NOT TRUE
<replaceable>expression</replaceable> IS FALSE
<replaceable>expression</replaceable> IS NOT FALSE
<replaceable>expression</replaceable> IS UNKNOWN
<replaceable>expression</replaceable> IS NOT UNKNOWN
</synopsis>
    
    Questi restituiranno sempre true o false, mai un valore null, anche quando
    l'operando è null.
    Un input null viene trattato con il valore logico <quote>unknown</quote>.
    Notare che <literal>IS UNKNOWN</literal> e <literal>IS NOT UNKNOWN</literal> sono
    effettivamente uguali, rispettivamente, a <literal>IS NULL</literal> e
    <literal>IS NOT NULL</literal>, eccetto che l'espressione in input
    deve essere di tipo booleano.
   </para>
 
<!-- IS OF does not conform to the ISO SQL behavior, so it is undocumented here
   <para>
    <indexterm>
     <primary>IS OF</primary>
    </indexterm>
    <indexterm>
     <primary>IS NOT OF</primary>
    </indexterm>
    It is possible to check the data type of an expression using the
    constructs
<synopsis>
<replaceable>expression</replaceable> IS OF (typename, ...)
<replaceable>expression</replaceable> IS NOT OF (typename, ...)
</synopsis>
    They return a boolean value based on whether the expression's data
    type is one of the listed data types.
   </para>
-->

  </sect1>

  <sect1 id="functions-math">
   <title>Funzioni e operatori matematici</title>

   <para>
    
    Gli operatori matematici sono forniti per molti tipi di dato su
    <productname>PostgreSQL</productname>. Per i tipi fuori dalle
    convenzioni matematiche comuni (p.e., i tipi data/orario),
    nelle sezioni successive verrà descritto l'effettivo
    comportamento.
   </para>

   <para>
    La <xref linkend="functions-math-op-table"/> mostra gli operatori matematici disponibili.
   </para>

   <table id="functions-math-op-table">
    <title>Operatori matematici</title>

    <tgroup cols="4">
     <thead>
      <row>
       <entry>Operatore</entry>
       <entry>Descrizione</entry>
       <entry>Esempio</entry>
       <entry>Risultato</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry> <literal>+</literal> </entry>
       <entry>addizione</entry>
       <entry><literal>2 + 3</literal></entry>
       <entry><literal>5</literal></entry>
      </row>

      <row>
       <entry> <literal>-</literal> </entry>
       <entry>sottrazione</entry>
       <entry><literal>2 - 3</literal></entry>
       <entry><literal>-1</literal></entry>
      </row>

      <row>
       <entry> <literal>*</literal> </entry>
       <entry>moltiplicazione</entry>
       <entry><literal>2 * 3</literal></entry>
       <entry><literal>6</literal></entry>
      </row>

      <row>
       <entry> <literal>/</literal> </entry>
       <entry>divisione (le divisioni di interi troncano il risultato)</entry>
       <entry><literal>4 / 2</literal></entry>
       <entry><literal>2</literal></entry>
      </row>

      <row>
       <entry> <literal>%</literal> </entry>
       <entry>modulo (resto)</entry>
       <entry><literal>5 % 4</literal></entry>
       <entry><literal>1</literal></entry>
      </row>


      <row>
       <entry> <literal>^</literal> </entry>
       <entry>elevamento a potenza</entry>
       <entry><literal>2.0 ^ 3.0</literal></entry>
       <entry><literal>8</literal></entry>
      </row>

      <row>
       <entry> <literal>|/</literal> </entry>
       <entry>radice quadrata</entry>
       <entry><literal>|/ 25.0</literal></entry>
       <entry><literal>5</literal></entry>
      </row>

      <row>
       <entry> <literal>||/</literal> </entry>
       <entry>radice cubica</entry>
       <entry><literal>||/ 27.0</literal></entry>
       <entry><literal>3</literal></entry>
      </row>

      <row>
       <entry> <literal>!</literal> </entry>
       <entry>fattoriale</entry>
       <entry><literal>5 !</literal></entry>
       <entry><literal>120</literal></entry>
      </row>

      <row>
       <entry> <literal>!!</literal> </entry>
       <entry>fattoriale (con operatore prefisso)</entry>
       <entry><literal>!! 5</literal></entry>
       <entry><literal>120</literal></entry>
      </row>

      <row>
       <entry> <literal>@</literal> </entry>
       <entry>valore assoluto</entry>
       <entry><literal>@ -5.0</literal></entry>
       <entry><literal>5</literal></entry>
      </row>

      <row>
       <entry> <literal>&amp;</literal> </entry>
       <entry>AND per singolo bit</entry>
       <entry><literal>91 &amp; 15</literal></entry>
       <entry><literal>11</literal></entry>
      </row>

      <row>
       <entry> <literal>|</literal> </entry>
       <entry>OR per singolo bit</entry>
       <entry><literal>32 | 3</literal></entry>
       <entry><literal>35</literal></entry>
      </row>

      <row>
       <entry> <literal>#</literal> </entry>
       <entry>xOR per singolo bit</entry>
       <entry><literal>17 # 5</literal></entry>
       <entry><literal>20</literal></entry>
      </row>

      <row>
       <entry> <literal>~</literal> </entry>
       <entry>NOT per singolo bit</entry>
       <entry><literal>~1</literal></entry>
       <entry><literal>-2</literal></entry>
      </row>

      <row>
       <entry> <literal>&lt;&lt;</literal> </entry>
       <entry>spostamento a sinistra per singolo bit</entry>
       <entry><literal>1 &lt;&lt; 4</literal></entry>
       <entry><literal>16</literal></entry>
      </row>

      <row>
       <entry> <literal>&gt;&gt;</literal> </entry>
       <entry>spostamento a destra per singolo bit</entry>
       <entry><literal>8 &gt;&gt; 2</literal></entry>
       <entry><literal>2</literal></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

   <para>
    Gli operatori per singoli bit lavorano solo su tipi dati integrali, mentre
    gli altri sono utilizzabili per tutti i tipi dati numerici. Gli operatori per
    singoli bit sono anche utilizzabili per i tipi stringa di <type>bit</type>
    e <type>bit varying</type>, come
    mostrato nella tabella <xref linkend="functions-bit-string-op-table" />.
   </para>

  <para>
   La <xref linkend="functions-math-func-table" /> mostra le funzioni
   matematiche disponibili. Nella tabella, <literal>dp</literal>
   indica <type>doppia precisione</type>. Molte di queste funzioni
   sono fornite in forme multiple con diversi tipi di argomenti.
   Eccetto dove annotato, ogni forma di funzione fornita restituisce lo stesso tipo di dato 
   del suo argomento.
   Le funzioni che lavorano con dati in <type>doppia precisione</type> sono
   implementate principalmente sulla libreria C del sistema host; la precisione e il comportamento in
   casi limite può quindi variare in dipendenza del sistema host.
  </para>

   <indexterm>
    <primary>abs</primary>
   </indexterm>
   <indexterm>
    <primary>cbrt</primary>
   </indexterm>
   <indexterm>
    <primary>ceiling</primary>
   </indexterm>
   <indexterm>
    <primary>degrees</primary>
   </indexterm>
   <indexterm>
    <primary>div</primary>
   </indexterm>
   <indexterm>
    <primary>exp</primary>
   </indexterm>
   <indexterm>
    <primary>floor</primary>
   </indexterm>
   <indexterm>
    <primary>ln</primary>
   </indexterm>
   <indexterm>
    <primary>log</primary>
   </indexterm>
   <indexterm>
    <primary>mod</primary>
   </indexterm>
   <indexterm>
    <primary>pi</primary>
   </indexterm>
   <indexterm>
    <primary>power</primary>
   </indexterm>
   <indexterm>
    <primary>radians</primary>
   </indexterm>
   <indexterm>
    <primary>random</primary>
   </indexterm>
   <indexterm>
    <primary>round</primary>
   </indexterm>
   <indexterm>
    <primary>setseed</primary>
   </indexterm>
   <indexterm>
    <primary>sign</primary>
   </indexterm>
   <indexterm>
    <primary>sqrt</primary>
   </indexterm>
   <indexterm>
    <primary>trunc</primary>
   </indexterm>
   <indexterm>
    <primary>width_bucket</primary>
   </indexterm>

   <table id="functions-math-func-table">
    <title>Funzioni matematiche</title>
    <tgroup cols="5">
     <thead>
      <row>
       <entry>Funzione</entry>
       <entry>Tipo restituito</entry>
       <entry>Descrizione</entry>
       <entry>Esampio</entry>
       <entry>Risultato</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>abs</function>
        (<replaceable>x</replaceable>)</literal></entry>
       <entry>(uguale a <replaceable>x</replaceable>)</entry>
       <entry>valore assoluto</entry>
       <entry><literal>abs(-17.4)</literal></entry>
       <entry><literal>17.4</literal></entry>
      </row>

      <row>
       <entry><literal><function>cbrt</function>(<type>dp</type>)</literal></entry>
       <entry><type>dp</type></entry>
       <entry>radice cubica</entry>
       <entry><literal>cbrt(27.0)</literal></entry>
       <entry><literal>3</literal></entry>
      </row>

      <row>
       <entry><literal><function>ceil</function>(<type>dp</type> or <type>numeric</type>)</literal></entry>
       <entry>(uguale a quello in input)</entry>
       <entry>il più piccolo intero non inferiore all'argomento</entry>
       <entry><literal>ceil(-42.8)</literal></entry>
       <entry><literal>-42</literal></entry>
      </row>

      <row>
       <entry><literal><function>ceiling</function>(<type>dp</type> or <type>numeric</type>)</literal></entry>
       <entry>(uguale a quello in input)</entry>
       <entry>il più piccolo intero non inferiore all'argomento (alias per <function>ceil</function>)</entry>
       <entry><literal>ceiling(-95.3)</literal></entry>
       <entry><literal>-95</literal></entry>
      </row>

      <row>
       <entry><literal><function>degrees</function>(<type>dp</type>)</literal></entry>
       <entry><type>dp</type></entry>
       <entry>da radianti a gradi</entry>
       <entry><literal>degrees(0.5)</literal></entry>
       <entry><literal>28.6478897565412</literal></entry>
      </row>

      <row>
       <entry><literal><function>exp</function>(<type>dp</type> or <type>numeric</type>)</literal></entry>
       <entry>(uguale a quello in input)</entry>
       <entry>esponenziale</entry>
       <entry><literal>exp(1.0)</literal></entry>
       <entry><literal>2.71828182845905</literal></entry>
      </row>

      <row>
       <entry><literal><function>floor</function>(<type>dp</type> or <type>numeric</type>)</literal></entry>
       <entry>(uguale a quello in input)</entry>
       <entry>il più grande intero non superiore all'argomento</entry>
       <entry><literal>floor(-42.8)</literal></entry>
       <entry><literal>-43</literal></entry>
      </row>

      <row>
       <entry><literal><function>ln</function>(<type>dp</type> or <type>numeric</type>)</literal></entry>
       <entry>(uguale a quello in input)</entry>
       <entry>logaritmo naturale</entry>
       <entry><literal>ln(2.0)</literal></entry>
       <entry><literal>0.693147180559945</literal></entry>
      </row>

      <row>
       <entry><literal><function>log</function>(<type>dp</type> or <type>numeric</type>)</literal></entry>
       <entry>(uguale a quello in input)</entry>
       <entry>logaritmo in base 10</entry>
       <entry><literal>log(100.0)</literal></entry>
       <entry><literal>2</literal></entry>
      </row>

      <row>
       <entry><literal><function>log</function>(<parameter>b</parameter> <type>numeric</type>,
        <parameter>x</parameter> <type>numeric</type>)</literal></entry>
       <entry><type>numeric</type></entry>
       <entry>logaritmo in base <parameter>b</parameter></entry>
       <entry><literal>log(2.0, 64.0)</literal></entry>
       <entry><literal>6.0000000000</literal></entry>
      </row>

      <row>
       <entry><literal><function>mod</function>(<parameter>y</parameter>,
        <parameter>x</parameter>)</literal></entry>
       <entry>(uguale a quello degli argomenti)</entry>
       <entry>resto di <parameter>y</parameter>/<parameter>x</parameter></entry>
       <entry><literal>mod(9,4)</literal></entry>
       <entry><literal>1</literal></entry>
      </row>

      <row>
       <entry><literal><function>pi</function>()</literal></entry>
       <entry><type>dp</type></entry>
       <entry>costante <quote>&pi;</quote></entry>
       <entry><literal>pi()</literal></entry>
       <entry><literal>3.14159265358979</literal></entry>
      </row>

      <row>
       <entry><literal><function>power</function>(<parameter>a</parameter> <type>dp</type>,
        <parameter>b</parameter> <type>dp</type>)</literal></entry>
       <entry><type>dp</type></entry>
       <entry><parameter>a</parameter> elevato alla potenza di <parameter>b</parameter></entry>
       <entry><literal>power(9.0, 3.0)</literal></entry>
       <entry><literal>729</literal></entry>
      </row>

      <row>
       <entry><literal><function>power</function>(<parameter>a</parameter> <type>numeric</type>,
        <parameter>b</parameter> <type>numeric</type>)</literal></entry>
       <entry><type>numeric</type></entry>
       <entry><parameter>a</parameter> elevato alla potenza di <parameter>b</parameter></entry>
       <entry><literal>power(9.0, 3.0)</literal></entry>
       <entry><literal>729</literal></entry>
      </row>

      <row>
       <entry><literal><function>radians</function>(<type>dp</type>)</literal></entry>
       <entry><type>dp</type></entry>
       <entry>da gradi a radianti</entry>
       <entry><literal>radians(45.0)</literal></entry>
       <entry><literal>0.785398163397448</literal></entry>
      </row>

      <row>
       <entry><literal><function>random</function>()</literal></entry>
       <entry><type>dp</type></entry>
       <entry>valori casuali tra 0.0 e 1.0</entry>
       <entry><literal>random()</literal></entry>
       <entry></entry>
      </row>

      <row>
       <entry><literal><function>round</function>(<type>dp</type> or <type>numeric</type>)</literal></entry>
       <entry>(uguale a quello in input)</entry>
       <entry>arrotondamento all'intero più vicino</entry>
       <entry><literal>round(42.4)</literal></entry>
       <entry><literal>42</literal></entry>
      </row>

      <row>
       <entry><literal><function>round</function>(<parameter>v</parameter> <type>numeric</type>, <parameter>s</parameter> <type>int</type>)</literal></entry>
       <entry><type>numeric</type></entry>
       <entry>arrotondamento alle <parameter>s</parameter> cifre decimali</entry>
       <entry><literal>round(42.4382, 2)</literal></entry>
       <entry><literal>42.44</literal></entry>
      </row>

      <row>
       <entry><literal><function>setseed</function>(<type>dp</type>)</literal></entry>
       <entry><type>void</type></entry>
       <entry>impostazione seme (seed) per le successive chiamate <literal>random()</literal> (valore tra 0 e 1.0)</entry>
       <entry><literal>setseed(0.54823)</literal></entry>
       <entry></entry>
      </row>

      <row>
       <entry><literal><function>sign</function>(<type>dp</type> or <type>numeric</type>)</literal></entry>
       <entry>(uguale a quello in input)</entry>
       <entry>segno dell'argomento (-1, 0, +1)</entry>
       <entry><literal>sign(-8.4)</literal></entry>
       <entry><literal>-1</literal></entry>
      </row>

      <row>
       <entry><literal><function>sqrt</function>(<type>dp</type> or <type>numeric</type>)</literal></entry>
       <entry>(uguale a quello in input)</entry>
       <entry>radice quadrata</entry>
       <entry><literal>sqrt(2.0)</literal></entry>
       <entry><literal>1.4142135623731</literal></entry>
      </row>

      <row>
       <entry><literal><function>trunc</function>(<type>dp</type> or <type>numeric</type>)</literal></entry>
       <entry>(uguale a quello in input)</entry>
       <entry>troncamento verso lo zero</entry>
       <entry><literal>trunc(42.8)</literal></entry>
       <entry><literal>42</literal></entry>
      </row>

      <row>
       <entry><literal><function>trunc</function>(<parameter>v</parameter> <type>numeric</type>, <parameter>s</parameter> <type>int</type>)</literal></entry>
       <entry><type>numeric</type></entry>
       <entry>troncamento alle <parameter>s</parameter> cifre decimali</entry>
       <entry><literal>trunc(42.4382, 2)</literal></entry>
       <entry><literal>42.43</literal></entry>
      </row>

      <row>
        <entry><literal><function>width_bucket</function>(<parameter>op</parameter> <type>numeric</type>, <parameter>b1</parameter> <type>numeric</type>, <parameter>b2</parameter> <type>numeric</type>, <parameter>count</parameter> <type>int</type>)</literal></entry>
       <entry><type>int</type></entry>
       <entry>restituisce il segmento (bucket) al quale <parameter>op</parameter> sarà 
       assegnato in un istogramma equi-dept con 
        <parameter>count</parameter> segmenti (bucket),
        nella sequenza di valori da <parameter>b1</parameter> 
        a <parameter>b2</parameter></entry>
       <entry><literal>width_bucket(5.35, 0.024, 10.06, 5)</literal></entry>
       <entry><literal>3</literal></entry>
      </row>

      <row> 
       <entry><literal><function>width_bucket</function>(<parameter>op</parameter> <type>dp</type>, <parameter>b1</parameter> <type>dp</type>, <parameter>b2</parameter> <type>dp</type>, <parameter>count</parameter> <type>int</type>)</literal></entry>
       <entry><type>int</type></entry>
       <entry>restituisce il segmento (bucket) al quale <parameter>op</parameter> sarà 
       assegnato in un istogramma equi-dept con <parameter>count</parameter> segmenti (bucket),
       nella sequenza di valori da <parameter>b1</parameter> a <parameter>b2</parameter></entry>
       <entry><literal>width_bucket(5.35, 0.024, 10.06, 5)</literal></entry>
       <entry><literal>3</literal></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
   Infine, la <xref linkend="functions-math-trig-table" /> mostra le
   funzioni trigonometriche disponibili. Tutte le funzioni trigonometriche
   accettano argomenti e restituiscono valori di tipo <type>doppia
   precisione</type>. Gli argomenti delle funzioni trigonometriche sono espressi
    in radianti. Vedere sopra le funzioni di trasformazione di unità 
    <literal><function>radians()</function></literal> e
    <literal><function>degrees()</function></literal>.
  </para>

   <indexterm>
    <primary>acos</primary>
   </indexterm>
   <indexterm>
    <primary>asin</primary>
   </indexterm>
   <indexterm>
    <primary>atan</primary>
   </indexterm>
   <indexterm>
    <primary>atan2</primary>
   </indexterm>
   <indexterm>
    <primary>cos</primary>
   </indexterm>
   <indexterm>
    <primary>cot</primary>
   </indexterm>
   <indexterm>
    <primary>sin</primary>
   </indexterm>
   <indexterm>
    <primary>tan</primary>
   </indexterm>

   <table id="functions-math-trig-table">
    <title>Funzioni trigonometriche</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Funzione</entry>
       <entry>Descrizione</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>acos</function>(<replaceable>x</replaceable>)</literal></entry>
       <entry>coseno inverso</entry>
      </row>

      <row>
       <entry><literal><function>asin</function>(<replaceable>x</replaceable>)</literal></entry>
       <entry>seno inverso</entry>
      </row>

      <row>
       <entry><literal><function>atan</function>(<replaceable>x</replaceable>)</literal></entry>
       <entry>tangente inversa</entry>
      </row>

      <row>
       <entry><literal><function>atan2</function>(<replaceable>y</replaceable>,
        <replaceable>x</replaceable>)</literal></entry>
       <entry>tangente inversa di
        <literal><replaceable>y</replaceable>/<replaceable>x</replaceable></literal></entry>
      </row>

      <row>
       <entry><literal><function>cos</function>(<replaceable>x</replaceable>)</literal></entry>
       <entry>coseno</entry>
      </row>

      <row>
       <entry><literal><function>cot</function>(<replaceable>x</replaceable>)</literal></entry>
       <entry>cotangente</entry>
      </row>

      <row>
       <entry><literal><function>sin</function>(<replaceable>x</replaceable>)</literal></entry>
       <entry>seno</entry>
      </row>

      <row>
       <entry><literal><function>tan</function>(<replaceable>x</replaceable>)</literal></entry>
       <entry>tangente</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect1>


  <sect1 id="functions-string">
   <title>Funzioni e operatori sulle stringhe</title>

   <para>
    Questa sezione descrive le funzioni e gli operatori atti a esaminare e
    manipolare stringhe. In questo contesto le stringhe includono valori
    dei tipi <type>character</type>, <type>character varying</type>,
    e <type>text</type>. Se non diversamente indicato, tutte
    le funzioni elencate sotto lavorano con tutti questi tipi, ma è bene
    considerare gli effetti potenziali del riempimento automatico con spazi quando
    si utilizza il tipo <type>character</type>. Esistono anche alcune funzioni
    native per i tipi stringa di bit.
   </para>


   <para>
        <acronym>SQL</acronym> definisce alcune funzioni sulle stringhe che usano 
        parole chiave, invece di virgole, per separare
        gli argomenti. Dettagli sono in
        <xref linkend="functions-string-sql"/>.
        <productname>PostgreSQL</productname> prevede anche versioni di queste funzioni
        che usano la sintassi di invocazione normale per le funzioni
        (see <xref linkend="functions-string-other"/>).
   </para>


   <note>
    
    <note>
        <para>
            Nota per il revisore: coercizioni è urend....
        </para>
    </note>
    <para>
     Prima di <productname>PostgreSQL</productname> 8.3, queste funzioni
     accettavano tacitamente anche valori di molti tipi di dato non-stringa,
     a causa della presenza di implicite coercizioni da quei tipi di dato a
     <type>text</type>. Quelle coercizioni sono state rimosse perchè hanno causato
     frequentemente comportamenti inaspettati. Tuttavia, l'operatore di concatenamento
     della stringa (<literal>||</literal>) accetta ancora input non-stringa, a condizione che
     almeno un input sia di tipo stringa, come mostrato nella tabella <xref
     linkend="functions-string-sql" />. Per altri casi, inserire una esplicita
     coercizione a testo se si necessita duplicare il comportamento precedente.
    </para>
   </note>

   <indexterm>
    <primary>bit_length</primary>
   </indexterm>
   <indexterm>
    <primary>char_length</primary>
   </indexterm>
   <indexterm>
    <primary>lower</primary>
   </indexterm>
   <indexterm>
    <primary>octet_length</primary>
   </indexterm>
   <indexterm>
    <primary>overlay</primary>
   </indexterm>
   <indexterm>
    <primary>position</primary>
   </indexterm>
   <indexterm>
    <primary>substring</primary>
   </indexterm>
   <indexterm>
    <primary>trim</primary>
   </indexterm>
   <indexterm>
    <primary>upper</primary>
   </indexterm>

   <table id="functions-string-sql">
    <title>Funzioni e operatori stringa <acronym>SQL</acronym></title>
    <tgroup cols="5">
     <thead>
      <row>
       <entry>Funzione</entry>
       <entry>Tipo restituito</entry>
       <entry>Descrizione</entry>
       <entry>Esempio</entry>
       <entry>Risultato</entry>  
      </row>
     </thead>




     <tbody>
      <row>
       <entry><literal><parameter>stringa</parameter> <literal>||</literal>
        <parameter>stringa</parameter></literal></entry>
       <entry> <type>text</type> </entry>
       <entry>
        Concatenamento di stringhe
        <indexterm>
         <primary>stringhe di caratteri</primary>
         <secondary>concatenamento</secondary>
        </indexterm>
       </entry>
       <entry><literal>'Post' || 'greSQL'</literal></entry>
       <entry><literal>PostgreSQL</literal></entry>
      </row>

      <row>
       <entry>
        <literal><parameter>stringa</parameter> <literal>||</literal>
        <parameter>non-stringa</parameter></literal>
        oppure
        <literal><parameter>non-stringa</parameter> <literal>||</literal>
        <parameter>stringa</parameter></literal>
       </entry>
       <entry> <type>text</type> </entry>
       <entry>
        Concatenamento di stringhe con un input non-stringa
       </entry>
       <entry><literal>'Valore: ' || 42</literal></entry>
       <entry><literal>Valore: 42</literal></entry>
      </row>

      <row>
       <entry><literal><function>bit_length</function>(<parameter>stringa</parameter>)</literal></entry>
       <entry><type>int</type></entry>
       <entry>Numero di bit nella stringa</entry>
       <entry><literal>bit_length('jose')</literal></entry>
       <entry><literal>32</literal></entry>
      </row>

      <row>
       <entry><literal><function>char_length</function>(<parameter>stringa</parameter>)</literal> oppure <literal><function>character_length</function>(<parameter>stringa</parameter>)</literal></entry>
       <entry><type>int</type></entry>
       <entry>
        Numero di caratteri nella stringa
        <indexterm>
         <primary>stringa di caratteri</primary>
         <secondary>lunghezza</secondary>
        </indexterm>
        <indexterm>
         <primary>lunghezza</primary>
         <secondary sortas="character string">di una stringa di caratteri</secondary>
         <see>lunghezza, stringa di caratteri</see>
        </indexterm>
       </entry>
       <entry><literal>char_length('jose')</literal></entry>
       <entry><literal>4</literal></entry>
      </row>

      <row>
       <entry><literal><function>lower</function>(<parameter>stringa</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Converte stringa in caratteri minuscoli</entry>
       <entry><literal>lower('TOM')</literal></entry>
       <entry><literal>tom</literal></entry>
      </row>

      <row>
       <entry><literal><function>octet_length</function>(<parameter>stringa</parameter>)</literal></entry>
       <entry><type>int</type></entry>
       <entry>Numero di byte nella stringa</entry>
       <entry><literal>octet_length('jose')</literal></entry>
       <entry><literal>4</literal></entry>
      </row>

      <row>
       <entry><literal><function>overlay</function>(<parameter>string</parameter> placing <parameter>substring</parameter> from <type>int1</type> <optional>for <type>int2</type></optional>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Rimpiazza gli int2 caratteri di stringa con i caratteri di substring 
        partendo dalla posizione int1
       </entry>
       <entry><literal>overlay('Txxxxas' placing 'hom' from 2 for 4)</literal></entry>
       <entry><literal>Thomas</literal></entry>
      </row>

      <row>
       <entry><literal><function>position</function>(<parameter>sottostringa</parameter> in <parameter>stringa</parameter>)</literal></entry>
       <entry><type>int</type></entry>
       <entry>Posizione della sottostringa specificata</entry>
       <entry><literal>position('om' in 'Thomas')</literal></entry>
       <entry><literal>3</literal></entry>
      </row>

      <row>
       <entry><literal><function>substring</function>(<parameter>stringa</parameter> <optional>from <type>int</type></optional> <optional>for <type>int</type></optional>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Estrae sottostringa
       </entry>
       <entry><literal>substring('Thomas' from 2 for 3)</literal></entry>
       <entry><literal>hom</literal></entry>
      </row>

      <row>
       <entry><literal><function>substring</function>(<parameter>stringa</parameter> from <replaceable>modello</replaceable>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Estrae la sottostringa che corrisponde all'espressione regolare POSIX. Consultare
        <xref linkend="functions-matching" /> per ulteriori informazioni sui confronti
        con modelli.
       </entry>
       <entry><literal>substring('Thomas' from '...$')</literal></entry>
       <entry><literal>mas</literal></entry>
      </row>

      <row>
       <entry><literal><function>substring</function>(<parameter>stringa</parameter> from <replaceable>modello</replaceable> for <replaceable>escape</replaceable>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Estrae la sottostringa che corrisponde all'espressione regolare <acronym>SQL</acronym>.
        Consultare <xref linkend="functions-matching" /> per ulteriori informazioni sui confronti
        con modelli.
       </entry>
       <entry><literal>substring('Thomas' from '%#"m_s#"_' for '#')</literal></entry>
       <entry><literal>oma</literal></entry>
      </row>

      <row>
       <entry>
        <literal><function>trim</function>(<optional>leading | trailing | both</optional>
        <optional><parameter>carattere</parameter></optional> from
        <parameter>stringa</parameter>)</literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>
        Rimuove la più lunga stringa contenente solo il
        <parameter>carattere</parameter> (uno spazio come impostazione predefinita) da
        inizio/fine/ambedue i lati di <parameter>stringa</parameter>
       </entry>
       <entry><literal>trim(both 'x' from 'xTomxx')</literal></entry>
       <entry><literal>Tom</literal></entry>
      </row>

      <row>
       <entry><literal><function>upper</function>(<parameter>stringa</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Converte stringa in caratteri maiuscoli</entry>
       <entry><literal>upper('tom')</literal></entry>
       <entry><literal>TOM</literal></entry>
      </row>
     </tbody>
    </tgroup>
   </table>




   <para>
    Ulteriori funzioni di manipolazione stringhe sono disponibili ed elencate nella tabella
    <xref linkend="functions-string-other" />. Alcune di esse sono usate internamente per implementare
    le funzioni stringa standard-<acronym>SQL</acronym> elencate nella tabella <xref linkend="functions-string-sql" />.
   </para>


   <indexterm>
    <primary>ascii</primary>
   </indexterm>
   <indexterm>
    <primary>btrim</primary>
   </indexterm>
   <indexterm>
    <primary>chr</primary>
   </indexterm>
   <indexterm>
    <primary>concat</primary>
   </indexterm>
   <indexterm>
    <primary>concat_ws</primary>
   </indexterm>
   <indexterm>
    <primary>convert</primary>
   </indexterm>
   <indexterm>
    <primary>convert_from</primary>
   </indexterm>
   <indexterm>
    <primary>convert_to</primary>
   </indexterm>
   <indexterm>
    <primary>decode</primary>
   </indexterm>
   <indexterm>
    <primary>encode</primary>
   </indexterm>
   <indexterm>
    <primary>initcap</primary>
   </indexterm>
   <indexterm>
    <primary>left</primary>
   </indexterm>
   <indexterm>
    <primary>lpad</primary>
   </indexterm>
   <indexterm>
    <primary>ltrim</primary>
   </indexterm>
   <indexterm>
    <primary>md5</primary>
   </indexterm>
   <indexterm>
    <primary>pg_client_encoding</primary>
   </indexterm>
   <indexterm>
    <primary>quote_ident</primary>
   </indexterm>
   <indexterm>
    <primary>quote_literal</primary>
   </indexterm>
   <indexterm>
    <primary>quote_nullable</primary>
   </indexterm>
   <indexterm>
    <primary>repeat</primary>
   </indexterm>
   <indexterm>
    <primary>replace</primary>
   </indexterm>
   <indexterm>
    <primary>reverse</primary>
   </indexterm>
   <indexterm>
    <primary>right</primary>
   </indexterm>
   <indexterm>
    <primary>rpad</primary>
   </indexterm>
   <indexterm>
    <primary>rtrim</primary>
   </indexterm>
   <indexterm>
    <primary>split_part</primary>
   </indexterm>
   <indexterm>
    <primary>strpos</primary>
   </indexterm>
   <indexterm>
    <primary>substr</primary>
   </indexterm>
   <indexterm>
    <primary>to_ascii</primary>
   </indexterm>
   <indexterm>
    <primary>to_hex</primary>
   </indexterm>
   <indexterm>
    <primary>translate</primary>
   </indexterm>


   <table id="functions-string-other">
    <title>Altre funzioni stringa</title>
    <tgroup cols="5">
     <thead>
      <row>
       <entry>Funzione</entry>
       <entry>Tipo restituito</entry>
       <entry>Descrizione</entry>
       <entry>Esempio</entry>
       <entry>Risultato</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>ascii</function>(<parameter>stringa</parameter>)</literal></entry>
       <entry><type>int</type></entry>
       <entry>
        codice <acronym>ASCII</acronym> del primo carattere dell'argomento.
        Per <acronym>UTF8</acronym> restituisce il codice Unicode
        del carattere puntato. Per le altre codificazioni multibyte 
        l'argomento deve necessariamente essere un carattere <acronym>ASCII</acronym>.
       </entry>
       <entry><literal>ascii('x')</literal></entry>
       <entry><literal>120</literal></entry>
      </row>

      <row>
       <entry><literal><function>btrim</function>(<parameter>stringa</parameter> <type>text</type>
       <optional>, <parameter>caratteri</parameter> <type>text</type></optional>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Rimuove la stringa più lunga composta solo di caratteri contenuti 
        in <parameter>caratteri</parameter> (uno spazio per impostazione predefinita)
        dall'inizio alla fine di <parameter>stringa</parameter>
       </entry>
       <entry><literal>btrim('xyxtrimyyx', 'xy')</literal></entry>
       <entry><literal>trim</literal></entry>
      </row>

      <row>
       <entry><literal><function>chr</function>(<type>int</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Carattere del codice fornito. Per <acronym>UTF8</acronym> l'argomento 
        è trattato come un codice Unicode puntato. Per altre codificazioni
        multibyte l'argomento deve necessariamente designare un carattere
        <acronym>ASCII</acronym>.
       </entry>
       <entry><literal>chr(65)</literal></entry>
       <entry><literal>A</literal></entry>
      </row>

      <row>
       <entry>
        <literal><function>convert</function>(<parameter>stringa</parameter> <type>bytea</type>,
        <parameter>codifica_src</parameter> <type>name</type>,
        <parameter>codifica_dest</parameter> <type>name</type>)</literal>
       </entry>
       <entry><type>bytea</type></entry>
       <entry>
        Converte la stringa alla <parameter>codifica_dest</parameter>. La
        codifica originale è specificata da
        <parameter>codifica_src</parameter>. La <parameter>stringa</parameter>
        deve essere valida in questa codifica. La conversione può
        essere definita da <command>CREATE CONVERSION</command>.  
        Ci sono anche alcune conversioni predefinite. consultare la <xref
        linkend="conversion-names" /> per le conversioni disponibili.
       </entry>
       <entry><literal>convert('testo_in_utf8', 'UTF8', 'LATIN1')</literal></entry>
       <entry><literal>testo_in_utf8</literal> rappresentato in codifica ISO 8859-1</entry>
      </row>

      <row>
       <entry>
        <literal><function>convert_from</function>(<parameter>stringa</parameter> <type>bytea</type>,
        <parameter>codifica_src</parameter> <type>name</type>)</literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>
        Converte la stringa alla codifica del database. La codifica originale
        è specificata in <parameter>codifica_src</parameter>. La
        <parameter>stringa</parameter> deve essere valida in questa codifica.
       </entry>
       <entry><literal>convert_from('testo_in_utf8', 'UTF8')</literal></entry>
       <entry><literal>testo_in_utf8</literal> rappresentato nella corrente codifica del database</entry>
      </row>

      <row>
       <entry>
        <literal><function>convert_to</function>(<parameter>stringa</parameter> <type>text</type>,
        <parameter>codifica_dest</parameter> <type>name</type>)</literal>
       </entry>
       <entry><type>bytea</type></entry>
       <entry>
        Converte stringa nella <parameter>codifica_dest</parameter>.
       </entry>
       <entry><literal>convert_to('un certo testo', 'UTF8')</literal></entry>
       <entry><literal>un certo testo</literal> rappresentato nella codifica UTF8</entry>
      </row>

      <row>
       <entry>
        <literal><function>decode</function>(<parameter>stringa</parameter> <type>text</type>,
        <parameter>tipo</parameter> <type>text</type>)</literal>
       </entry>
       <entry><type>bytea</type></entry>
       <entry>
        Decodifica il dato binario di <parameter>stringa</parameter> codificato in
        precedenza con <function>encode</function>. Il tipo di parametro è lo stesso come in <function>encode</function>.
       </entry>
       <entry><literal>decode('MTIzAAE=', 'base64')</literal></entry>
       <entry><literal>123\000\001</literal></entry>
      </row>       

      <row>
       <entry>
        <literal><function>encode</function>(<parameter>dato</parameter> <type>bytea</type>,
        <parameter>tipo</parameter> <type>text</type>)</literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>
        Codifica un dato binario in una differente rappresentazione. I tipi
        supportati sono: <literal>base64</literal>, <literal>hex</literal>, <literal>escape</literal>.
        <literal>Escape</literal> fornisce in uscita solamente byte nulli come <literal>\000</literal>
        e doppie barre inverse.
       </entry>
       <entry><literal>encode(E'123\\000\\001', 'base64')</literal></entry>
       <entry><literal>MTIzAAE=</literal></entry>
      </row>       

      <row>
       <entry><literal><function>initcap</function>(<parameter>stringa</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Converte la prima lettera di ogni parola in maiuscolo e il
        resto in minuscolo. Le parole sono sequenze di caratteri
        alfanumerici separati da un carattere non-alfabetico.
       </entry>
       <entry><literal>initcap('hi THOMAS')</literal></entry>
       <entry><literal>Hi Thomas</literal></entry>
      </row>

      <row>
       <entry><literal><function>length</function>(<parameter>stringa</parameter>)</literal></entry>
       <entry><type>int</type></entry>
       <entry>
        Numero di caratteri in <parameter>stringa</parameter>
       </entry>
       <entry><literal>length('jose')</literal></entry>
       <entry><literal>4</literal></entry>
      </row>

      <row>
       <entry><literal><function>length</function>(<parameter>stringa</parameter><type>bytea</type>,
        <parameter>codifica</parameter> <type>nome</type> )</literal></entry>
       <entry><type>int</type></entry>
       <entry>
        Numero di caratteri in <parameter>stringa</parameter> nella
        <parameter>codifica</parameter> fornita. La <parameter>stringa</parameter>
        deve essere valida in questa codifica.
       </entry>
       <entry><literal>length('jose', 'UTF8')</literal></entry>
       <entry><literal>4</literal></entry>
      </row>

      <row>
       <entry>
        <literal><function>lpad</function>(<parameter>stringa</parameter> <type>text</type>,
        <parameter>lunga</parameter> <type>int</type>
        <optional>, <parameter>riempimento</parameter> <type>text</type></optional>)</literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>
         Estende la <parameter>stringa</parameter> alla lunghezza di
        <parameter>lunga</parameter> anteponendo i caratteri di
        <parameter>riempimento</parameter> (uno spazio per impostazione predefinita).
        Se la <parameter>stringa</parameter> è già più lunga di
        <parameter>lunga</parameter> allora essa viene troncata (sulla
        destra).
       </entry>
       <entry><literal>lpad('hi', 5, 'xy')</literal></entry>
       <entry><literal>xyxhi</literal></entry>
      </row>

      <row>
       <entry><literal><function>ltrim</function>(<parameter>stringa</parameter> <type>text</type>
        <optional>, <parameter>caratteri</parameter> <type>text</type></optional>)</literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>
        Rimuove la stringa più lunga contenente solo caratteri da
        <parameter>caratteri</parameter> (uno spazio per impostazione predefinita) dall'inizio di
        <parameter>stringa</parameter>
       </entry>
       <entry><literal>ltrim('zzzytrim', 'xyz')</literal></entry>
       <entry><literal>trim</literal></entry>
      </row>

      <row>
       <entry><literal><function>md5</function>(<parameter>stringa</parameter>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Calcole l'hash  MD5 di <parameter>stringa</parameter>,
        restituendo il risultato in esadecimale
       </entry>
       <entry><literal>md5('abc')</literal></entry>
       <entry><literal>900150983cd24fb0 d6963f7d28e17f72</literal></entry>
      </row>

      <row>
       <entry><literal><function>pg_client_encoding</function>()</literal></entry>
       <entry><type>name</type></entry>
       <entry>
        Il corrente nome di codifica del client
       </entry>
       <entry><literal>pg_client_encoding()</literal></entry>
       <entry><literal>SQL_ASCII</literal></entry>
      </row>

      <row>
       <entry><literal><function>quote_ident</function>(<parameter>stringa</parameter> <type>text</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Restituisce la stringa fornita adeguatamente quotata per essere
        usata come un identificatore in una istruzione stringa <acronym>SQL</acronym>.
        Gli apici sono aggiunti solo se necessari (cioè, se la stringa contiene
        caratteri non-identificatori o parole con caratteri minuscoli da trasformare in maiuscolo).
        Apici incorporati vengonoo adeguatamente raddoppiati.
       </entry>
       <entry><literal>quote_ident('Foo bar')</literal></entry>
       <entry><literal>"Foo bar"</literal></entry>
      </row>

      <row>
       <entry><literal><function>quote_literal</function>(<parameter>stringa</parameter> <type>text</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Restituisce la stringa fornita adeguatamente quotata per essere usata come un
        letterale stringa in una istruzione stringa <acronym>SQL</acronym>.
        Apici singoli e barre inverse incorporate vengono adeguatamente raddoppiati.
       </entry>
       <entry><literal>quote_literal('O\'Reilly')</literal></entry>
       <entry><literal>'O''Reilly'</literal></entry>
      </row>

      <row>
       <entry><literal><function>quote_literal</function>(<parameter>value</parameter> <type>anyelement</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Forza il valore fornito a testo e quindi lo racchiude tra apici come un letterale.
        Apici singoli e barre inverse incorporate vengono adeguatamente raddoppiati.
       </entry>
       <entry><literal>quote_literal('O\'Reilly')</literal></entry>
       <entry><literal>'O''Reilly'</literal></entry>
      </row>

      <row>
       <entry><literal><function>quote_literal</function>(<parameter>value</parameter> <type>anyelement</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Forza il valore fornito a testo e quindi lo racchiude tra apici come un letterale.
        Apici singoli e barre inverse incorporate vengono adeguatamente raddoppiati.
       </entry>
       <entry><literal>quote_literal(42.5)</literal></entry>
       <entry><literal>'42.5'</literal></entry>
      </row>

      <row>
       <entry><literal><function>regexp_matches</function>(<parameter>stringa</parameter> <type>text</type>, <parameter>modello</parameter> <type>text</type> [, <parameter>flag</parameter> <type>text</type>])</literal></entry>
       <entry><type>setof text[]</type></entry>
       <entry>
        Restituisce tutte le substringhe catturate risultanti dal confronto di una espressione regolare
        POSIX con la <parameter>stringa</parameter>. Consultare
        <xref linkend="functions-posix-regexp" /> per ulteriori informazioni.
       </entry>
       <entry><literal>regexp_matches('foobarbequebaz', '(bar)(beque)')</literal></entry>
       <entry><literal>{bar,beque}</literal></entry>
      </row>

      <row>
       <entry><literal><function>regexp_replace</function>(<parameter>stringa</parameter> <type>text</type>, <parameter>modello</parameter> <type>text</type>, <parameter>sostituzione</parameter> <type>text</type> [, <parameter>flag</parameter> <type>text</type>])</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Rimpiazza sottostringa(e) confrontando una espressione regolare POSIX. Consultare
        <xref linkend="functions-posix-regexp" /> per ulteriori informazioni.
       </entry>
       <entry><literal>regexp_replace('Thomas', '.[mN]a.', 'M')</literal></entry>
       <entry><literal>ThM</literal></entry>
      </row>

      <row>
       <entry><literal><function>regexp_split_to_array</function>(<parameter>stringa</parameter> <type>text</type>, <parameter>modello</parameter> <type>text</type> [, <parameter>flag</parameter> <type>text</type> ])</literal></entry>
       <entry><type>text[]</type></entry>
       <entry>
        Scinde <parameter>stringa</parameter> usando una espressione regolare POSIX come
        delimitatore. Consultare <xref linkend="functions-posix-regexp" /> per ulteriori
        informazioni.
       </entry>
       <entry><literal>regexp_split_to_array('hello world', E'\\s+')</literal></entry>
       <entry><literal>{hello,world}</literal></entry>
      </row>

      <row>
       <entry><literal><function>regexp_split_to_table</function>(<parameter>stringa</parameter> <type>text</type>, <parameter>modello</parameter> <type>text</type> [, <parameter>flag</parameter> <type>text</type>])</literal></entry>
       <entry><type>setof text</type></entry>
       <entry>
        Scinde <parameter>stringa</parameter> usando una espressione regolare POSIX come
        delimitatore. Consultare <xref linkend="functions-posix-regexp" /> per ulteriori
        informazioni.
       </entry>
       <entry><literal>regexp_split_to_table('hello world', E'\\s+')</literal></entry>
       <entry><literal>hello</literal><para><literal>world</literal></para> (2 rows)</entry>
      </row>

      <row>
       <entry><literal><function>repeat</function>(<parameter>stringa</parameter> <type>text</type>, <parameter>numero</parameter> <type>int</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Ripete <parameter>stringa</parameter> lo specificato
       <parameter>numero</parameter> di volte</entry>
       <entry><literal>repeat('Pg', 4)</literal></entry>
       <entry><literal>PgPgPgPg</literal></entry>
      </row>

      <row>
       <entry><literal><function>replace</function>(<parameter>stringa</parameter> <type>text</type>,
       <parameter>da</parameter> <type>text</type>,
       <parameter>a</parameter> <type>text</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Sostituisce tutte le occorrenze in <parameter>stringa</parameter> della sottostringa
        <parameter>da</parameter> con la sottostringa <parameter>a</parameter>
       </entry>
       <entry><literal>replace('abcdefabcdef', 'cd', 'XX')</literal></entry>
       <entry><literal>abXXefabXXef</literal></entry>
      </row>

      <row>
       <entry>
        <literal><function>rpad</function>(<parameter>stringa</parameter> <type>text</type>,
        <parameter>lunga</parameter> <type>int</type>
        <optional>, <parameter>iempimento</parameter> <type>text</type></optional>)</literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>
        Estende la <parameter>stringa</parameter> alla lunghezza di
        <parameter>lunga</parameter> anteponendo i caratteri di
        <parameter>riempimento</parameter> (uno spazio per impostazione predefinita).
        Se la <parameter>stringa</parameter> è già più lunga di
        <parameter>lunga</parameter> allora essa viene troncata.
       </entry>
       <entry><literal>rpad('hi', 5, 'xy')</literal></entry>
       <entry><literal>hixyx</literal></entry>
      </row>

      <row>
      <entry><literal><function>rtrim</function>(<parameter>stringa</parameter> <type>text</type>
        <optional>, <parameter>caratteri</parameter> <type>text</type></optional>)</literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>
        Rimuove la stringa più lunga contenente solo caratteri da
        <parameter>caratteri</parameter> (uno spazio per impostazione predefinita) dalla fine di
        <parameter>stringa</parameter>
       </entry>
       <entry><literal>rtrim('trimxxxx', 'x')</literal></entry>
       <entry><literal>trim</literal></entry>
      </row>

      <row>
       <entry><literal><function>split_part</function>(<parameter>stringa</parameter> <type>text</type>,
       <parameter>delimitatore</parameter> <type>text</type>,
       <parameter>campo</parameter> <type>int</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Scinde <parameter>stringa</parameter> tramite <parameter>delimitatore</parameter>
        e restituisce il campo richiesto(partendo da 1)
       </entry>
       <entry><literal>split_part('abc~@~def~@~ghi', '~@~', 2)</literal></entry>
       <entry><literal>def</literal></entry>
      </row>

      <row>
       <entry><literal><function>strpos</function>(<parameter>stringa</parameter>, <parameter>sottostringa</parameter>)</literal></entry>
       <entry><type>int</type></entry>
       <entry>
        Posizione della sottostringa specificata(come
        <literal>position(<parameter>sottostringa</parameter> in
        <parameter>stringa</parameter>)</literal>,ma, notare l'inversione
        nell'ordine degli argomenti)         
       </entry>
       <entry><literal>strpos('high', 'ig')</literal></entry>
       <entry><literal>2</literal></entry>
      </row>

      <row> 
       <entry><literal><function>substr</function>(<parameter>string</parameter>, <parameter>posiz</parameter> <optional>, <parameter>numcarat</parameter></optional>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>
        Estrae una sottostringa (come
        <literal>substring(<parameter>stringa</parameter> from <parameter>posiz</parameter> for <parameter>numcarat</parameter>)</literal>)
       </entry> 
       <entry><literal>substr('alfabeto', 3, 2)</literal></entry>
       <entry><literal>fa</literal></entry>
      </row>

      <row>
       <entry><literal><function>to_ascii</function>(<parameter>stringa</parameter> <type>text</type>
        <optional>, <parameter>codifica</parameter> <type>text</type></optional>)</literal></entry>
       <entry><type>text</type></entry>

       <entry>
       Converte <parameter>stringa</parameter> ad <acronym>ASCII</acronym> da un altra codifica
       (supporta solo conversione da codifiche <literal>LATIN1</literal>, <literal>LATIN2</literal>,
       <literal>LATIN9</literal> e <literal>WIN1250</literal>)
       </entry>

       <entry><literal>to_ascii('Karel')</literal></entry>
       <entry><literal>Karel</literal></entry>
      </row>

      <row>
       <entry><literal><function>to_hex</function>(<parameter>numero</parameter> <type>int</type>
       o <type>bigint</type>)</literal></entry>
       <entry><type>text</type></entry>
       <entry>Converte <parameter>numero</parameter> nella sua equivalente rappresentazione
       esadecimale
       </entry>
       <entry><literal>to_hex(2147483647)</literal></entry>
       <entry><literal>7fffffff</literal></entry>
      </row>

      <row>
       <entry>
        <literal><function>translate</function>(<parameter>stringa</parameter> <type>text</type>,
        <parameter>da</parameter> <type>text</type>,
        <parameter>a</parameter> <type>text</type>)</literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>
        Ogni carattere di <parameter>string</parameter> che eguaglia
        un carattere dell'insieme <parameter>da</parameter> viene
        sostituito dal corrispondente carattere dell'insieme
        <parameter>a</parameter>
       </entry>
       <entry><literal>translate('12345', '14', 'ax')</literal></entry>
       <entry><literal>a23x5</literal></entry>
      </row>       
      
     </tbody>
    </tgroup>
   </table>

   <para>
        Vedere anche la funzione aggregata <function>string_agg</function> in
        <xref linkend="functions-aggregate"/>.
   </para>

  <table id="conversion-names">
    <title>Conversioni incorporate</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Nome conversione
        <footnote>
         <para>
          I nomi delle conversioni seguono uno schema standard di costruzione del nome:
          Il nome ufficiale della codifica sorgente con tutti i caratteri
          non-alfanumerici sostituiti da caratteri underscore, seguito da
          <literal>_to_</literal>, seguito dal nome della codifica di destinazione
          elaborato nella medesima maniera. 
            Perciò, questi nomi potrebbero deviare 
            dai nomi abituali di codifiche.
         </para>
        </footnote>
       </entry>
       <entry>Codifica sorgente</entry>
       <entry>Codifica destinazione</entry>
      </row>
     </thead>
















    <tbody>
      <row>
       <entry><literal>ascii_to_mic</literal></entry>
       <entry><literal>SQL_ASCII</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>ascii_to_utf8</literal></entry>
       <entry><literal>SQL_ASCII</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>big5_to_euc_tw</literal></entry>
       <entry><literal>BIG5</literal></entry>
       <entry><literal>EUC_TW</literal></entry>
      </row>

      <row>
       <entry><literal>big5_to_mic</literal></entry>
       <entry><literal>BIG5</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>big5_to_utf8</literal></entry>
       <entry><literal>BIG5</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>euc_cn_to_mic</literal></entry>
       <entry><literal>EUC_CN</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>euc_cn_to_utf8</literal></entry>
       <entry><literal>EUC_CN</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>euc_jp_to_mic</literal></entry>
       <entry><literal>EUC_JP</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>euc_jp_to_sjis</literal></entry>
       <entry><literal>EUC_JP</literal></entry>
       <entry><literal>SJIS</literal></entry>
      </row>

      <row>
       <entry><literal>euc_jp_to_utf8</literal></entry>
       <entry><literal>EUC_JP</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>euc_kr_to_mic</literal></entry>
       <entry><literal>EUC_KR</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>euc_kr_to_utf8</literal></entry>
       <entry><literal>EUC_KR</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>euc_tw_to_big5</literal></entry>
       <entry><literal>EUC_TW</literal></entry>
       <entry><literal>BIG5</literal></entry>
      </row>

      <row>
       <entry><literal>euc_tw_to_mic</literal></entry>
       <entry><literal>EUC_TW</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>euc_tw_to_utf8</literal></entry>
       <entry><literal>EUC_TW</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>gb18030_to_utf8</literal></entry>
       <entry><literal>GB18030</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>gbk_to_utf8</literal></entry>
       <entry><literal>GBK</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_10_to_utf8</literal></entry>
       <entry><literal>LATIN6</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_13_to_utf8</literal></entry>
       <entry><literal>LATIN7</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_14_to_utf8</literal></entry>
       <entry><literal>LATIN8</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_15_to_utf8</literal></entry>
       <entry><literal>LATIN9</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_16_to_utf8</literal></entry>
       <entry><literal>LATIN10</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_1_to_mic</literal></entry>
       <entry><literal>LATIN1</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_1_to_utf8</literal></entry>
       <entry><literal>LATIN1</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_2_to_mic</literal></entry>
       <entry><literal>LATIN2</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_2_to_utf8</literal></entry>
       <entry><literal>LATIN2</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_2_to_windows_1250</literal></entry>
       <entry><literal>LATIN2</literal></entry>
       <entry><literal>WIN1250</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_3_to_mic</literal></entry>
       <entry><literal>LATIN3</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_3_to_utf8</literal></entry>
       <entry><literal>LATIN3</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_4_to_mic</literal></entry>
       <entry><literal>LATIN4</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_4_to_utf8</literal></entry>
       <entry><literal>LATIN4</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_5_to_koi8_r</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
       <entry><literal>KOI8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_5_to_mic</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_5_to_utf8</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_5_to_windows_1251</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
       <entry><literal>WIN1251</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_5_to_windows_866</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
       <entry><literal>WIN866</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_6_to_utf8</literal></entry>
       <entry><literal>ISO_8859_6</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_7_to_utf8</literal></entry>
       <entry><literal>ISO_8859_7</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_8_to_utf8</literal></entry>
       <entry><literal>ISO_8859_8</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>iso_8859_9_to_utf8</literal></entry>
       <entry><literal>LATIN5</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>johab_to_utf8</literal></entry>
       <entry><literal>JOHAB</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>koi8_r_to_iso_8859_5</literal></entry>
       <entry><literal>KOI8</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
      </row>

      <row>
       <entry><literal>koi8_r_to_mic</literal></entry>
       <entry><literal>KOI8</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>koi8_r_to_utf8</literal></entry>
       <entry><literal>KOI8</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>koi8_r_to_windows_1251</literal></entry>
       <entry><literal>KOI8</literal></entry>
       <entry><literal>WIN1251</literal></entry>
      </row>

      <row>
       <entry><literal>koi8_r_to_windows_866</literal></entry>
       <entry><literal>KOI8</literal></entry>
       <entry><literal>WIN866</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_ascii</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>SQL_ASCII</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_big5</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>BIG5</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_euc_cn</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>EUC_CN</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_euc_jp</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>EUC_JP</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_euc_kr</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>EUC_KR</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_euc_tw</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>EUC_TW</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_iso_8859_1</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>LATIN1</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_iso_8859_2</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>LATIN2</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_iso_8859_3</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>LATIN3</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_iso_8859_4</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>LATIN4</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_iso_8859_5</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_koi8_r</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>KOI8</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_sjis</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>SJIS</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_windows_1250</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>WIN1250</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_windows_1251</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>WIN1251</literal></entry>
      </row>

      <row>
       <entry><literal>mic_to_windows_866</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
       <entry><literal>WIN866</literal></entry>
      </row>

      <row>
       <entry><literal>sjis_to_euc_jp</literal></entry>
       <entry><literal>SJIS</literal></entry>
       <entry><literal>EUC_JP</literal></entry>
      </row>

      <row>
       <entry><literal>sjis_to_mic</literal></entry>
       <entry><literal>SJIS</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>sjis_to_utf8</literal></entry>
       <entry><literal>SJIS</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>tcvn_to_utf8</literal></entry>
       <entry><literal>WIN1258</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>uhc_to_utf8</literal></entry>
       <entry><literal>UHC</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_ascii</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>SQL_ASCII</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_big5</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>BIG5</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_euc_cn</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>EUC_CN</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_euc_jp</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>EUC_JP</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_euc_kr</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>EUC_KR</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_euc_tw</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>EUC_TW</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_gb18030</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>GB18030</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_gbk</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>GBK</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_iso_8859_1</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>LATIN1</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_iso_8859_10</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>LATIN6</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_iso_8859_13</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>LATIN7</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_iso_8859_14</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>LATIN8</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_iso_8859_15</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>LATIN9</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_iso_8859_16</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>LATIN10</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_iso_8859_2</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>LATIN2</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_iso_8859_3</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>LATIN3</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_iso_8859_4</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>LATIN4</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_iso_8859_5</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_iso_8859_6</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>ISO_8859_6</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_iso_8859_7</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>ISO_8859_7</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_iso_8859_8</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>ISO_8859_8</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_iso_8859_9</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>LATIN5</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_johab</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>JOHAB</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_koi8_r</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>KOI8</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_sjis</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>SJIS</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_tcvn</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>WIN1258</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_uhc</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>UHC</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_windows_1250</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>WIN1250</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_windows_1251</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>WIN1251</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_windows_1252</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>WIN1252</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_windows_1253</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>WIN1253</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_windows_1254</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>WIN1254</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_windows_1255</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>WIN1255</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_windows_1256</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>WIN1256</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_windows_1257</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>WIN1257</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_windows_866</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>WIN866</literal></entry>
      </row>

      <row>
       <entry><literal>utf8_to_windows_874</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>WIN874</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1250_to_iso_8859_2</literal></entry>
       <entry><literal>WIN1250</literal></entry>
       <entry><literal>LATIN2</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1250_to_mic</literal></entry>
       <entry><literal>WIN1250</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1250_to_utf8</literal></entry>
       <entry><literal>WIN1250</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1251_to_iso_8859_5</literal></entry>
       <entry><literal>WIN1251</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1251_to_koi8_r</literal></entry>
       <entry><literal>WIN1251</literal></entry>
       <entry><literal>KOI8</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1251_to_mic</literal></entry>
       <entry><literal>WIN1251</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1251_to_utf8</literal></entry>
       <entry><literal>WIN1251</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1251_to_windows_866</literal></entry>
       <entry><literal>WIN1251</literal></entry>
       <entry><literal>WIN866</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1252_to_utf8</literal></entry>
       <entry><literal>WIN1252</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>windows_1256_to_utf8</literal></entry>
       <entry><literal>WIN1256</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>windows_866_to_iso_8859_5</literal></entry>
       <entry><literal>WIN866</literal></entry>
       <entry><literal>ISO_8859_5</literal></entry>
      </row>

      <row>
       <entry><literal>windows_866_to_koi8_r</literal></entry>
       <entry><literal>WIN866</literal></entry>
       <entry><literal>KOI8</literal></entry>
      </row>

      <row>
       <entry><literal>windows_866_to_mic</literal></entry>
       <entry><literal>WIN866</literal></entry>
       <entry><literal>MULE_INTERNAL</literal></entry>
      </row>

      <row>
       <entry><literal>windows_866_to_utf8</literal></entry>
       <entry><literal>WIN866</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>windows_866_to_windows_1251</literal></entry>
       <entry><literal>WIN866</literal></entry>
       <entry><literal>WIN</literal></entry>
      </row>

      <row>
       <entry><literal>windows_874_to_utf8</literal></entry>
       <entry><literal>WIN874</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>euc_jis_2004_to_utf8</literal></entry>
       <entry><literal>EUC_JIS_2004</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>ut8_to_euc_jis_2004</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>EUC_JIS_2004</literal></entry>
      </row>

      <row>
       <entry><literal>shift_jis_2004_to_utf8</literal></entry>
       <entry><literal>SHIFT_JIS_2004</literal></entry>
       <entry><literal>UTF8</literal></entry>
      </row>

      <row>
       <entry><literal>ut8_to_shift_jis_2004</literal></entry>
       <entry><literal>UTF8</literal></entry>
       <entry><literal>SHIFT_JIS_2004</literal></entry>
      </row>

      <row>
       <entry><literal>euc_jis_2004_to_shift_jis_2004</literal></entry>
       <entry><literal>EUC_JIS_2004</literal></entry>
       <entry><literal>SHIFT_JIS_2004</literal></entry>
      </row>

      <row>
       <entry><literal>shift_jis_2004_to_euc_jis_2004</literal></entry>
       <entry><literal>SHIFT_JIS_2004</literal></entry>
       <entry><literal>EUC_JIS_2004</literal></entry>
      </row>

     </tbody>
    </tgroup>
   </table>



  </sect1>


  <sect1 id="functions-binarystring">
   <title>Funzioni e operatori per stringhe binarie</title>

   <indexterm zone="functions-binarystring">
    <primary>dato binario</primary>
    <secondary>funzioni</secondary>
   </indexterm>

   <para>
    Questa sezione descrive le funzioni e gli operatori per esaminare e 
    manipolare valori del tipo <type>bytea</type>.
   </para>

   <para>
    <acronym>SQL</acronym> definisce alcune funzioni di stringa che usano
    parole chiave, invece di virgole,
    per separare gli argomenti. I dettagli sono contenuti in
    <xref linkend="functions-binarystring-sql" />.
    Alcune funzioni sono anche implementate utilizzando la
    normale sintassi di chiamata delle funzioni.
    (Consultare <xref linkend="functions-binarystring-other" />.)
   </para>
   

    <table id="functions-binarystring-sql">
    <title>Funzioni e operatori per stringhe binarie <acronym>SQL</acronym></title>
    <tgroup cols="5">
     <thead>
      <row>
       <entry>Funzione</entry>
       <entry>Tipo restituito</entry>
       <entry>Descrizione</entry>
       <entry>Esempio</entry>
       <entry>Risultato</entry>  
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal><parameter>stringa</parameter> <literal>||</literal>
        <parameter>stringa</parameter></literal></entry>
       <entry> <type>bytea</type> </entry>
       <entry>
        Concatena stringhe
        <indexterm>
         <primary>stringa binaria</primary>
         <secondary>concatenamanto</secondary>
        </indexterm>
       </entry>
       <entry><literal>E'\\\\Post'::bytea || E'\\047gres\\000'::bytea</literal></entry>
       <entry><literal>\\Post'gres\000</literal></entry>
      </row>

      <row>
       <entry><function>get_bit</function>(<parameter>stringa</parameter>, <parameter>scostamento</parameter>)</entry>
       <entry><type>int</type></entry>
       <entry>
        Estrae bit da una stringa
        <indexterm>
         <primary>get_bit</primary>
        </indexterm>
       </entry>
       <entry><literal>get_bit(E'Th\\000omas'::bytea, 45)</literal></entry>
       <entry><literal>1</literal></entry>
      </row>

      <row>
       <entry><function>get_byte</function>(<parameter>stringa</parameter>, <parameter>scostamento</parameter>)</entry>
       <entry><type>int</type></entry>
       <entry>
        Estrae un byte da una stringa
        <indexterm>
         <primary>get_byte</primary>
        </indexterm>
       </entry>
       <entry><literal>get_byte(E'Th\\000omas'::bytea, 4)</literal></entry>
       <entry><literal>109</literal></entry>
      </row>

      <row>
       <entry><literal><function>octet_length</function>(<parameter>stringa</parameter>)</literal></entry>
       <entry><type>int</type></entry>
       <entry>Numero di byte in una stringa binaria</entry>
       <entry><literal>octet_length(E'jo\\000se'::bytea)</literal></entry>
       <entry><literal>5</literal></entry>
      </row>

      <row>
       <entry><literal><function>position</function>(<parameter>sottostringa</parameter> in <parameter>stringa</parameter>)</literal></entry>
       <entry><type>int</type></entry>
       <entry>Posizione di una sottostringa specificata</entry>
      <entry><literal>position(E'\\000om'::bytea in E'Th\\000omas'::bytea)</literal></entry>
       <entry><literal>3</literal></entry>
      </row>

      <row>
       <entry><function>set_bit</function>(<parameter>stringa</parameter>,
       <parameter>scostamento</parameter>, <parameter>nuovovalore</parameter>)</entry>
       <entry><type>bytea</type></entry>
       <entry>
        Imposta un bit in una stringa
        <indexterm>
         <primary>set_bit</primary>
        </indexterm>
       </entry>
       <entry><literal>set_bit(E'Th\\000omas'::bytea, 45, 0)</literal></entry>
       <entry><literal>Th\000omAs</literal></entry>
      </row>

      <row>
       <entry><function>set_byte</function>(<parameter>stringa</parameter>,
       <parameter>scostamento</parameter>, <parameter>nuovovalore</parameter>)</entry>
       <entry><type>bytea</type></entry>
       <entry>
        Imposta un byte in una stringa
        <indexterm>
         <primary>set_byte</primary>
        </indexterm>
       </entry>
       <entry><literal>set_byte(E'Th\\000omas'::bytea, 4, 64)</literal></entry>
       <entry><literal>Th\000o@as</literal></entry>
      </row>

      <row>
       <entry><literal><function>substring</function>(<parameter>stringa</parameter> <optional>from <type>int</type></optional> <optional>for <type>int</type></optional>)</literal></entry>
       <entry><type>bytea</type></entry>
       <entry>
        Estrae una sottostringa
        <indexterm>
         <primary>substring</primary>
        </indexterm>
       </entry>
       <entry><literal>substring(E'Th\\000omas'::bytea from 2 for 3)</literal></entry>
       <entry><literal>h\000o</literal></entry>
      </row>

      <row>
       <entry>
        <literal><function>trim</function>(<optional>both</optional>
        <parameter>byte</parameter> from
        <parameter>stringa</parameter>)</literal>
       </entry>
       <entry><type>bytea</type></entry>
       <entry>
        Rimuove la più lunga stringa contenente solo i byte in
        <parameter>byte</parameter> dall'inizio e dalla
        fine di <parameter>stringa</parameter>
       </entry>
       <entry><literal>trim(E'\\000'::bytea from E'\\000Tom\\000'::bytea)</literal></entry>
       <entry><literal>Tom</literal></entry>
      </row>
     </tbody>
    </tgroup>
   </table>


   <para>
    Funzioni addizionali di manipolazione stringhe binarie sono disponibili ed
    elencate in <xref linkend="functions-binarystring-other" />. Alcune
    di queste vengono usate internamente per implementare le funzioni stringa
    standard-<acronym>SQL</acronym> elencate in <xref
    linkend="functions-binarystring-sql" />.
   </para>


<table id="functions-binarystring-other">
    <title>Altre funzioni per stringhe binarie</title>
    <tgroup cols="5">
     <thead>
      <row>
       <entry>Funzione</entry>
       <entry>Tipo restituito</entry>
       <entry>Descrizione</entry>
       <entry>Esempio</entry>
       <entry>Risultato</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>btrim</function>(<parameter>stringa</parameter>
        <type>bytea</type>, <parameter>byte</parameter> <type>bytea</type>)</literal></entry>
       <entry><type>bytea</type></entry>
       <entry>
        Rimuove la più lunga stringa consistente solo dei byte
        in <parameter>byte</parameter> dall'inizio e dalla fine di
        <parameter>stringa</parameter>
      </entry>
      <entry><literal>btrim(E'\\000trim\\000'::bytea, E'\\000'::bytea)</literal></entry>
      <entry><literal>trim</literal></entry>
     </row>

     <row>
      <entry>
       <literal><function>decode</function>(<parameter>stringa</parameter> <type>text</type>,
              <parameter>tipo</parameter> <type>text</type>)</literal>
      </entry>
      <entry><type>bytea</type></entry>
      <entry>
       Decodifica la stringa binaria contenuta in <parameter>stringa</parameter>, precedentemente codificata con
       <function>encode</function>. Il parametro tipo è lo stesso utilizzato nel codificatore <function>encode</function>.
      </entry>
      <entry><literal>decode(E'123\\000456', 'escape')</literal></entry>
      <entry><literal>123\000456</literal></entry>
     </row>

     <row>
      <entry>
       <literal><function>encode</function>(<parameter>stringa</parameter> <type>bytea</type>,
              <parameter>tipo</parameter> <type>text</type>)</literal>
      </entry>
      <entry><type>text</type></entry>
      <entry>
       Codifica la stringa binaria in rappresentazione solo-<acronym>ASCII</acronym>. I tipi
       supportati sono: <literal>base64</literal>, <literal>hex</literal>, <literal>escape</literal>.
      </entry>
      <entry><literal>encode(E'123\\000456'::bytea, 'escape')</literal></entry>
      <entry><literal>123\000456</literal></entry>
     </row>

     <row>
      <entry><literal><function>length</function>(<parameter>stringa</parameter>)</literal></entry>
      <entry><type>int</type></entry>
      <entry>
       Lunghezza della stringa binaria
       <indexterm>
        <primary>binary string</primary>
        <secondary>length</secondary>
       </indexterm>
       <indexterm>
        <primary>length</primary>
        <secondary sortas="binary string">of a binary string</secondary>
        <see>binary strings, length</see>
       </indexterm>
      </entry>
      <entry><literal>length(E'jo\\000se'::bytea)</literal></entry>
      <entry><literal>5</literal></entry>
     </row>

     <row>
      <entry><literal><function>md5</function>(<parameter>stringa</parameter>)</literal></entry>
      <entry><type>text</type></entry>
      <entry>
       Calcola l'hash MD5 di <parameter>stringa</parameter>,
       restituendo il risulato in esadecimale
      </entry>
      <entry><literal>md5(E'Th\\000omas'::bytea)</literal></entry>
      <entry><literal>8ab2d3c9689aaf18 b4958c334c82d8b1</literal></entry>
     </row>
    </tbody>
   </tgroup>
  </table>



  <para>
         <function>get_byte</function> e <function>set_byte</function> numerano il primo byte
        di una stringa binaria come il byte 0.
        <function>get_bit</function> e <function>set_bit</function> numerano i bit da
        destra all'interno di ogni byte; per esempio, il bit 0 è il bit meno significativo del
        primo byte, e il bit 15 è il più significativo del secondo byte.
   
  </para>
 </sect1>


  <sect1 id="functions-bitstring">
   <title>Funzioni e operatori per stringhe di bit</title>

   <indexterm zone="functions-bitstring">
    <primary>stringa di bit</primary>
    <secondary>funzioni</secondary>
   </indexterm>

   <para>
    Questa sezione descrive le funzioni e gli operatori per esaminare e
    manipolare stringhe di bit, che sono valori di tipo
    <type>bit</type> e <type>bit varying</type>. Oltre ai normali
    operatori di confronto, si possono usare gli operatori
    mostrati nella tabella <xref linkend="functions-bit-string-op-table" />.
    Gli operandi stringhe di bit di <literal>&amp;</literal>, <literal>|</literal>,
    e <literal>#</literal> devono avere lunghezza uguale. Quando vengono spostati
    bit, la lunghezza originale della stringa viene salvaguardata, come mostrato
    negli esempi.
   </para>


   <table id="functions-bit-string-op-table">
    <title>Operatori per stringhe di bit</title>

    <tgroup cols="4">
     <thead>
      <row>
       <entry>Operatore</entry>
       <entry>Descrizione</entry>
       <entry>Esampio</entry>
       <entry>Risultato</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry> <literal>||</literal> </entry>
       <entry>concatenamento</entry>
       <entry><literal>B'10001' || B'011'</literal></entry>
       <entry><literal>10001011</literal></entry>
      </row>

      <row>
       <entry> <literal>&amp;</literal> </entry>
       <entry>bitwise AND</entry>
       <entry><literal>B'10001' &amp; B'01101'</literal></entry>
       <entry><literal>00001</literal></entry>
      </row>

      <row>
       <entry> <literal>|</literal> </entry>
       <entry>bitwise OR</entry>
       <entry><literal>B'10001' | B'01101'</literal></entry>
       <entry><literal>11101</literal></entry>
      </row>

      <row>
       <entry> <literal>#</literal> </entry>
       <entry>bitwise XOR</entry>
       <entry><literal>B'10001' # B'01101'</literal></entry>
       <entry><literal>11100</literal></entry>
      </row>

      <row>
       <entry> <literal>~</literal> </entry>
       <entry>bitwise NOT</entry>
       <entry><literal>~ B'10001'</literal></entry>
       <entry><literal>01110</literal></entry>
      </row>

      <row>
       <entry> <literal>&lt;&lt;</literal> </entry>
       <entry>bitwise spostamento a sinistra</entry>
       <entry><literal>B'10001' &lt;&lt; 3</literal></entry>
       <entry><literal>01000</literal></entry>
      </row>

      <row>
       <entry> <literal>&gt;&gt;</literal> </entry>
       <entry>bitwise spostamento a destra</entry>
       <entry><literal>B'10001' &gt;&gt; 2</literal></entry>
       <entry><literal>00100</literal></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
    La seguenti funzioni standard-<acronym>SQL</acronym> lavorano su stringhe
    di bit oltre che su stringhe di caratteri:
    <literal><function>length</function></literal>,
    <literal><function>bit_length</function></literal>,
    <literal><function>octet_length</function></literal>,
    <literal><function>position</function></literal>,
    <literal><function>substring</function></literal>.
   </para>


   <para>
        Le seguenti funzioni lavorano su stringhe di bit oltre che 
        su stringhe binarie: 
        <literal><function>get_bit</function></literal>,
        <literal><function>set_bit</function></literal>.
        Quando si lavora con stringhe di bit, queste funzioni numerano il primo bit (più a sinistra)
        della stringa come il bit 0.
   </para>

   <para>
    In aggiunta, è possibile convertire valori interi a, o da, tipi
    <type>bit</type>.
    Alcuni esempi:
<programlisting>
44::bit(10)                    <lineannotation>0000101100</lineannotation>
44::bit(3)                     <lineannotation>100</lineannotation>
cast(-44 as bit(12))           <lineannotation>111111010100</lineannotation>
'1110'::bit(4)::integer        <lineannotation>14</lineannotation>
</programlisting>
    
    Notare che la conversione ad un solo <quote>bit</quote> significa convertire al
    <literal>bit(1)</literal>, per cui verrà coinvolto solo il bit meno
    significativo dell'intero.
   </para>

   <note>
     <para>
      Prima di <productname>PostgreSQL</productname> 8.0, la conversione da
      intero a <type>bit(n)</type> lavorava copiando gli <literal>n</literal>
      bit più a sinistra dell'intero, mentre adesso copia gli <literal>n</literal>
      bit più a destra. Inoltre, convertendo esplicitamente un intero ad una stringa di bit di
      larghezza maggiore dell'intero stesso, il segno si estenderà sulla sinistra.
     </para>
    </note>

  </sect1>


 <sect1 id="functions-matching">
  <title>Confronto con modelli</title>

  <indexterm zone="functions-matching">
   <primary>pattern matching</primary>
  </indexterm>

   <para>
    Ci sono tre approcci separati forniti da <productname>PostgreSQL</productname>
    per il confronto con modelli: il tradizionale operatore
    <acronym>SQL</acronym> <function>LIKE</function>, l'operatore
    più recente <function>SIMILAR TO</function> (aggiunto in
    SQL:1999) e le espressioni regolari stile-<acronym>POSIX</acronym>.
    Oltre aigli operatori di base <quote>questa stringa corrisponde a
    questo modello?</quote>, sono disponibili le funzioni per estrarre o
    rimpiazzare substringhe e per dividere una stringa in locazioni definite.
   </para>

   <tip>
    <para>
        Se si ha bisogno di confronti con modelli che vanno oltre questo, considerare
     la possibilità di scrivere funzioni definite dall'utente in Perl o Tcl.
    </para>
   </tip>

  <sect2 id="functions-like">
   <title><function>LIKE</function></title>

   <indexterm>
    <primary>LIKE</primary>
   </indexterm>

<synopsis>
<replaceable>string</replaceable> LIKE <replaceable>pattern</replaceable> <optional>ESCAPE <replaceable>escape-character</replaceable></optional>
<replaceable>string</replaceable> NOT LIKE <replaceable>pattern</replaceable> <optional>ESCAPE <replaceable>escape-character</replaceable></optional>
</synopsis>

    

    <para>
     Ogni <replaceable>modello</replaceable> definisce un insieme di stringhe.
     L'espressione <function>LIKE</function> restituisce true se
     <replaceable>string</replaceable> è contenuta nell'insieme di
     stringhe rappresentate dal <replaceable>modello</replaceable>. (Come
     previsto, l'espressione <function>NOT LIKE</function> restituisce
     false se <function>LIKE</function> restituisce true, e viceversa.
     Una espressione equivalente è
     <literal>NOT (<replaceable>stringa</replaceable> LIKE
      <replaceable>modello</replaceable>)</literal>).
    </para>

    <para>
     Se il <replaceable>modello</replaceable> non contiene simboli di
     percentuale o underscore, allora il modello rappresenta solo la stringa
     stessa; in questo caso <function>LIKE</function> si comporta in modo simile
     all'operatore uguale. Un sottolineato (<literal>_</literal>) in un
     <replaceable>modello</replaceable> sta per (corrisponde a) ogni singolo
     carattere; un simbolo di precentuale (<literal>%</literal>) corrosponde ad ogni sequenza
     di zero o più caratteri.
    </para>

   <para>
    Some examples:
<programlisting>
'abc' LIKE 'abc'    <lineannotation>true</lineannotation>
'abc' LIKE 'a%'     <lineannotation>true</lineannotation>
'abc' LIKE '_b_'    <lineannotation>true</lineannotation>
'abc' LIKE 'c'      <lineannotation>false</lineannotation>
</programlisting>
   </para>

   <para>
    Il modello <function>LIKE</function> effettua sempre il confronto con la stringa
    intera. Per trovare una sequenza in qualsiasi punto della stringa, il
    modello deve dunque iniziare e terminare con un simbolo di percentuale.
   </para>

   <para>
    Per confrontare un simbolo letterale underscore o di percentuale
    senza confrontare altri caratteri, il rispettivo carattere nel
    <replaceable>modello</replaceable> deve essere
    preceduto dal carattere di escape. Il carattere di escape predefinito
    è la barra inversa ma se ne può selezionare un altro
    utilizzando la clausula <literal>ESCAPE</literal>. Per confrontare lo
    stesso carattere di escape, bisogna scrivere due caratteri di escape.
   </para>

   <para>
    Notare che il carattere di barra inversa ha già uno speciale significato nei letterali
    stringa, per cui per scrivere una costante di modello che contiene una barra inversa in una
    istruzione SQL, bisogna scrivere due barre inverse (supponendo che si stia usando la sintassi
    stringa escape, consultare <xref linkend="sql-syntax-strings" />). Quindi, per scrivere un modello
    che deve confrontare una effettiva barra inversa, bisogna scrivere quattro barre inverse
    nell'istruzione. Si può evitare ciò selezionando un diverso carattere di escape
    con <literal>ESCAPE</literal>; dopodiche una barra inversa non è più speciale
    per <function>LIKE</function>. (Ma è ancora speciale per l'analizzatore di stringhe
    letterali, per cui, per esso, è ancora necessario scriverne due).
   </para>



   <para>
    È anche possibile non scrivere nessun carattere di escape scrivendo
    <literal>ESCAPE ''</literal>. Ciò disabilita effettivamente il
    meccanismo di escape, che rende impossibile la disabilitazione del significato
    speciale dei simboli di sottolineato e di percentuale nel modello.
   </para>

   <para>
    La parola chiave <token>ILIKE</token> può essere usata al posto di
    <token>LIKE</token> per rendere il confronto non sensibile alle maiuscole in conformità 
    alla localizzazione attiva. Questo non è nello standard <acronym>SQL</acronym> ma è una
    estensione di <productname>PostgreSQL</productname>.
   </para>

   <para>
    L'operatore <literal>~~</literal> è equivalente a
    <function>LIKE</function>, e <literal>~~*</literal> corrisponde a
    <function>ILIKE</function>. Ci sono anche gli operatori
    <literal>!~~</literal> e <literal>!~~*</literal> che
    rappresentano, rispettivamente, <function>NOT LIKE</function> e
    <function>NOT ILIKE</function>. Tutti questi operatori sono
    specifici di <productname>PostgreSQL</productname>.
   </para>
  </sect2>


<sect2 id="functions-similarto-regexp">
   <title>Espressioni regolari <function>SIMILAR TO</function></title>

   <indexterm>
    <primary>espressione regolare</primary>
    <!-- <seealso>pattern matching</seealso> breaks index build -->
   </indexterm>

   <indexterm>
    <primary>SIMILAR TO</primary>
   </indexterm>
   <indexterm>
    <primary>sottostringa</primary>
   </indexterm>

<synopsis>
<replaceable>string</replaceable> SIMILAR TO <replaceable>pattern</replaceable> <optional>ESCAPE <replaceable>escape-character</replaceable></optional>
<replaceable>string</replaceable> NOT SIMILAR TO <replaceable>pattern</replaceable> <optional>ESCAPE <replaceable>escape-character</replaceable></optional>
</synopsis>


   <para>
    L'operatore <function>SIMILAR TO</function> restituisce true o false
     a seconda che il suo modello corrisponda o meno alla stringa data. Esso è
    molto simile a <function>LIKE</function>, eccetto che esso interpreta
    il modello utilizzando la definizione di una espressione regolare
    standard SQL. Le espressioni regolari SQL sono un incrocio curioso tra
    la notazione <function>LIKE</function> e la notazione comune di 
    espressione regolare.
   </para>

   <para>
    L'operatore <function>SIMILAR TO</function> come <function>LIKE</function>, 
    ha successo soltanto se il suo modello uguaglia la stringa intera; Ciò 
    è diverso dalla pratica delle comuni espressioni regolari, dove il
    modello può confrontare qualsiasi parte della stringa.
    Anche
    <function>SIMILAR TO</function> come <function>LIKE</function>, utilizza
    <literal>_</literal> e <literal>%</literal> come caratteri jolly riferendosi,
    rispettivamente, ad ogni singolo carattere e ad ogni stringa, (questi sono
    paragonabili a <literal>.</literal> e <literal>.*</literal> nelle espressioni regolari
    POSIX).
   </para>



   <para>
    Oltre a queste facilitazioni prese in prestito da <function>LIKE</function>,
    <function>SIMILAR TO</function> supporta questi metacaratteri di confronto dei modelli
    presi in prestito dalle espressioni regolari POSIX:


   <itemizedlist>
    <listitem>
     <para>
      <literal>|</literal> indica un alternanza (una di due alternative).
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>*</literal> indica ripetizione del precedente elemento zero
      o più volte.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>+</literal> indica ripetizione del precedente elemento, una
      o più volte.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>?</literal> denota la ripetizione del precedente elemento zero o una volta.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>{</literal><replaceable>m</replaceable><literal>}</literal> denota la ripetizione
      dell'elemento precedente esattamente <replaceable>m</replaceable> volte.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>{</literal><replaceable>m</replaceable><literal>,}</literal> denota la ripetizione
      dell'elemento precedente <replaceable>m</replaceable> o più volte.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>{</literal><replaceable>m</replaceable><literal>,</literal><replaceable>n</replaceable><literal>}</literal>
      denota la ripetizione dell'elemento precedente almeno <replaceable>m</replaceable> e non più di  <replaceable>n</replaceable> volte.
     </para>
    </listitem>
    <listitem>
     <para>
      Le parentesi <literal>()</literal> possono essere usate per raggruppare elementi in
      un singolo insieme logico.
     </para>
    </listitem>
    <listitem>
     <para>
      Una espressione tra parentesi quadre <literal>[...]</literal> specifica una classe
      caratteri, proprio come nelle espressioni regolari POSIX.
     </para>
    </listitem>
   </itemizedlist>

        Notare che il punto  (<literal>.</literal>) non è un metacarattere
        per <function>SIMILAR TO</function>.
   </para>

   <para>
    
    Come con <function>LIKE</function>, una barra inversa disabilita lo speciale significato
    di ognuno di questi metacaratteri; oppure un diverso carattere di escape
    può essere specificato con <literal>ESCAPE</literal>.
   </para>

   <para>
        Qualche esempio:
<programlisting>
'abc' SIMILAR TO 'abc'      <lineannotation>true</lineannotation>
'abc' SIMILAR TO 'a'        <lineannotation>false</lineannotation>
'abc' SIMILAR TO '%(b|d)%'  <lineannotation>true</lineannotation>
'abc' SIMILAR TO '(b|c)%'   <lineannotation>false</lineannotation>
</programlisting>
   </para>

   <para>
    La funzione <function>substring</function> con tre parametri,
    <function>substring(<replaceable>stringa</replaceable> from
    <replaceable>modello</replaceable> for
    <replaceable>carattere-escape</replaceable>)</function>, fornisce
    l'estrazione di una sottostringa che confronta un modello di espressione
    regolare SQL. Come con <literal>SIMILAR TO</literal>, il modello
    specificato dovrà confrontare la stringa dati intera, altrimenti la
    funzione fallirà e restituirà null. Per indicare la parte del modello che
    dovrà essere restituita con successo, il modello dovrà contenere
    due occorrenze di caratteri escape seguiti da un doppio apice
    (<literal>"</literal>). Il testo che corrisponde alla porzione del modello compresa
    tra questi due marcatori viene restituita.
   </para>





   <para>
    Alcuni esempi, con <literal>#&quot;</literal> che delimita la stringa di ritorno:
<programlisting>
substring('foobar' from '%#"o_b#"%' for '#')   <lineannotation>oob</lineannotation>
substring('foobar' from '#"o_b#"%' for '#')    <lineannotation>NULL</lineannotation>
</programlisting>
   </para>
  </sect2>

  <sect2 id="functions-posix-regexp">
   <title>Espressioni regolari <acronym>POSIX</acronym></title>

   <indexterm zone="functions-posix-regexp">
    <primary>espressione regolare</primary>
    <seealso>confronto con modello</seealso>
   </indexterm>
   <indexterm>
    <primary>substring</primary>
   </indexterm>
   <indexterm>
    <primary>regexp_replace</primary>
   </indexterm>
   <indexterm>
    <primary>regexp_matches</primary>
   </indexterm>
   <indexterm>
    <primary>regexp_split_to_table</primary>
   </indexterm>
   <indexterm>
    <primary>regexp_split_to_array</primary>
   </indexterm>



   <para>
    La <xref linkend="functions-posix-table" /> elenca gli operatori
    disponibili per i confronti di modelli usando le espressioni regolari POSIX.
   </para>

   <table id="functions-posix-table">
    <title>Operatori di confronto per espressioni regolari</title>

    <tgroup cols="3">
     <thead>
      <row>
       <entry>Operatore</entry>
       <entry>Descrizione</entry>
       <entry>Esempio</entry>
      </row>
     </thead>

      <tbody>
       <row>
        <entry> <literal>~</literal> </entry>
        <entry>Confronta espressioni regolari, sensibile alle maiuscole</entry>
        <entry><literal>'thomas' ~ '.*thomas.*'</literal></entry>
       </row>

       <row>
        <entry> <literal>~*</literal> </entry>
        <entry>confronta espressioni regolari, insensibile alle maiuscole</entry>
        <entry><literal>'thomas' ~* '.*Thomas.*'</literal></entry>
       </row>

       <row>
        <entry> <literal>!~</literal> </entry>
        <entry>Non confronta espressioni regolari, sensibile alle maiuscole</entry>
        <entry><literal>'thomas' !~ '.*Thomas.*'</literal></entry>
       </row>

       <row>
        <entry> <literal>!~*</literal> </entry>
        <entry>Non confronta espressioni regolari, insensibile alle maiuscole</entry>
        <entry><literal>'thomas' !~* '.*vadim.*'</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>



    <para>
     Le espressioni regolari <acronym>POSIX</acronym> forniscono
     un mezzo più potente, per il
     confronto con modelli, degli operatori <function>LIKE</function> e
     <function>SIMILAR TO</function>.
     Alcuni strumenti Unix quali <command>egrep</command>,
     <command>sed</command>, o <command>awk</command> usano un linguaggio di
     confronto di modelli che è simile a quello descritto quì.
    </para>

    <para>
     Un'espressione regolare è una sequenza di caratteri che è una
     definizione abbreviata di un insieme di stringhe (un <firstterm>insieme
     regolare</firstterm>). Si dice che una stringa corrisponde a un'espressione regolare,
     se essa fa parte dell'insieme regolare descritto dall'espressione regolare.
     Come con <function>LIKE</function>, i caratteri del modelloi combaciano esattamente
     con i caratteri della stringa a meno che essi non siano caratteri speciali nel
     linguaggio dell'espressione regolare &mdash; ma le espressioni regolari usano
     caratteri speciali diversi da quelli usati da  <function>LIKE</function>. A
     differenza dei modelli <function>LIKE</function>, ad un'espressione regolare
     è consentito avere una corrispondenza dovunque all'interno di una stringa, a meno che
     l'espressione regolare non sia esplicitamente ancorata all'inizio o
     all'estremità della stringa.
     
    </para>

    <para>
     Alcuni esempi:
<programlisting>
'abc' ~ 'abc'    <lineannotation>true</lineannotation>
'abc' ~ '^a'     <lineannotation>true</lineannotation>
'abc' ~ '(b|d)'  <lineannotation>true</lineannotation>
'abc' ~ '^(b|c)' <lineannotation>false</lineannotation>
</programlisting>
    </para>

    <para>
        Il linguaggio dei modello <acronym>POSIX</acronym> è descritto in maggiori
        dettagli sotto.
    </para>

    <para>
     
    La funzione <function>substring</function> con due parametri,
     <function>substring(<replaceable>stringa</replaceable> from
     <replaceable>modello</replaceable>)</function>, fornisce l'estrazione di una
     sottostringa
     che corrisponde ad un modello di espressione regolare POSIX. Essa restituisce null se
     non c'è abbinamento, altrimenti restituisce la porzione del testo che corrisponde al
     modello. Ma se il modello contiene parentesi, viene restituita la porzione del testo
     che abbina la prima sottoespressione tra parentesi (quella la cui parentesi di
     sinistra viene per prima). È possibile mettere tra parentesi l'intera espressione
     se si vogliono usare parentesi all'interno di essa senza innescare la suddetta
     eccezione.  Se si necessitano parentesi nel modello prima della espressioneespressione che si
     vuole estrarre, vedere le parentesi non catturanti
     descritte sotto.
    </para>

   <para>
    Alcuni esempi:
<programlisting>
substring('foobar' from 'o.b')     <lineannotation>oob</lineannotation>
substring('foobar' from 'o(.)b')   <lineannotation>o</lineannotation>
</programlisting>
   </para>

    <para>
    La funzione <function>regexp_replace</function> fornisce sostituzioni di nuovo
     testo per sottostringhe che combaciano con modelli di espressioni regolari POSIX.
     Essa ha la sintassi
     <function>regexp_replace</function>(<replaceable>sorgente</replaceable>,
     <replaceable>modello</replaceable>, <replaceable>sostituzione</replaceable>
     <optional>, <replaceable>flags</replaceable> </optional>).
     La stringa <replaceable>sorgente</replaceable> viene restituita non modificata se
     non c'è abbinamento con il <replaceable>modello</replaceable>. Se c'è una
     corrispondenza, la stringa <replaceable>sorgente</replaceable> viene restituita con la
     stringa <replaceable>sostituzione</replaceable> che rimpiazza la sottostringa
     corrispondente. La stringa <replaceable>sostituzione</replaceable> può contenere
     <literal>\</literal><replaceable>n</replaceable>, dove <replaceable>n</replaceable> è un valore da
     <literal>1</literal> a <literal>9</literal>, per indicare che la sottostringa sorgente che
     corrisponde alla <replaceable>n</replaceable>-esima sottoespressione parentesizzata deve essere
     inserita, ed essa può contenere <literal>\&amp;</literal> per indicare che deve 
     essere inserita la sottostringa che abbina il modello intero. Scrivere
     <literal>\\</literal> se si vuole inserire un letterale barra inversa nel testo di
     sostituzione. (Come sempre, ricordarsi di raddoppiare le barre inverse
     scritte nella costante letterale stringa, presupponendo che si stia
     utilizzando la sintassi escape di stringa).
     Il parametro <replaceable>flags</replaceable> è un stringa di testo opzionale contenente
     zero o più flag a lettera singola che cambiano il comportamento
     della funzione. Il flag <literal>i</literal> specifica un confronto non sensibile alle
     maiuscole, mentre il flag <literal>g</literal> specifica la sostituzione di ogni sottostringa
     abbinata e non solo della prima. Altri flag supportati sono
     descritti nella tabella <xref linkend="posix-embedded-options-table" />.
    </para>

   <para>
    Alcuni esempi:
<programlisting>
regexp_replace('foobarbaz', 'b..', 'X')
                                   <lineannotation>fooXbaz</lineannotation>
regexp_replace('foobarbaz', 'b..', 'X', 'g')
                                   <lineannotation>fooXX</lineannotation>
regexp_replace('foobarbaz', 'b(..)', E'X\\1Y', 'g')
                                   <lineannotation>fooXarYXazY</lineannotation>
</programlisting>
   </para>

    <para>
        La funzione <function>regexp_matches</function> ritorna un array di testo di
        tutte le sottostringhe catturate che risultano corrispondere a un modello
        di espressione regolare POSIX. Essa ha la sintassi
        <function>regexp_matches</function>(<replaceable>stringa</replaceable>, <replaceable>modello</replaceable>
        <optional>, <replaceable>flag</replaceable> </optional>).
        La funzione può restituire nessuna riga, una riga, o molte righe (vedere
        la flag <literal>g</literal> sotto). Se il <replaceable>modello</replaceable>
        non corrisponde, la funzione non restituisce nessuna riga. Se il modello
        contiene sottoespressioni non parentesizzate, allora ogni riga
        ritornata è un array di testo di un solo elemento contenente la sottostringa
        che combacia con l'intero modello. Se il modello contiene sottoespressioni tra parentesi,
        la funzione ritorna un array di testo di cui
        l'<replaceable>n</replaceable>-simo è la sottostringa corrispondente all'<replaceable>n</replaceable>-sima sottoespressione
        tra parentesi del modello
        (senza contare le parentesi <quote>non catturanti</quote>; Vedere sotto per
        dettagli).
        Il parametro <replaceable>flag</replaceable> è una stringa di testo opzionale
        contenente zero o più flag di una lettera che cambiano il comportamento della 
        funzione. La flag <literal>g</literal> fa sì che la funzione trovi ogni
        occorrenza nella stringa, non solo la prima, e restituisca una riga per
        ogni occorrenza. Altre flag supportate sono descritte in
        <xref linkend="posix-embedded-options-table"/>.
    </para>

   <para>
    Alcuni esempi:
<programlisting>
SELECT regexp_matches('foobarbequebaz', '(bar)(beque)');
 regexp_matches 
----------------
 {bar,beque}
(1 row)

SELECT regexp_matches('foobarbequebazilbarfbonk', '(b[^b]+)(b[^b]+)', 'g');
 regexp_matches 
----------------
 {bar,beque}
 {bazil,barf}
(2 rows)

SELECT regexp_matches('foobarbequebaz', 'barbeque');
 regexp_matches 
----------------
 {barbeque}
(1 row)
</programlisting>
   </para>

   <para>
        È possibile forzare <function>regexp_matches()</function> a ritornare sempre 
        una riga usando una sotto-select; Questo è particolarmente utile
        in una <literal>SELECT</literal> quando si vuole che tutte le righe siano
        ritornate, non solo quelle corrispondenti al modello:
<programlisting>
SELECT col1, (SELECT regexp_matches(col2, '(bar)(beque)')) FROM tab;
</programlisting>
   </para>

    <para>
     La funzione <function>regexp_split_to_table</function> divide una stringa utilizzando un
     modello di espressione regolare POSIX come delimitatore. Essa ha la sintassi
     <function>regexp_split_to_table</function>(<replaceable>stringa</replaceable>, <replaceable>modello</replaceable>
     <optional>, <replaceable>flag</replaceable> </optional>).
     Se non c'è abbinamento con il <replaceable>modello</replaceable>, la funzione restituisce la
     <replaceable>stringa</replaceable>. Se c'è almeno un abbinamento, per ogni abbinamento essa
     restituisce il testo dalla fine del precedente abbinamento (o dall'inizio della stringa)
     all'inizio dell'attuale abbinamento. Quando non ci sono più corrispondenze, essa
     restituisce il testo dalla fine dell'ultimo abbinamento alla fine della stringa.
     Il parametro <replaceable>flag</replaceable> è un opzionale stringa di testo contenente
     zero o più flag a singola-lettera che modifica il comportamento della funzione.
     <function>regexp_split_to_table</function> supporta i flag descritti nella tabella
     <xref linkend="posix-embedded-options-table" />.
    </para>

    <para>
     
    La funzione <function>regexp_split_to_array</function> si comporta come
     <function>regexp_split_to_table</function>, eccetto che <function>regexp_split_to_array</function>
     restituisce i suoi risultati come un'array di <type>testo</type>. Essa usa la sintassi
     <function>regexp_split_to_array</function>(<replaceable>stringa</replaceable>, <replaceable>modello</replaceable>
     <optional>, <replaceable>flag</replaceable> </optional>).
     I parametri sono gli stessi di <function>regexp_split_to_table</function>.
    </para>

   <para>
    Alcuni esempi:
<programlisting>

SELECT foo FROM regexp_split_to_table('the quick brown fox jumped over the lazy dog', E'\\s+') AS foo;
  foo   
--------
 the    
 quick  
 brown  
 fox    
 jumped 
 over   
 the    
 lazy   
 dog    
(9 rows)

SELECT regexp_split_to_array('the quick brown fox jumped over the lazy dog', E'\\s+');
              regexp_split_to_array             
------------------------------------------------
 {the,quick,brown,fox,jumped,over,the,lazy,dog}
(1 row)

SELECT foo FROM regexp_split_to_table('the quick brown fox', E'\\s*') AS foo;
 foo 
-----
 t         
 h         
 e         
 q         
 u         
 i         
 c         
 k         
 b         
 r         
 o         
 w         
 n         
 f         
 o         
 x         
(16 rows)
</programlisting>
   </para>

   <para>
    
    Come dimostra l'ultimo esempio, la funzione regexp split ignora
    abbinamenti con lunghezza-zero che si verificano all'inizio o alla fine della stringa
    o immediatamente dopo un precedente abbinamento. Ciò è contrario alla esatta
    definizione di confronto regexp implementata da
    <function>regexp_matches</function>, ma in pratica è il comportamento più
    conveniente. Altri sistemi software come Perl usano simili definizioni.
   </para>

<!-- derived from the re_syntax.n man page -->

   <sect3 id="posix-syntax-details">
    <title>Dettagli sulle espressioni regolari</title>

   <para>
    Le espressioni regolari <productname>PostgreSQL</productname> vengono implementate
    usando un pacchetto scritto da Henry Spencer. Gran parte delle
    descrizioni delle espressioni regolari esposte sotto è copiata letteralmente
    dal suo manuale.
   </para>


   <para>
    Le espressioni regolari (<acronym>RE</acronym>), come definite in
    <acronym>POSIX</acronym> 1003.2, si presentano in due forme:
    <acronym>RE</acronym> <firstterm>estesa</firstterm> o <acronym>ERE</acronym>
    (all'incirca quella di <command>egrep</command>), e
    <acronym>RE</acronym> <firstterm>di base</firstterm> o <acronym>BRE</acronym>
    (all'incirca quella di <command>ed</command>).
    <productname>PostgreSQL</productname> supporta ambedue le forme, e
    implementa alcune estensioni
    che non sono nello standard POSIX, ma che sono state comunque ampiamente usate
    per la loro validità in linguaggi di programmazione quali Perl e Tcl.
    In questa documentazione, le <acronym>RE</acronym> che usano queste estensioni
    non-POSIX sono chiamate <acronym>RE</acronym> <firstterm>avanzate</firstterm> o
    <acronym>ARE</acronym>. Le ARE sono un sottoinsieme delle ERE,
    ma le BRE hanno maggiori incompatibilità notazionali (oltre ad essere
    molto più limitate).
    Verranno descritte prima le forme ARE ed ERE, rilevando le caratteristiche che
    si applicano solo alle ARE e in seguito come si differenziano dalle BRE.
   </para>

   <note>
    <para>
        <productname>PostgreSQL</productname> inizialmente presume sempre che un'espressione regolare
        segua le regole ARE. Comunque, le più limitate regole ERE o BRE posso essere scelte
        prececendo la RE da un'<firstterm>opzione</firstterm>,
        come descritto in <xref linkend="posix-metasyntax" />.
        Questo può essere utile per compatibilità con applicazioni che si aspettano
        esattamente le regole <acronym>POSIX</acronym> 1003.2.
    </para>
   </note>

   <para>
    Una espressione regolare è definita come una o più
    <firstterm>diramazioni</firstterm>, separate da
    <literal>|</literal>. Essa confronta ogni cosa che corrisponde ad almeno una
    delle diramazioni.
   </para>

   <para>
    Una diramazione è composta da zero o più <firstterm>atomi quantificati</firstterm> o
    <firstterm>vincoli</firstterm>, concatenati tra loro.
    Essa corrisponde ad un confronto per il primo, 
    seguita da un confronto per il secondo, ecc;
    Una ramificazione vuota equivale a una stringa vuota.
   </para>

   <para>
    Un atomo quantificato è un <firstterm>atomo</firstterm> 
    seguito da un singolo <firstterm>quantificatore</firstterm>.
    Senza un quantificatore, esso corrisponde ad un occorrenza dell'atomo.
    Con un quantificatore, esso può corrispondere ad un certo numero
    di occorrenze dell'atomo. Un <firstterm>atomo</firstterm> può
    essere una delle possibilità mostrate nella tabella <xref linkend="posix-atoms-table" />.
    I possibili quantificatori ed il loro significato sono mostrati nella tabella
    <xref linkend="posix-quantifiers-table" />.
   </para>

   <para>
    
    Un <firstterm>vincolo</firstterm> corrisponde ad una stringa vuota, 
    ma combacia solo quando
    vengono incontrate specifiche condizioni. Un vincolo può essere usato quando può
    essere usato un atomo, ad eccezione che esso non sia seguito da un quantificatore.
    Un semplice vincolo è mostrato nella tabella
    <xref linkend="posix-constraints-table" />;
    Alcuni altri vincoli sono descritti in seguito.
   </para>

   <table id="posix-atoms-table">
    <title>Atomi nelle espressioni regolari</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Atomo</entry>
       <entry>Descrizione</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>(</literal><replaceable>re</replaceable><literal>)</literal> </entry>
       <entry> (dove <replaceable>re</replaceable> è una espressione regolare)
       corrisponde ad un confronto con
       <replaceable>re</replaceable>, con il confronto notato per un possibile rapporto </entry>
       </row>

       <row>
       <entry> 
        <literal>(?:</literal><replaceable>re</replaceable><literal>)</literal> 
        </entry>
       <entry> come sopra, ma il confronto non è notato per un rapporto
       (un insieme di parentesi <quote>non-catturanti</quote>)
       (solo ARE) </entry>
       </row>

       <row>
       <entry> <literal>.</literal> </entry>
       <entry> confronta ogni singolo carattere </entry>
       </row>

       <row>
       <entry> <literal>[</literal><replaceable>carat</replaceable><literal>]</literal> </entry>
       <entry> una <firstterm>espressione tra parentesi quadre</firstterm>,
       confronta ognuno dei <replaceable>carat</replaceable> (consultare
       <xref linkend="posix-bracket-expressions" /> per ulteriori dettagli) </entry>
       </row>

       <row>
       <entry> <literal>\</literal><replaceable>k</replaceable> </entry>
       <entry> (dove <replaceable>k</replaceable> è un carattere non-alfabetico)
       confronta quel carattere preso come un carattere ordinario,
       per esempio <literal>\\</literal> confronta un carattere di barra inversa </entry>
       </row>

       <row>
       <entry> <literal>\</literal><replaceable>c</replaceable> </entry>
       <entry> dove <replaceable>c</replaceable> è alfanumerico
       (eventualmente seguito da altri caratteri)
       è un <firstterm>escape</firstterm>, 
        consultare <xref linkend="posix-escape-sequences" />
       (solo per le ARE; Nelle ERE e nelle BRE, 
        viene confrontato <replaceable>c</replaceable>) </entry>
       </row>

       <row>
       <entry> <literal>{</literal> </entry>
       <entry> quando seguita da un carattere che non sia una cifra,
       confronta il carattere a sinistra della parentesi <literal>{</literal>;
       quando seguita da una cifra, essa è l'inizio di un 
       <replaceable>limite</replaceable> (vedere sotto) </entry>
       </row>

       <row>
       <entry> <replaceable>x</replaceable> </entry>
       <entry> dove <replaceable>x</replaceable> è un singolo carattere senza nessuna altro
       significato, confronta quel carattere</entry>
       </row>
      </tbody>
     </tgroup>
    </table>


   <para>
        Una RE non puà terminare con  <literal>\</literal>.
   </para>

   <note>
    <para>
     Ricordare che la barra inversa (<literal>\</literal>) ha già uno speciale
     significato nei letterali stringa di <productname>PostgreSQL</productname>.
     Per scrivere una costante di un modello che contiene una barra inversa,
     bisogna scrivere due barre inverse nell'istruzione, presupponendo di utilizzare la
     sintassi di stringa escape (consultare <xref linkend="sql-syntax-strings" />).
    </para>
   </note>


   
   <table id="posix-quantifiers-table">
    <title>Quantificatori nelle espressioni regolari</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Quantificatore</entry>
       <entry>Confronti</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>*</literal> </entry>
       <entry> una sequenza di 0 o più confronti dell'atomo </entry>
       </row>

       <row>
       <entry> <literal>+</literal> </entry>
       <entry> una sequenza di uno o più confronti dell'atomo </entry>
       </row>

       <row>
       <entry> <literal>?</literal> </entry>
       <entry> una sequenza di 0 o 1 confronti dell'atomo </entry>
       </row>

       <row>
       <entry> <literal>{</literal><replaceable>m</replaceable><literal>}</literal> </entry>
       <entry> 
            una sequenza di esattamente <replaceable>m</replaceable> 
            confronti dell'atomo </entry>
       </row>

       <row>
       <entry> <literal>{</literal><replaceable>m</replaceable><literal>,}</literal> </entry>
       <entry> una sequenza di <replaceable>m</replaceable> 
            o più confronti dell'atomo </entry>
       </row>

       <row>
       <entry>
       <literal>{</literal><replaceable>m</replaceable><literal>,</literal><replaceable>n</replaceable><literal>}</literal> </entry>
       <entry> una sequenza di confronti dell'atomo da <replaceable>m</replaceable> fino a <replaceable>n</replaceable>
       (compreso); <replaceable>m</replaceable> non può essere maggiore di
       <replaceable>n</replaceable> </entry>
       </row>

       <row>
       <entry> <literal>*?</literal> </entry>
       <entry> versione non-avida di <literal>*</literal> </entry>
       </row>

       <row>
       <entry> <literal>+?</literal> </entry>
       <entry> versione non-avida di <literal>+</literal> </entry>
       </row>

       <row>
       <entry> <literal>??</literal> </entry>
       <entry> versione non-avida di <literal>?</literal> </entry>
       </row>

       <row>
       <entry> <literal>{</literal><replaceable>m</replaceable><literal>}?</literal> </entry>
       <entry> versione non-avida di <literal>{</literal><replaceable>m</replaceable><literal>}</literal> </entry>
       </row>

       <row>
       <entry> <literal>{</literal><replaceable>m</replaceable><literal>,}?</literal> </entry>
       <entry> versione non-avida di <literal>{</literal><replaceable>m</replaceable><literal>,}</literal> </entry>
       </row>

       <row>
       <entry>
       <literal>{</literal><replaceable>m</replaceable><literal>,</literal><replaceable>n</replaceable><literal>}?</literal> </entry>
       <entry> versione non-avida di <literal>{</literal><replaceable>m</replaceable><literal>,</literal><replaceable>n</replaceable><literal>}</literal> </entry>
       </row>
      </tbody>
     </tgroup>
    </table>


   
   <para>
    Le forme che utilizzano 
    <literal>{</literal><replaceable>...</replaceable><literal>}</literal>
    sono conosciute come <firstterm>limiti</firstterm>.
    I numeri <replaceable>m</replaceable> e <replaceable>n</replaceable> in un limite sono
    interi decimali senza segno con estensione consentita da 0 a 255 compreso.
   </para>

    <para>
        I quantificatori <firstterm>non-avidi</firstterm> 
        (disponibili solo nelle ARE) confrontano
        le stessa possibilità dei loro simili corrispondenti normali 
        (<firstterm>avidi</firstterm>),
     ma preferiscono il più piccolo numero di confronti invece del massimo
     numero di confronti.
     Consultare <xref linkend="posix-matching-rules" /> per ulteriori dettagli.
   </para>

   <note>
    <para>
     Un quantificatore non può venire subito dopo un altro quantificatore.
     Un quantificatore non può
     iniziare un'espressione o una sottoespressione o seguire
     <literal>^</literal> o <literal>|</literal>.
     
    </para>
   </note>

   <table id="posix-constraints-table">
    <title>Vincoli nelle espressioni regolari</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Vincolo</entry>
       <entry>Descrizione</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>^</literal> </entry>
       <entry> confronto all'inizio della stringa </entry>
       </row>

       <row>
       <entry> <literal>$</literal> </entry>
       <entry> confronto alla fine della stringa </entry>
       </row>

       <row>
       <entry> 
        <literal>(?=</literal><replaceable>re</replaceable><literal>)</literal> 
       </entry>
       <entry> <firstterm>lookahead positivo</firstterm> confronta ogni punto
       in cui una sottostringa abbina l'inizio della <replaceable>re</replaceable>
       (solo ARE) </entry>
       </row>

       <row>
       <entry> 
        <literal>(?!</literal><replaceable>re</replaceable><literal>)</literal> 
        </entry>
       <entry> <firstterm>lookahead negativo</firstterm> confronta ogni punto
       in cui una sottostringa non abbina l'inizio della <replaceable>re</replaceable>
       (solo ARE) </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
  
 

   <para>
    I vincoli lookahead non possono contenere <firstterm>riferimenti all'indietro</firstterm>
    (consultare <xref linkend="posix-escape-sequences" />),
    e tutte le parentesi in essi contenute sono considerate non-catturanti.
   </para>
   </sect3>

   <sect3 id="posix-bracket-expressions">
    <title>Espressioni tra parentesi quadre</title>

   <para>
    
    Una <firstterm>espressione tra parentesi quadre</firstterm> è un elenco di
    caratteri racchiusi tra <literal>[]</literal>. Essa normalmente combacia con
    ogni singolo carattere dell'elenco (ma vedere sotto). Se l'elenco comincia con
    <literal>^</literal>, essa abbina ogni singolo carattere
    <emphasis>non</emphasis> compreso nell'elenco.
    Se due caratteri dell'elenco
    sono separati da <literal>-</literal>, questa è una
    scorciatoia per indicare l'intervallo completo dei caratteri compresi
    tra loro due nella sequenza di collazione,
    per esempio <literal>[0-9]</literal> in <acronym>ASCII</acronym> abbina
    ogni cifra decimale. è illegale per due estensioni codividere un
    punto finale, per esempio <literal>a-c-e</literal>. Le estensioni sono completamente
    dipendenti dalla sequenza di collazione, per cui programmi portabili dovrebbero evitare
    di usarle.
   </para>

   <para>
    Per includere un letterale <literal>]</literal> nell'elenco, renderlo primo
    carattere (al seguito di un possibile <literal>^</literal>). Per
    includere un letterale <literal>-</literal>, renderlo primo o ultimo
    carattere, o secondo punto finale di un'estensione. Per usare un letterale
    <literal>-</literal> come primo punto finale di un'estensione, racchiuderlo
    tra <literal>[.</literal> e <literal>.]</literal> per renderlo un
    elemento di collazione (vedere sotto). Con l'eccezione di questi caratteri,
    usando alcune combinazioni <literal>[</literal>
    (vedere il seguente paragrafo), ed escape (solo ARE), tutti gli altri caratteri
    speciali perdono il loro significato speciale all'interno di una espressione tra parentesi
    quadre. In particolare, <literal>\</literal> non è speciale quando segue
    le regole ERE o BRE, benchè esso sia speciale (come introduttore di un escape)
    in ARE.
   </para>

    <note>
        <para>
            Nota per il revisore: il paragrafo successivo mi dà problemi, specialmente 
            il verbo collate, che in italiano è urend (collazionare). 
        </para>
    </note>
   <para>
    Within a bracket expression, a collating element (a character, a
    multiple-character sequence that collates as if it were a single
    character, or a collating-sequence name for either) enclosed in
    <literal>[.</literal> and <literal>.]</literal> stands for the
    sequence of characters of that collating element.  The sequence is
    treated as a single element of the bracket expression's list.  This
    allows a bracket
    expression containing a multiple-character collating element to
    match more than one character, e.g., if the collating sequence
    includes a <literal>ch</literal> collating element, then the RE
    <literal>[[.ch.]]*c</literal> matches the first five characters of
    <literal>chchcc</literal>.
   </para>

   <note>
    <para>
     <productname>PostgreSQL</productname> attualmente non supporta elementi di collazione multicarattere.
     Questa informazione descrive possibili futuri comportamenti.
    </para>
   </note>

   <para>
    Dentro un espressione tra parentesi quadre, un elemento di collazione racchiuso tra
    <literal>[=</literal> e <literal>=]</literal> è una <firstterm>classe di equivalenza</firstterm>,
    che corrisponde alla sequenza di caratteri di tutti gli elementi di collazione
    equivalenti a quello, includendo se stesso. (Se non ci sono altri elementi di
    collazione equivalenti, il trattamento è lo stesso come se i delimitatori
    includenti fossero stati <literal>[.</literal> e
    <literal>.]</literal>). Per esempio, se <literal>o</literal> e
    <literal>^</literal> sono i membri di una classe di equivalenza, quindi
    <literal>[[=o=]]</literal>, <literal>[[=^=]]</literal>, e
    <literal>[o^]</literal> sono tutti sinonimi. Una classe di equivalenza
    non può essere il punto finale di un intervallo.
   </para>

   <para>
    Dentro un'espressione tra parentesi quadre, il nome di una classe di caratteri
    racchiuso tra <literal>[:</literal> e <literal>:]</literal> sta
    per l'elenco di tutti i caratteri appartenenti a quella classe. Nomi standard di
    classi di caratteri sono: <literal>alnum</literal>,
    <literal>alpha</literal>, <literal>blank</literal>,
    <literal>cntrl</literal>, <literal>digit</literal>,
    <literal>graph</literal>, <literal>lower</literal>,
    <literal>print</literal>, <literal>punct</literal>,
    <literal>space</literal>, <literal>upper</literal>,
    <literal>xdigit</literal>. Questo sta per le classi di caratteri
    definite in
    <citerefentry><refentrytitle>ctype</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
    Una localizzazione può prevederne altre. 
    Una classe di caratteri non può essere usata come
    un punto finale di un intervallo.
   </para>


   <para>
    Ci sono due casi speciali di espressioni tra parentesi quadre: le espressioni
    <literal>[[:&lt;:]]</literal> e
    <literal>[[:&gt;:]]</literal> sono vincoli,
    abbinano stringhe vuote, rispettivamente, all'inizio e alla
    fine di una parola. Una parola è definita come una sequenza
    di caratteri che non è preceduta nè seguita da caratteri. 
    Un carattere parola è un carattere <literal>alnum</literal> (come
    definito da
    <citerefentry><refentrytitle>ctype</refentrytitle><manvolnum>3</manvolnum></citerefentry>)
    o un carattere di sottolineatura. Questa è una estensione, compatibile con, ma non
    specificato da <acronym>POSIX</acronym> 1003.2 e dovrebbe essere usato con attenzione
    nei software intesi per essere portabili su altri sistemi.
    I vincoli escape descritti di seguito sono normalmente preferibili (essi
    non sono più standard, ma sono certamente più facili da scrivere).
   </para>
   </sect3>







   <sect3 id="posix-escape-sequences">
    <title>Escape nelle espressioni regolari</title>

   <para>
   
    Gli <firstterm>escape</firstterm> sono sequenze speciali che iniziano con <literal>\</literal>
    seguito da un carattere alfanumerico. Gli escape si presentano in diverse varietà:
    per immissioni di caratteri, per scorciatoie di classi, per vincoli escape, e per riferimenti all'indietro.
    Una <literal>\</literal> seguita da un carattere alfanumerico ma non costituente un valido
    escape è illegale nelle ARE.
    Nelle ERE, non ci sono escape: al di fuori di una espressione tra parentesi quadre,
    una <literal>\</literal> seguita da un carattere alfanumerico sta solamente ad indicare
    quel carattere come un carattere ordinario e dentro una espressione tra parentesi quadre,
    <literal>\</literal> è un carattere ordinario.
    (Quest'ultima è l'unica attuale incompatibilità tra le ERE e le ARE).
   </para>

   <para>
    Gli <firstterm>escape per immissione caratteri</firstterm> esistono per rendere più facile specificare
    caratteri non-stampabili ed altri fastidiosi caratteri nelle RE. Essi sono mostrati
    nella tabella <xref linkend="posix-character-entry-escapes-table" />.
    
   </para>

   <para>
    Gli <firstterm>escape per scorciatoie di classe</firstterm> forniscono scorciatoie per certi
    classi di caratteri normalmente utilizzate. Esse sono
    mostrate nella tabella <xref linkend="posix-class-shorthand-escapes-table" />.
   </para>

   <para>
    Un <firstterm>escape di vincolo</firstterm> è un vincolo,
    abbinante una stringa vuota se le specifiche condizioni sono soddisfatte,
    scritto come un escape. Essi sono
    mostrati nella tabella <xref linkend="posix-constraint-escapes-table" />.
   </para>

   <para>
    Un <firstterm>riferimento all'indietro</firstterm> (<literal>\</literal><replaceable>n</replaceable>) abbina la
    stessa stringa abbinata dalla precedente sottoespressione specificata
    dal numero <replaceable>n</replaceable>
    (consultare la tabella <xref linkend="posix-constraint-backref-table" />). Per esempio,
    <literal>([bc])\1</literal> abbina <literal>bb</literal> o <literal>cc</literal>
    ma non <literal>bc</literal> o <literal>cb</literal>.
    La sottoespressione deve interamente precedere il riferimento all'indietro nelle RE.
    Le subespressioni sono numerate secondo l'ordine della parentesi di apertura.
    Le parentesi non-catturanti non definiscono subespressioni.
   </para>

   <note>
    <para>
     Ricordarsi che l'escape in testa <literal>\</literal> dovrà essere
     raddoppiato quando si immette il modello come una costante stringa SQL. Per esempio:
<programlisting>
'123' ~ E'^\\d{3}' <lineannotation>true</lineannotation>
</programlisting>
    </para>
   </note>

   
<table id="posix-character-entry-escapes-table">
    <title>Escape per immissione caratteri nelle espressioni regolari</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Escape</entry>
       <entry>Descrizione</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>\a</literal> </entry>
       <entry> carattere di attenzione (campanello), come in C </entry>
       </row>

       <row>
       <entry> <literal>\b</literal> </entry>
       <entry> backspace, come in C </entry>
       </row>

       <row>
       <entry> <literal>\B</literal> </entry>
       <entry> sinonimo per <literal>\</literal> aiuta a ridurre la necessità di raddoppiare le barre
       inverse </entry>
       </row>

       <row>
       <entry> <literal>\c</literal><replaceable>X</replaceable> </entry>
       <entry> (dove <replaceable>X</replaceable> è qualsiasi carattere) il carattere i cui 
       5 bit di ordine più basso sono gli stessi di 
       <replaceable>X</replaceable>, e gli altri bit sono tutti a zero </entry>
       </row>

       <row>
       <entry> <literal>\e</literal> </entry>
       <entry> il carattere il cui nome di sequenza di collazione
       è <literal>ESC</literal>,
       o in mancanza di questo, il carattere il cui valore ottale è 033 </entry>
       </row>

       <row>
       <entry> <literal>\f</literal> </entry>
       <entry> avanzamento pagina, come in C </entry>
       </row>

       <row>
       <entry> <literal>\n</literal> </entry>
       <entry> nuova riga, come in C </entry>
       </row>

       <row>
       <entry> <literal>\r</literal> </entry>
       <entry> ritorno carrello, come in C </entry>
       </row>

       <row>
       <entry> <literal>\t</literal> </entry>
       <entry> tabulazione orizzontale, come in C </entry>
       </row>

       <row>
       <entry> <literal>\u</literal><replaceable>wxyz</replaceable> </entry>
       <entry> (dove <replaceable>wxyz</replaceable> sono esattamente quattro cifre esadecimali)
       il carattere UTF16 (Unicode, 16-bit) <literal>U+</literal><replaceable>wxyz</replaceable>
       nel byte ordering locale </entry>
       </row>

       <row>
       <entry> <literal>\U</literal><replaceable>stuvwxyz</replaceable> </entry>
       <entry> (dove <replaceable>stuvwxyz</replaceable> sono esattamente otto cifre
       esadecimali)
       riservato per una estensione Unicode a 32 bit piuttosto ipotetica
       </entry> 
       </row>

       <row>
       <entry> <literal>\v</literal> </entry>
       <entry> tabulazione verticale, come in C </entry>
       </row>

       <row>
       <entry> <literal>\x</literal><replaceable>hhh</replaceable> </entry>
       <entry> (dove <replaceable>hhh</replaceable> è una sequenza di cifre
       esadecimali)
       il carattere il cui valore esadecimale è
       <literal>0x</literal><replaceable>hhh</replaceable>
       (un singolo carattere non importa quante cifre esadecimali sono usate)
       </entry>
       </row>

       <row>
       <entry> <literal>\0</literal> </entry>
       <entry> il carattere il cui valore è <literal>0</literal> </entry>
       </row>

       <row>
       <entry> <literal>\</literal><replaceable>xy</replaceable> </entry>
       <entry> (dove <replaceable>xy</replaceable> è esattamente due cifre ottali,
       e non è un <firstterm>riferimento all'indietro</firstterm>)
       il carattere il cui valore ottale è
       <literal>0</literal><replaceable>xy</replaceable> </entry>
       </row>

       <row>
       <entry> <literal>\</literal><replaceable>xyz</replaceable> </entry>
       <entry> (dove <replaceable>xyz</replaceable> è esattamente tre cifre ottali,
       e non è un <firstterm>riferimento all'indietro</firstterm>)
       il carattere il cui valore ottale è
       <literal>0</literal><replaceable>xyz</replaceable> </entry>
       </row>
      </tbody>
     </tgroup>
</table>


   <para>
    Le cifre esadecimali sono <literal>0</literal>-<literal>9</literal>,
    <literal>a</literal>-<literal>f</literal>, e <literal>A</literal>-<literal>F</literal>.
    Le cifre ottali sono <literal>0</literal>-<literal>7</literal>.
   </para>

   <para>
    Il carattere escape viene sempre preso come un carattere ordinario.
    Per esempio, <literal>\135</literal> è <literal>]</literal> in ASCII, ma
    <literal>\135</literal> non termina una espressione tra parentesi quadre.
   </para>

   <table id="posix-class-shorthand-escapes-table">
    <title>Escape per scorciatoie di classe nelle espressioni regolari</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Escape</entry>
       <entry>Descrizione</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>\d</literal> </entry>
       <entry> <literal>[[:digit:]]</literal> </entry>
       </row>

       <row>
       <entry> <literal>\s</literal> </entry>
       <entry> <literal>[[:space:]]</literal> </entry>
       </row>

       <row>
       <entry> <literal>\w</literal> </entry>
       <entry> <literal>[[:alnum:]_]</literal>
       (notare che la sottolineatura è compresa) </entry>
       </row>

       <row>
       <entry> <literal>\D</literal> </entry>
       <entry> <literal>[^[:digit:]]</literal> </entry>
       </row>

       <row>
       <entry> <literal>\S</literal> </entry>
       <entry> <literal>[^[:space:]]</literal> </entry>
       </row>

       <row>
       <entry> <literal>\W</literal> </entry>
       <entry> <literal>[^[:alnum:]_]</literal>
       (notare che la sottolineatura è compresa) </entry>
       </row>
      </tbody>
     </tgroup>
    </table>


   <para>
    Nelle espressioni tra parentesi quadre, <literal>\d</literal>, <literal>\s</literal>,
    e <literal>\w</literal> perdono le loro parentesi esterne,
    e <literal>\D</literal>, <literal>\S</literal>, e <literal>\W</literal> sono illegali.
    (Per cui, per esempio, <literal>[a-c\d]</literal> è equivalente a
    <literal>[a-c[:digit:]]</literal>.
    Mentre, <literal>[a-c\D]</literal>, che sarebbe equivalente a
    <literal>[a-c^[:digit:]]</literal>, è illegale).
   </para>

   
    <table id="posix-constraint-escapes-table">
    <title>Escape di vincolo nelle espressioni regolari</title>
    
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Escape</entry>
       <entry>Descrizione</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>\A</literal> </entry>
       <entry> confronta solo all'inizio della stringa
       (consultare <xref linkend="posix-matching-rules" /> per come questo differisce da
       <literal>^</literal>) </entry>
       </row>

       <row>
       <entry> <literal>\m</literal> </entry>
       <entry> confronta solo all'inizio di una parola </entry>
       </row>

       <row>
       <entry> <literal>\M</literal> </entry>
       <entry> confronta solo alla fine di una parola </entry>
       </row>

       <row>
       <entry> <literal>\y</literal> </entry>
       <entry> confronta solo all'inizio o alla fine di una parola </entry>
       </row>

       <row>
       <entry> <literal>\Y</literal> </entry>
       <entry> confronta solo ad un punto che non è l'inizio o la fine di una
       parola </entry>
       </row>

       <row>
       <entry> <literal>\Z</literal> </entry>
       <entry> confronta solo alla fine della stringa
       (consultare <xref linkend="posix-matching-rules" /> per come questo differisce da
       <literal>$</literal>) </entry>
       </row>
      </tbody>
     </tgroup>
    </table>


   <para>
    Una parola è definita come nella specificazione di
    <literal>[[:&lt;:]]</literal> e <literal>[[:&gt;:]]</literal> sopra.
    Gli escape di vincolo sono illegali nelle espressioni tra parentesi quadre.
   </para>


   <table id="posix-constraint-backref-table">
    <title>Riferimenti all'indietro nelle espressioni regolari</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Escape</entry>
       <entry>Descrizione</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>\</literal><replaceable>m</replaceable> </entry>
       <entry> (dove <replaceable>m</replaceable> è una cifra diversa da zero)
       un riferimento all'indietro alla <replaceable>m</replaceable>-esima sottoespressione </entry>
       </row>

       <row>
       <entry> <literal>\</literal><replaceable>mnn</replaceable> </entry>
       <entry> (dove <replaceable>m</replaceable> è una cifra diversa da zero, e
       <replaceable>nn</replaceable> sono alcune altre cifre, ed il valore decimale
       <replaceable>mnn</replaceable> non è maggiore del numero di parentesi chiuse catturanti viste
       finora) 
       un riferimento all'indietro alla <replaceable>mnn</replaceable>-esima sottoespressione </entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <note>
    <para>
     C'è una ambiguità storica tra la escape ottale per immissione
     caratteri ed i riferimenti all'indietro, che è risolta dalla seguente euristica, 
     come suggerito sopra.
     Uno zero in testa indica sempre un escape ottale.
     Una cifra singola diversa da zero, non seguita da un altra cifra,
     viene sempre presa come un riferimento all'indietro.
     Una sequenza di diverse cifre che non ha uno zero in testa viene presa come un riferimento 
     all'indietro se viene dopo una adatta sottoespressione
     (cioè il numero è compreso nell'intervallo valido per un riferimento all'indietro),
     altrimenti viene considerato come ottale.
    </para>
   </note>
   </sect3>

   <sect3 id="posix-metasyntax">
    <title>Metasintassi nelle espressioni regolari</title>

   <para>
    In aggiunta alla sintassi principale descritta sopra, sono disponibili alcune forme
    speciali e un assortimento di agevolazioni sintattiche.
   </para>

   <para>
    
    <note>
        <para>
            Nota per il revisore: director? 
        </para>
    </note>
        Una RE può cominciare con uno dei due prefissi <firstterm>director</firstterm> speciali.
        Se una RE comincia con <literal>***:</literal>,
        il resto della RE è preso come una ARE. (Questo normalmente non ha effetto in
        <productname>PostgreSQL</productname>, dato che le RE sono assunte essere ARE;
        Ma ha effetto se è stato specificato ERE o BRE come parametro di
        <replaceable>flag</replaceable> per una funzione regex.)
        Se una RE comincia con <literal>***=</literal>,
        il resto della RE è assunto essere una stringa letterale,
        con tutti i caratteri considerati normali caratteri.
   </para>

   <para>
    Una ARE può iniziare con <firstterm>opzioni incorporate</firstterm>:
    una sequenza <literal>(?</literal><replaceable>xyz</replaceable><literal>)</literal>
    (dove <replaceable>xyz</replaceable> è uno o più caratteri alfabetici)
    specifica opzioni che interessano il resto della RE.
    Queste opzioni sovrascrivono opzioni precedentemente determinate &mdash;
    in particolare, possono sovrascrivere il comportamento della sensibilità alle maiuscole implicito di
    un operatore regex, o il parametro <replaceable>flag</replaceable> di una funzione regex.
    Le lettere per le opzionai disponibili sono
    mostrate nella tabella <xref linkend="posix-embedded-options-table" />.
    Notare che queste stesse opzioni sono usate nei parametri <replaceable>flag</replaceable>
    delle funzioni regex.
   </para>



   <table id="posix-embedded-options-table">
    <title>Lettere per le opzioni incorporate nelle ARE</title>

    <tgroup cols="2">
     <thead>
      <row>
       <entry>Opzione</entry>
       <entry>Descrizione</entry>
      </row>
     </thead>

      <tbody>
       <row>
       <entry> <literal>b</literal> </entry>
       <entry> il resto della RE è una BRE </entry>
       </row>

       <row>
       <entry> <literal>c</literal> </entry>
       <entry> confronto sensibile alle maiuscole (sovrascrive il tipo di operatore) </entry>
       </row>

       <row>
       <entry> <literal>e</literal> </entry>
       <entry> il resto della RE è una ERE </entry>
       </row>

       <row>
       <entry> <literal>i</literal> </entry>
       <entry> confronto non sensibile alle maiuscole (consutare
       <xref linkend="posix-matching-rules"/>) (sovrascrive il tipo di operatore) </entry>
       </row>

       <row>
       <entry> <literal>m</literal> </entry>
       <entry> storicamente sininimo per <literal>n</literal> </entry>
       </row>

       <row>
       <entry> <literal>n</literal> </entry>
       <entry> confronto sensibile al newline (consultare
       <xref linkend="posix-matching-rules"/>) </entry>
       </row>

       <row>
       <entry> <literal>p</literal> </entry>
       <entry> confronto parzialmente sensibile al newline (consultare
       <xref linkend="posix-matching-rules" />) </entry>
       </row>

       <row>
       <entry> <literal>q</literal> </entry>
       <entry> il resto della RE è un stringa letterale (<quote>tra apici</quote>),
       sono tutti caratteri ordinari </entry>
       </row>

       <row>
       <entry> <literal>s</literal> </entry>
       <entry> confronto non sensibile al newline (predefinito) </entry>
       </row>

       <row>
       <entry> <literal>t</literal> </entry>
       <entry> sintassi stretta (predefinita; vedere sotto) </entry>
       </row>

       <row>
       <entry> <literal>w</literal> </entry>
       <entry> confronto  (<quote>bizzarro</quote>) parzialmente sensibile al newline inverso
       (consultare <xref linkend="posix-matching-rules" />) </entry>
       </row>

       <row>
       <entry> <literal>x</literal> </entry>
       <entry> sintassi espansa (vedere sotto) </entry>
       </row>
      </tbody>
     </tgroup>
    </table>






   <para>
    Le opzioni incorporate hanno effetto dopo <literal>)</literal> che termina la sequenza.
    Esse possono apparire solo all'inizio di una ARE (dopo il
    <literal>***:</literal> se presente).
   </para>


   <para>
    In aggiunta alla normale (<firstterm>stretta</firstterm>) sintassi delle RE, in cui tutti
    i caratteri sono significativi, c'è una sintassi <firstterm>espansa</firstterm>,
    disponibile specificando l'opzione incorporata <literal>x</literal>.
    Nella sintassi espansa,
    i caratteri spazio vuoto nelle RE vengono ignorati, come pure
    tutti i caratteri tra un <literal>#</literal>
    e la successiva newline (o la fine della RE). Questo
    consente di paragrafare e commentare una RE complessa.
    Ci sono tre eccezioni alle regole di base:


    <itemizedlist>
     <listitem>
      <para>
       un carattere spazio vuoto o <literal>#</literal> preceduto da <literal>\</literal> viene
       mantenuto
      </para>
     </listitem>
     <listitem>
      <para>
       Uno spazio vuoto o un <literal>#</literal> dentro una espressione tra parentesi viene mantenuto
      </para>
     </listitem>
     <listitem>
      <para>
       spazi vuoti e commenti possono apparire dentro simboli multicarattere,
       come <literal>(?:</literal>
      </para>
     </listitem>
    </itemizedlist>
    
    Per questo scopo, i caratteri di spazio vuoto sono blank, tab, newline, e
    ogni carattere che appartiene alla classe dei caratteri <replaceable>space</replaceable>.
   </para>

   <para>
    Infine, nelle ARE, al di fuori delle espressioni tra parentesi quadre, la sequenza
    <literal>(?#</literal><replaceable>ttt</replaceable><literal>)</literal>
    (dove <replaceable>ttt</replaceable> è ogni testo non contenente una <literal>)</literal>)
    è un commento, completamente ignorato.
    Per concludere, questo non è consentito tra i caratteri
    di simboli multicarattere, come <literal>(?:</literal>.
    Tali commenti sono più un manufatto storico che una funzione utile,
    e il loro uso è deprecabile; conviene utilizzare invece la sintassi espansa.
   </para>

<note>
    <para>
        Nota per il revisore: director?
    </para>
</note>
    <para>
    <emphasis>Nessuna</emphasis> di queste espansioni di metasintassi sarà disponibile
    se un director iniziale <literal>***=</literal>
    ha specificato che l'input dell'utente sarà trattato come una stringa letterale
    anzichè come una RE.
   </para>
   </sect3>


   <sect3 id="posix-matching-rules">
    <title>Regole di confronto nelle espressioni regolari</title>

   <para>
    Nel caso che una RE possa abbinare più di una sottostringa in una stringa
    fornita, la RE combacia con quella che viene incontrata per prima nella stringa.
    A questo punto, se la RE può abbinare più di una sottostringa,
    sarà preso l'abbinamento più lungo possibile o il più corto
    possibile, a seconda che la RE sia <firstterm>avida</firstterm> o
    <firstterm>non-avida</firstterm>.
   </para>

   

   <para>
    Se una RE è avida o meno, viene determinato dalle seguenti regole:
    <itemizedlist>
     <listitem>
      <para>
       La maggior parte degli atomi e tutti i vincoli, non hanno attributo di avidità (perchè
       essi non possono comunque abbinare variabili di testo).
      </para>
     </listitem>
     <listitem>
      <para>
       L'aggiunta di parentesi intorno ad una RE non modifica il suo attributo di avidità.
      </para>
     </listitem>
     <listitem>
      <para>
       Un atomo quantificato con un quantificatore di ripetizione fissato
       (<literal>{</literal><replaceable>m</replaceable><literal>}</literal>
       o
       <literal>{</literal><replaceable>m</replaceable><literal>}?</literal>)
       ha lo stesso attributo di avidità (probabilmente nessuno) dell'atomo stesso.
      </para>
     </listitem>
     <listitem>
      <para>
       Un atomo quantificato con altri normali quantificatori (compreso
       <literal>{</literal><replaceable>m</replaceable><literal>,</literal><replaceable>n</replaceable><literal>}</literal>
       con <replaceable>m</replaceable> uguale a <replaceable>n</replaceable>)
       è avido (preferisce l'abbinamneto più lungo).
      </para>
     </listitem>
     <listitem>
      <para>
       Un atomo quantificato con un quantificatore non-avido (compreso
       <literal>{</literal><replaceable>m</replaceable><literal>,</literal><replaceable>n</replaceable><literal>}?</literal>
       con <replaceable>m</replaceable> uguale a <replaceable>n</replaceable>)
       è non-avido (preferisce l'abbinamento più corto).
      </para>
     </listitem>
     <listitem>
      <para>
       Un ramo &mdash; che è, una RE che non ha un operatore
       <literal>|</literal> di livello superiore &mdash; ha lo stesso attributo di avidità del primo
       atomo quantificato, contenuto in esso, che ha un attributo di avidità.
      </para>
     </listitem>
     <listitem>
      <para>
       Una RE consistente di due o più rami connessi dall'operatore
       <literal>|</literal> è sempre avido.
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    Le regole sopra associano gli attributi di avidità non solo con singoli
    atomi quantificati, ma con i rami e le intere RE che contengono atomi quantificati.
    Questo significa che l'abbinamento viene fatto in modo che il ramo, o l'intera RE,
    abbinano <emphasis>complessivamente</emphasis> la più lunga o la più corta
    possibile sottostringa. Una volta determinata la lunghezza dell'intero abbinamento,
    la parte di esso che abbina ogni particolare sottoespressione viene determinata
    sulla base dell'attributo di avidità di quella sottoespressione,
    con le sottoespressioni che cominciano prima nella RE che prendono la
    priorità su quelle che cominciano dopo.
   </para>


   <para>
    Un esempio di cosa significa questo:
<screen>
SELECT SUBSTRING('XY1234Z', 'Y*([0-9]{1,3})');
<lineannotation>Result: </lineannotation><computeroutput>123</computeroutput>
SELECT SUBSTRING('XY1234Z', 'Y*?([0-9]{1,3})');
<lineannotation>Result: </lineannotation><computeroutput>1</computeroutput>
</screen>
    Nel primo caso, la RE è complessivamente avida perchè <literal>Y*</literal>
    è avido. Esso può abbinare cominciando dalla <literal>Y</literal>, e abbina 
    la stringa più lunga possibile partendo da lì, cioè, <literal>Y123</literal>.
    L'output è la parte tra parentesi di essa, o <literal>123</literal>.
    Nel secondo caso, la RE è complessivamente non-avida perchè <literal>Y*?</literal>
    è non-avido. Essa può abbinare cominciando dalla <literal>Y</literal>, e abbinare
    la stringa più corta possibile partendo da lì, cioè, <literal>Y1</literal>.
    La sottoespressione <literal>[0-9]{1,3}</literal> è avida ma essa non può cambiare
    la decisione relativa alla lunghezza complessiva dell'abbinamento; per cui è forzata ad
    abbinare solo <literal>1</literal>.
   </para>

   <para>
    
    In breve, quando una RE contiene sottoespressioni sia avide che non-avide,
    la lunghezza totale dell'abbinamento può essere la più lunga possibile
    o la più corta possibile, in funzione dell'attributo assegnato all'intera RE.
    Gli attributi assegnati alle sottoespressioni riguardano solo la quantità di 
    abbinamenti che essi possono <quote>mangiare</quote> rispetto ad ogni altro.
   </para>

   <para>
    I quantificatori <literal>{1,1}</literal> e <literal>{1,1}?</literal>
    possono essere usati per forzare, rispettivamente, avidità o non-avidità 
    in una sottoespressione o in una intera RE.
   </para>

   <para>
    Le lunghezze degli abbinamenti sono misurate in caratteri e non in elementi di collazione.
    Una stringa vuota è considerata più lunga di nessun abbinamento.
    Per esempio:
    <literal>bb*</literal>
    abbina i tre caratteri in mezzo ad <literal>abbbc</literal>;
    <literal>(week|wee)(night|knights)</literal>
    abbina tutti e dieci i caratteri di <literal>weeknights</literal>;
    quando <literal>(.*).*</literal>
    viene confrontata con <literal>abc</literal> la sottoespressione tra parentesi
    abbina tutti e tre i caratteri; e quando
    <literal>(a*)*</literal> viene confrontata con <literal>bc</literal>
    sia l'intera RE che la sottoespressione tra parentesi
    abbinano una stringa vuota.
   </para>

   <para>
    Se si specifica un confronto non sensibile alle maiuscole,
    l'effetto è che tutte le distinzioni tra maiuscole e minuscole scompaiono
    dall'alfabeto.
    Quando un carattere alfabetico che esiste sia nel formato maiuscolo che minuscolo compare come un
    carattere ordinario al di fuori di una parentesi quadra, esso viene effettivamente
    trasformato in una espressione tra parentesi quadre, contenente ambedue i formati,
    p.e. <literal>x</literal> diventa <literal>[xX]</literal>.
    Quando esso appare dentro una espressione tra parentesi quadre, tutti i formati complementari
    ad esso vengono aggiunti nella espressione tra parentesi quadre, per esempio
    <literal>[x]</literal> diventa <literal>[xX]</literal>
    e <literal>[^x]</literal> diventa <literal>[^xX]</literal>.
   </para>

   <para>
    Se si specifica un confronto sensibile al newline, il <literal>.</literal>
    e le espressioni tra parentesi quadre che utilizzano <literal>^</literal>
    non abbineranno mai il carattere di newline
    (per cui tutti i confronti non incroceranno mai newline a meno che la RE
    non lo disponga esplicitamente)
    e <literal>^</literal> e <literal>$</literal>
    abbineranno la stringa vuota, rispettivamente, dopo e prima un newline,
    in aggiunta all'abbinamento rispettivamente all'inizio e alla fine
    della stringa.
    Ma gli escape ARE <literal>\A</literal> e <literal>\Z</literal>
    continueranno ad abbinare <emphasis>solo</emphasis> l'inizio e la fine della stringa.
   </para>

   <para>
    Se viene specificato un confronto parzialmente sensibile al newline,
    questo influenza il <literal>.</literal> e le espressioni tra parentesi quadre
    come con il confronto sensibile al newline, ma non <literal>^</literal>
    e <literal>$</literal>.
   </para>

   <para>
Se viene specificato un confronto inverso parzialmente sensibile al newline,
    questo influenza <literal>^</literal> e <literal>$</literal>
    come con il confronto sensibile al newline, ma non il <literal>.</literal>
    e le espressioni tra parentesi quadre.
    Questo non è molto utile, ma è fornito per simmetria..
   </para>
   </sect3>

   <sect3 id="posix-limits-compatibility">
    <title>Limiti e compatibilità</title>

   <para>
    Nessun limite particolare è imposto sulla lunghezza delle RE in questa
    implementazione. Tuttavia,
    i programmi intesi per essere altamente portabili non dovrebbero impiegare RE più 
    lunghe di 256 byte,
    poichè un'implementazione conforme-POSIX può rifiutarsi di accettare tali RE.
   </para>

   <para>
    
    La sola caratteristica delle ARE che è attualmente incompatibile con
    le ERE POSIX è che <literal>\</literal> non perde il suo significato
    speciale nelle espressioni tra parentesi quadre.
    Tutte le altre caratteristiche ARE usano una sintassi che è illegale o ha
    effetti non definiti o non specificati nelle ERE;
    la sintassi dei director <literal>***</literal> è anch'essa al di fuori della
    sintassi POSIX sia per le BRE che per le ERE.
   </para>

   <para>
    Molte delle estensioni ARE sono prese in prestito dal Perl, ma alcune sono
    state cambiate per pulirle, e alcune altre estensioni Perl non sono presenti.
    La note di incompatibilità includono <literal>\b</literal>, <literal>\B</literal>,
    l'assenza di un trattamento speciale per le newline finale,
    l'aggiunta di espressioni tra parentesi quadre complementate alle cose
    influenzate dai confronti sensibili al newline,
    le restrizioni nelle parentesi e nei riferimenti all'indietro nei vincoli
    lookahead, e la semantica di confronto  più lungo/più corto (invece di quella prima-occorrenza).
   </para>

   <para>
    Due incompatibilità significative esistono tra la sintassi delle ARE e delle ERE
    riconosciuta dalle versioni precedenti la 7.4 di <productname>PostgreSQL</productname>:

    <itemizedlist>
     <listitem>
      <para>
       Nelle ARE, <literal>\</literal> seguito da un carattere alfabetico o è un escape
       oppure un errore, mentre nelle versioni precedenti, esso era solo un altro
       modo per scrivere l'alfanumerico.
       Questo non doveva essere un grande problema in quanto non c'era ragione di
       scrivere una tale sequenza, nelle versioni precedenti.
      </para>
     </listitem>
     <listitem>
      <para>
       Nelle ARE, <literal>\</literal> rimane un carattere speciale dentro
       <literal>[]</literal>, per cui un letterale <literal>\</literal> dentro una espressione
       tra parentesi quadre deve essere scritto in questo modo: <literal>\\</literal>.
      </para>
     </listitem>
    </itemizedlist>
   </para>
   </sect3>

   <sect3 id="posix-basic-regexes">
    <title>Espressioni regolari di base</title>

   <para>
    Le BRE differiscono dalle ERE per diversi aspetti.
    Nelle BRE, <literal>|</literal>, <literal>+</literal>, e <literal>?</literal>
    sono caratteri ordinari e non c'è equivalenza
    per le loro funzionalità.
    I delimitatori per i limiti sono
    <literal>\{</literal> e <literal>\}</literal>,
    con <literal>{</literal> e <literal>}</literal>
    da soli caratteri ordinari.
    Le parentesi per le sottoespressioni annidate sono
    <literal>\(</literal> e <literal>\)</literal>,
    con <literal>(</literal> e <literal>)</literal> da soli caratteri ordinari.
    <literal>^</literal> è un carattere ordinario eccetto che all'inizio della
    RE o all'inizio di una sottoespressione tra parentesi,
    <literal>$</literal> è un carattere ordinario eccetto alla fine della
    RE o alla fine di una sottoespressione tra parentasi,
    e <literal>*</literal> è un carattere ordinario se appare all'inizio
    della RE o all'inizio di una espressione tra parentesi
    (dopo un possibile <literal>^</literal> iniziale).
    Infine, sono disponibili riferimenti all'indietro a cifra singola, e
    <literal>\&lt;</literal> e <literal>\&gt;</literal>
    sono sinonimi, rispettivamente, per
    <literal>[[:&lt;:]]</literal> e <literal>[[:&gt;:]]</literal>;
    nelle BRE non sono disponibili altri escape.
   </para>
   </sect3>

<!-- end re_syntax.n man page -->

  </sect2>
 </sect1>


  <sect1 id="functions-formatting">
   <title>Funzioni di formattazione dei tipi di dato</title>

   <indexterm>
    <primary>formattazione</primary>
   </indexterm>

   <indexterm>
    <primary>to_char</primary>
   </indexterm>
   <indexterm>
    <primary>to_date</primary>
   </indexterm>
   <indexterm>
    <primary>to_number</primary>
   </indexterm>
   <indexterm>
    <primary>to_timestamp</primary>
   </indexterm>

   <para>
    La funzioni di formattazione di <productname>PostgreSQL</productname>
    forniscono un potente insieme di strumenti per convertire diversi tipi di dati
    (date/orari, interi, a virgola mobile, numerici) ad una stringa formattata
    e per convertire da una stringa formattata agli specifici tipi di dato.
    La <xref linkend="functions-formatting-table" /> le elenca.
    Tutte queste funzioni seguono una convenzione di chiamata comune: il primo
    argomento è il valore che sarà formattato e il secondo argomento è un
    modello che definisce il formato di uscita o di entrata.
   </para>
   <para>
    La funzione <function>to_timestamp</function> può anche prendere un singolo 
    argomento a <type>doppia precisione</type> per convertire da Unix epoch 
    (i secondi da 01/01/1970 00:00:00+00)  in 
    <type>timestamp with time zone</type>.
    (L'<type>Intero</type> Unix epoch viene implicitamente convertito a 
    <type>doppia precisione</type>.)
   </para>

    


    <table id="functions-formatting-table">
     <title>Funzioni di formattazione</title>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>Funzione</entry>
        <entry>Tipo restituito</entry>
        <entry>Descrizione</entry>
        <entry>Esempio</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal><function>to_char(<type>timestamp</type>, <type>text</type>)</function></literal></entry>
        <entry><type>text</type></entry>
        <entry>converte un timestamp in stringa</entry>
        <entry><literal>to_char(current_timestamp, 'HH12:MI:SS')</literal></entry>
       </row>
       <row>
        <entry><literal><function>to_char(<type>interval</type>, <type>text</type>)</function></literal></entry>
        <entry><type>text</type></entry>
        <entry>converte un intervallo in una stringa</entry>
        <entry><literal>to_char(interval '15h&nbsp;2m&nbsp;12s', 'HH24:MI:SS')</literal></entry>
       </row>
       <row>
        <entry><literal><function>to_char(<type>int</type>, <type>text</type>)</function></literal></entry>
        <entry><type>text</type></entry>
        <entry>converte un intero in una stringa</entry>
        <entry><literal>to_char(125, '999')</literal></entry>
       </row>
       <row>
        <entry><literal><function>to_char</function>(<type>double precision</type>,
        <type>text</type>)</literal></entry>
        <entry><type>text</type></entry>
        <entry>converte un real/a doppia precisione in una stringa</entry>
        <entry><literal>to_char(125.8::real, '999D9')</literal></entry>
       </row>
       <row>
        <entry><literal><function>to_char(<type>numeric</type>, <type>text</type>)</function></literal></entry>
        <entry><type>text</type></entry>
        <entry>converte un numeric in una stringa</entry>
        <entry><literal>to_char(-125.8, '999D99S')</literal></entry>
       </row>
       <row>
        <entry><literal><function>to_date(<type>text</type>, <type>text</type>)</function></literal></entry>
        <entry><type>date</type></entry>
        <entry>converte una stringa in una data</entry>
        <entry><literal>to_date('05&nbsp;Dec&nbsp;2000', 'DD&nbsp;Mon&nbsp;YYYY')</literal></entry>
       </row>
       <row>
        <entry><literal><function>to_number(<type>text</type>, <type>text</type>)</function></literal></entry>
        <entry><type>numeric</type></entry>
        <entry>converte una stringa in un numeric</entry>
        <entry><literal>to_number('12,454.8-', '99G999D9S')</literal></entry>
       </row>
       <row>
        <entry><literal><function>to_timestamp(<type>text</type>, <type>text</type>)</function></literal></entry>
        <entry><type>timestamp with time zone</type></entry>
        <entry>converte stringhe in tipestamp</entry>
        <entry><literal>to_timestamp('05&nbsp;Dec&nbsp;2000', 'DD&nbsp;Mon&nbsp;YYYY')</literal></entry>
       </row>
       <row>
        <entry><literal><function>to_timestamp(<type>double precision</type>)</function></literal></entry>
        <entry><type>timestamp with time zone</type></entry>
        <entry>converte Unix epoch in timestamp</entry>
        <entry><literal>to_timestamp(1284352323)</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
        In una stringa di modello di output per la funzione <function>to_char</function>, ci sono certi
        schemi che sono riconosciuti e sostituiti con dati appropriatamente formattati
        in base al valore fornito. Ogni testo che non è un modello viene
        semplicemente copiato letteralmente. Similmente, in una stringa di modello di input (per le
        altre funzioni), gli schemi di modelli identificano i valori da essere forniti
        dalla stringa di input dei dati.
    
   </para>

  <para>
   La <xref linkend="functions-formatting-datetime-table" /> mostra i
   modelli di maschere disponibili per formattare valori di data e orario.
  </para>


<table id="functions-formatting-datetime-table">
     <title>Modelli di maschere per formattazioni Data/Orario</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Modello</entry>
        <entry>Descrizione</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal>HH</literal></entry>
        <entry>ora del giorno (01-12)</entry>
       </row>
       <row>
        <entry><literal>HH12</literal></entry>
        <entry>ora del giorno (01-12)</entry>
       </row>       
       <row>
        <entry><literal>HH24</literal></entry>
        <entry>ora del giorno (00-23)</entry>
       </row>       
       <row>
        <entry><literal>MI</literal></entry>
        <entry>minuti (00-59)</entry>
       </row>   
       <row>
        <entry><literal>SS</literal></entry>
        <entry>secondi (00-59)</entry>
       </row>
       <row>
        <entry><literal>MS</literal></entry>
        <entry>millisecondi (000-999)</entry>
       </row>
       <row>
        <entry><literal>US</literal></entry>
        <entry>microsecondi (000000-999999)</entry>
       </row>
       <row>
        <entry><literal>SSSS</literal></entry>
        <entry>secondi dopo la mezzanotte (0-86399)</entry>
       </row>
       <row>
        <entry><literal>AM</literal> o <literal>A.M.</literal> or
        <literal>PM</literal> o <literal>P.M.</literal></entry>
        <entry>indicatore mattina pomeriggio (maiuscolo)</entry>
       </row>
       <row>
        <entry><literal>am</literal> o <literal>a.m.</literal> or
        <literal>pm</literal> o <literal>p.m.</literal></entry>
        <entry>indicatore mattina pomeriggio (minuscolo)</entry>
       </row>
       <row>
        <entry><literal>Y,YYY</literal></entry>
        <entry>anno (4 e più cifre) con virgola</entry>
       </row>
       <row>
        <entry><literal>YYYY</literal></entry>
        <entry>anno (4 e più cifre)</entry>
       </row>
       <row>
        <entry><literal>YYY</literal></entry>
        <entry>ultime 3 cifre dell'anno</entry>
       </row>
       <row>
        <entry><literal>YY</literal></entry>
        <entry>ultime 2 cifre dell'anno</entry>
       </row>
       <row>
        <entry><literal>Y</literal></entry>
        <entry>ultima cifra dell'anno</entry>
       </row>
       <row>
        <entry><literal>IYYY</literal></entry>
        <entry>anno ISO (4 e più cifre)</entry>
       </row>
       <row>
        <entry><literal>IYY</literal></entry>
        <entry>ultime 3 cifre dell'anno ISO</entry>
       </row>
       <row>
        <entry><literal>IY</literal></entry>
        <entry>ultime 2 cifre dell'anno ISO</entry>
       </row>
       <row>
        <entry><literal>I</literal></entry>
        <entry>ultima cifra dell'anno ISO</entry>
       </row>
       <row>
        <entry><literal>BC</literal> o <literal>B.C.</literal> or
        <literal>AD</literal> o <literal>A.D.</literal></entry>
        <entry>indicatore dell'era (maiuscolo)</entry>
       </row>
       <row>
        <entry><literal>bc</literal> o <literal>b.c.</literal> or
        <literal>ad</literal> o <literal>a.d.</literal></entry>
        <entry>indicatore dell'era (minuscolo)</entry>
       </row>
       <row>
        <entry><literal>MONTH</literal></entry>
        <entry>nome del mese completo in maiuscolo (allungato a 9 caratteri con blank)</entry>
       </row>
       <row>
        <entry><literal>month</literal></entry>
        <entry>nome del mese completo in caratteri minuscoli (allungato a 9 caratteri con blank)</entry>
       </row>
       <row>
        <entry><literal>MON</literal></entry>
        <entry>nome del mese abbreviato in maiuscolo (3 caratteri in inglese, in varie lunghezze se localizzato)</entry>
       </row>
       <row>
        <entry><literal>Mon</literal></entry>
        <entry>nome del mese abbreviato in caratteri misti (3 caratteri in inglese, in varie lunghezze se localizzato)</entry>
       </row>
       <row>
        <entry><literal>mon</literal></entry>
        <entry>nome del mese abbreviato in minuscolo (3 caratteri in inglese, in varie lunghezze se localizzato)</entry>
       </row>
       <row>
        <entry><literal>MM</literal></entry>
        <entry>numero del mese (01-12)</entry>
       </row>
       <row>
        <entry><literal>DAY</literal></entry>
        <entry>nome del giorno completo in maiuscolo (allungato a 9 caratteri con blank)</entry>
       </row>
       <row>
        <entry><literal>Day</literal></entry>
        <entry>nome del giorno completo in caratteri misti (allungato a 9 caratteri se localizzato)</entry>
       </row>
       <row>
        <entry><literal>day</literal></entry>
        <entry>nome del giorno completo in minuscolo (allungato a 9 caratteri con blank)</entry>
       </row>
       <row>
        <entry><literal>DY</literal></entry>
        <entry>nome del giorno abbreviato in maiuscolo (3 caratteri in inglese, in varie lunghezze se localizzato)</entry>
       </row>
       <row>
        <entry><literal>Dy</literal></entry>
        <entry>nome del giorno abbreviato in caratteri misti (3 caratteri in inglese, in varie lunghezzza se localizzato)</entry>
       </row>
       <row>
        <entry><literal>dy</literal></entry>
        <entry>nome del giorno abbreviato in minuscolo (3 caratteri in inglese, in varie lunghezze se localizzato)</entry>
       </row>
       <row>
        <entry><literal>DDD</literal></entry>
        <entry>giorno dell'anno (001-366)</entry>
       </row>
       <row>
        <entry><literal>IDDD</literal></entry>
        <entry>giorno dell'anno ISO (001-371; il giorno 1 dell'anno è il lunedi della prima settimana ISO).</entry>
       </row>
       <row>
        <entry><literal>DD</literal></entry>
        <entry>giorno del mese (01-31)</entry>
       </row>
       <row>
        <entry><literal>D</literal></entry>
        <entry>giorno della settimana, Domenica(<literal>1</literal>) a Sabato(<literal>7</literal>)</entry>
       </row>
       <row>
        <entry><literal>ID</literal></entry>
        <entry>giorno della settimana ISO, Lunedi(<literal>1</literal>) a Domenica(<literal>7</literal>)</entry>
       </row>
       <row>
        <entry><literal>W</literal></entry>
        <entry>settimana del mese (1-5) (La prima settimana comincia dal primo giorno del mese).</entry>
       </row> 
       <row>
        <entry><literal>WW</literal></entry>
        <entry>numero di settimana dell'anno (1-53) (La prima settimana comincia dal primo giorno dell'anno).</entry>
       </row>
       <row>
        <entry><literal>IW</literal></entry>
        <entry>numero di settimana dell'anno ISO (1 - 53; il primo giovedi del nuovo anno è nella settimana 1).</entry>
       </row>
       <row>
        <entry><literal>CC</literal></entry>
        <entry>secolo (2 cifre) (Il ventunesimo secolo comincia il 2001-01-01.)</entry>
       </row>
       <row>
        <entry><literal>J</literal></entry>
        <entry>Giorno Giuliano (i giorni cominciano dalla mezzanotte del 24 Novembre 4714 AC)</entry>
       </row>
       <row>
        <entry><literal>Q</literal></entry>
        <entry>trimestre</entry>
       </row>
       <row>
        <entry><literal>RM</literal></entry>
        <entry>mese in numeri romani (I-XII; I=Gennaio) (maiuscolo)</entry>
       </row>
       <row>
        <entry><literal>rm</literal></entry>
        <entry>mese in numeri romani (i-xii; i=Gennaio) (minuscolo)</entry>
       </row>
       <row>
        <entry><literal>TZ</literal></entry>
        <entry>nome di fuso orario (maiuscolo)</entry>
       </row>
       <row>
        <entry><literal>tz</literal></entry>
        <entry>nome di fuso orario (minuscolo)</entry>
       </row>
      </tbody>
     </tgroup>
    </table>








   <para>
    Certi modificatori possono essere applicati ad ogni modello di maschera per modificare
    il suo comportamento. Per esempio, <literal>FMMonth</literal>
    è la maschera <literal>Month</literal> con il
    modificatore <literal>FM</literal>.
    La <xref linkend="functions-formatting-datetimemod-table" /> mostra i
    modificatori di modelli per le formattazioni data/orario.
   </para>


    
<table id="functions-formatting-datetimemod-table">
     <title>Modificatori modelli di maschere per formattazioni Data/Orario</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Modificatore</entry>
        <entry>Descrizione</entry>
        <entry>Esempio</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal>FM</literal> prefisso</entry>
        <entry>modo riempimento (sopprime i blank e gli zero di riempimento)</entry>
        <entry><literal>FMMonth</literal></entry>
       </row>
       <row>
        <entry>suffisso <literal>TH</literal></entry>
        <entry>suffiso per numero ordinale maiuscolo</entry>
        <entry><literal>DDTH</literal>, ad es.,  <literal>12TH</literal></entry>
       </row>   
       <row>
        <entry>suffisso <literal>th</literal></entry>
        <entry>suffisso per numero ordinale minuscolo</entry>
        <entry><literal>DDth</literal>, ad es., <literal>12th</literal></entry>
       </row>
       <row>
        <entry>prefisso <literal>FX</literal></entry>
        <entry>opzione globale di formato fissato (vedere le note di uso)</entry>
        <entry><literal>FX&nbsp;Month&nbsp;DD&nbsp;Day</literal></entry>
       </row>   
       <row>
        <entry>prefisso <literal>TM</literal></entry>
        <entry>modoi di traduzione (stampa i nomi del giorno e del mese basati su
        <xref linkend="guc-lc-time"/>)</entry>
        <entry><literal>TMMonth</literal></entry>
       </row>       
       <row>
        <entry>suffisso <literal>SP</literal></entry>
        <entry>modo spell (non ancora implementato)</entry>
        <entry><literal>DDSP</literal></entry>
       </row>       
      </tbody>
     </tgroup>
    </table>


   <para>
    Note d'uso per le formattazione di data/orario:

    <itemizedlist>
     <listitem>
      <para>
            <literal>FM</literal> sopprime gli zeri frontali e gli spazi vuoti in coda
            che altrimenti sarebbero aggiunti per far sì che l'output sia
            a larghezza fissa. In <productname>PostgreSQL</productname>,
            <literal>FM</literal> modifica solo la prossima specifica, mentre in 
             Oracle, <literal>FM</literal> ha effetto su tutti le specificazioni seguenti,
            e i modificatori ripetuti <literal>FM</literal>
            attiva e disattiva il modo fill.
            
       
      </para>
     </listitem>

     <listitem>
      <para>
       <literal>TM</literal> non include spazi bianchi in coda.
      </para>
     </listitem>

     <listitem>
      <para>
       <function>to_timestamp</function> e <function>to_date</function>
       saltano i diversi spazi bianchi nella stringa di input 
       a meno che non venga usata l'opzione <literal>FX</literal>. 
       Per esempio, 
       <literal>to_timestamp('2000&nbsp;&nbsp;&nbsp;&nbsp;JUN', 'YYYY MON')</literal> funziona, ma
       <literal>to_timestamp('2000&nbsp;&nbsp;&nbsp;&nbsp;JUN', 'FXYYYY MON')</literal> restituisce un errore,
       perchè <function>to_timestamp</function> si aspetta un solo spazio.
       <literal>FX</literal> dev'essere specificato come primo elemento nel
       modello. 
      </para>
     </listitem>

     <listitem>
      <para>
       Il comune testo è ammesso nelle maschere <function>to_char</function>
       e verrà restituito in uscita letteralmente. È possibile immettere una sottostringa
       tra doppi apici per forzarne l'interpretazione come testo letterale
       anche se la stessa contiene parole chiave del modello. Per esempio, in
       <literal>'"Hello Year "YYYY'</literal>, <literal>YYYY</literal>
       verrà rimpiazzato dal dato dell'anno, ma il singolo <literal>Y</literal> di <literal>Year</literal>
       rimarrà invariato.
        In <function>to_date</function>, <function>to_number</function> 
        e <function>to_timestamp</function>, stringhe con doppi apici saltano il numero
        di caratteri di input contenuti nella stringa, ad es. <literal>"XX"</literal>
        salta due caratteri di input.
      </para>
     </listitem>

     <listitem>
      <para>
    Se si vogliono avere doppi apici in output è necessario farli
       precedere da una barra inversa, per esempio <literal>E'\\"YYYY
       Month\\"'</literal>. <!-- "" font-lock sanity :-) -->
       (Sono necessarie due barre inverse perchè la barra inversa ha già
       uno speciale significato quando si utilizza la sintassi escape di stringa).
      </para>
     </listitem>

     <listitem>
      <para>
       La conversione di <literal>YYYY</literal> da stringa a <type>timestamp</type> o
       <type>date</type> ha una restrizione se si utilizza un anno con più di 4 cifre. Bisognerà 
       usare qualche carattere che non sia una cifra o una maschera dopo <literal>YYYY</literal>,
       altrimenti l'anno verrà sempre interpretato essere di 4 cifre. Per esempio
       (con l'anno 20000):
       <literal>to_date('200001131', 'YYYYMMDD')</literal> sarà
       interpretato come un anno di 4 cifre; usare invece un separatore che non sia una
       cifra dopo l'anno, tipo
       <literal>to_date('20000-1131', 'YYYY-MMDD')</literal> o
       <literal>to_date('20000Nov31', 'YYYYMonDD')</literal>.
       
      </para>
     </listitem>

     <listitem>
      <para>
        Nelle conversioni da stringa a <type>timestamp</type> o
       <type>date</type>, il campo <literal>CC</literal> è ignorato se c'è un
       campo <literal>YYY</literal>, <literal>YYYY</literal> o
       <literal>Y,YYY</literal>. Se <literal>CC</literal> è utilizzato con
       <literal>YY</literal> o <literal>Y</literal> allora l'anno viene calcolato
       come <literal>(CC-1)*100+YY</literal>.
      </para>
     </listitem>

     <listitem>
      <para>
            Una settimana in ISO (invece di una data Gregoriana) può essere specificata 
            per <function>to_timestamp</function> e <function>to_date</function> in due modi:
       <function>to_date</function> in one of two ways:
       <itemizedlist>
        <listitem>
         <para>
            Anno, settimana e giorno della settimana: per esempio <literal>to_date('2006-42-4', 'IYYY-IW-ID')</literal> 
            restituisce la data <literal>2006-10-19</literal>. 
            Se si omette il giorno della settimana viene supposto che sia 1 (Lunedi).
         </para>
        </listitem>
        <listitem>
         <para>
            Anno e giorno dell'anno: per esempio <literal>to_date('2006-291', 'IYYY-IDDD')</literal> 
            anch'esso restituisce <literal>2006-10-19</literal>.
         </para>
        </listitem>
       </itemizedlist>
      </para>
      <para>

        Il tentativo di costruire una data usando un miscuglio di settimana ISO 
        e campi data Gregoriani non ha senso, e causerà un errore. 
        Nel contesto di anno ISO, il concetto di <quote>mese</quote> o <quote>giorno
        del mese</quote> non ha significato. 
        Nel contesto di anno Gregoriano, la settimana ISO non ha significato. 
        Gli utenti dovranno evitare di mischiare le specifiche delle date Gregoriane e ISO.
       
      </para>
     </listitem>

     <listitem>
      <para>
       
        In una conversione da stringa a <type>timestamp</type>, 
        i valori dei millisecondi (<literal>MS</literal>) e microsecondi (<literal>US</literal>)
        sono usati come parte del
        secondo dopo il punto decimale. Per esempio 
        <literal>to_timestamp('12:3', 'SS:MS')</literal> non è 3 millisecondi,
        ma 300, perchè il conteggio nella conversione è 12 + 0.3 secondi.
        Questo significa, per il formato <literal>SS:MS</literal>, i valori di input
        <literal>12:3</literal>, <literal>12:30</literal>, e <literal>12:300</literal> specificano
        lo stesso numero di millisecondi. Per ottenere tre millisecondi, bisogna usare 
        <literal>12:003</literal>, dove  la conversione è considerata come
        12 + 0.003 = 12.003 secondi.
      </para>

      <para>
       Questo è un esempio più
       complesso: 
       <literal>to_timestamp('15:12:02.020.001230', 'HH:MI:SS.MS.US')</literal>
       è 15 ore, 12 minuti, e 2 secondi + 20 millisecondi +
       1230 microsecondi = 2.021230 secondi. 
      </para>
     </listitem>

     <listitem>
      <para>
       La numerazione del giorno della settimana di <function>to_char(..., 'ID')</function>
       uguaglia la funzione <function>extract('isodow', ...)</function>, ma
       <function>to_char(..., 'D')</function> non uguaglia la numerazione dei giorni di
       <function>extract('dow', ...)</function>.
      </para>
     </listitem>

     <listitem>
      <para> La funzione <function>to_char(interval)</function> formatta <literal>HH</literal> e 
        <literal>HH12</literal> come in un orologio da 12 ore,
        per es. l'ora 0 e 36 diventa in output <literal>12</literal>,     
        mentre <literal>HH24</literal>
        rende in output il valore intero dell'ora, che può eccedere di 23 per gli intervalli.
      </para>
     </listitem>

    </itemizedlist>
   </para>

  <para>
    La <xref linkend="functions-formatting-numeric-table"/> mostra i
    modelli della maschere disponibili per formattare valori numerici.
  </para>







    <table id="functions-formatting-numeric-table">
     <title>Modelli di maschere per formattazioni numeriche</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Modello</entry>
        <entry>Descrizione</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal>9</literal></entry>
        <entry>valore con il numero di cifre specificato</entry>
       </row>
       <row>
        <entry><literal>0</literal></entry>
        <entry>valore con zeri non significativi in testa</entry>
       </row>
       <row>
        <entry><literal>.</literal> (punto)</entry>
        <entry>punto decimale</entry>
       </row>       
       <row>
        <entry><literal>,</literal> (virgola)</entry>
        <entry>separatore di gruppo (migliaia)</entry>
       </row>
       <row>
        <entry><literal>PR</literal></entry>
        <entry>valori negativi racchiusi tra i simboli maggiore e minore</entry>
       </row>
       <row>
        <entry><literal>S</literal></entry>
        <entry>segno ancorato al numero (usa la localizzazione)</entry>
       </row>
       <row>
        <entry><literal>L</literal></entry>
        <entry>simbolo di valuta (usa la localizzazione)</entry>
       </row>
       <row>
        <entry><literal>D</literal></entry>
        <entry>punto decimale (usa la localizzazione)</entry>
       </row>
       <row>
        <entry><literal>G</literal></entry>
        <entry>separatore di gruppo (usa la localizzazione)</entry>
       </row>
       <row>
        <entry><literal>MI</literal></entry>
        <entry>segno meno in una specificata posizione (se il numero è &lt; 0)</entry>
       </row>
       <row>
        <entry><literal>PL</literal></entry>
        <entry>segno più in una specificata posizione(if number &gt; 0)</entry>
       </row>
       <row>
        <entry><literal>SG</literal></entry>
        <entry>segno più/meno in una specificata posizione</entry>
       </row>
       <row>
        <entry><literal>RN</literal></entry>
        <entry>numero romano (input tra 1 e 3999)</entry>
       </row>
       <row>
        <entry><literal>TH</literal> or <literal>th</literal></entry>
        <entry>suffizzo per numero ordinale</entry>
       </row>
       <row>
        <entry><literal>V</literal></entry>
        <entry>slittamento di uno specificato numero di cifre (vedere le note)</entry>
       </row>
       <row>
        <entry><literal>EEEE</literal></entry>
        <entry>notazione scientifica (non ancora implementata)</entry>  
       </row>
      </tbody>
     </tgroup>
    </table>





   <para>
    Note di uso per la formattazione numerica:

    <itemizedlist>
     <listitem>
      <para>
       Un segno formattato utilizzando <literal>SG</literal>, <literal>PL</literal>, o
       <literal>MI</literal> non è ancorato al
       numero; per esempio,
       <literal>to_char(-12, 'MI9999')</literal> produce <literal>'-&nbsp;&nbsp;12'</literal>
       ma <literal>to_char(-12, 'S9999')</literal> produce <literal>'&nbsp;&nbsp;-12'</literal>.
       L'implementazione Oracle non permette l'uso di 
       <literal>MI</literal> prima di <literal>9</literal>, ma nemmeno richiede
       che <literal>9</literal> preceda
       <literal>MI</literal>.
      </para>
     </listitem>

     <listitem>
      <para>
       
        I <literal>9</literal> generano un valore con un numero di cifre identico
       alla quantità di <literal>9</literal> inseriti. Se una cifra non è
       disponibile, in output verrà prodotto uno spazio. 
      </para>
     </listitem>

     <listitem>
      <para>
       <literal>TH</literal> non converte valori inferiori a zero
       e non converte numeri frazionali.
      </para>
     </listitem>

     <listitem>
      <para>
       <literal>PL</literal>, <literal>SG</literal> e
       <literal>TH</literal> sono estensioni 
       di <productname>PostgreSQL</productname>. 
      </para>
     </listitem>

     <listitem>
      <para>
       <literal>V</literal> moltiplica
       effettivamente i valori in input per
       <literal>10^<replaceable>n</replaceable></literal>, dove
       <replaceable>n</replaceable> è il numero di cifre che seguono
       <literal>V</literal>. 
       La funzione <function>to_char</function> non supporta l'uso di
       <literal>V</literal> combinato con un punto decimale.
       (Es., <literal>99.9V99</literal> non è consentito).
      </para>
     </listitem>

     <listitem>
      <para>
            L'<literal>EEEE</literal> (notazione scientifica) non può essere usata in combinazione
            con nessuno degli altri modelli di formattazione o
            modificatori diversi da modelli di cifra o punti decimali, 
            e deve essere alla fine della stringa di formattazione
            (per es., <literal>9.99EEEE</literal> è un modello valido).
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
        Certi modificatori possono essere applicati a qualsiasi modello per alterare
        il loro comportamento. Per esempio, <literal>FM9999</literal>
        è il modello <literal>9999</literal> con il modificatore 
        <literal>FM</literal>.
        La <xref linkend="functions-formatting-numericmod-table"/> mostra 
        i modificatori di modello per la formattazione dei numeri.
   </para>

    <table id="functions-formatting-numericmod-table">
     <title>Template Pattern Modifiers for Numeric Formatting</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Modificatore</entry>
        <entry>Descrizione</entry>
        <entry>Esempio</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>prefisso <literal>FM</literal></entry>
        <entry>modalità fill (sopprime spazi bianchi e zeri in più)</entry>
        <entry><literal>FM9999</literal></entry>
       </row>
       <row>
        <entry>suffisso <literal>TH</literal></entry>
        <entry>suffisso maiuscolo per numeri ordinali</entry>
        <entry><literal>999TH</literal></entry>
       </row>   
       <row>
        <entry>suffisso <literal>th</literal></entry>
        <entry>suffisso minuscolo per numeri ordinali</entry>
        <entry><literal>999th</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  <para>
   La <xref linkend="functions-formatting-examples-table" /> mostra alcuni
   esempi di utilizzo della funzione <function>to_char</function>.
  </para>

    <table id="functions-formatting-examples-table">
     <title>Esempi della funzione <function>to_char</function></title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Espressione</entry>
        <entry>Risultato</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal>to_char(current_timestamp, 'Day,&nbsp;DD&nbsp;&nbsp;HH12:MI:SS')</literal></entry>
        <entry><literal>'Tuesday&nbsp;&nbsp;,&nbsp;06&nbsp;&nbsp;05:39:18'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(current_timestamp, 'FMDay,&nbsp;FMDD&nbsp;&nbsp;HH12:MI:SS')</literal></entry>
        <entry><literal>'Tuesday,&nbsp;6&nbsp;&nbsp;05:39:18'</literal></entry>
       </row>          
       <row>
        <entry><literal>to_char(-0.1, '99.99')</literal></entry>
        <entry><literal>'&nbsp;&nbsp;-.10'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(-0.1, 'FM9.99')</literal></entry>
        <entry><literal>'-.1'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(0.1, '0.9')</literal></entry>
        <entry><literal>'&nbsp;0.1'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(12, '9990999.9')</literal></entry>
        <entry><literal>'&nbsp;&nbsp;&nbsp;&nbsp;0012.0'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(12, 'FM9990999.9')</literal></entry>
        <entry><literal>'0012.'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(485, '999')</literal></entry>
        <entry><literal>'&nbsp;485'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(-485, '999')</literal></entry>
        <entry><literal>'-485'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(485, '9&nbsp;9&nbsp;9')</literal></entry>
        <entry><literal>'&nbsp;4&nbsp;8&nbsp;5'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(1485, '9,999')</literal></entry>
        <entry><literal>'&nbsp;1,485'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(1485, '9G999')</literal></entry>
        <entry><literal>'&nbsp;1&nbsp;485'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(148.5, '999.999')</literal></entry>
        <entry><literal>'&nbsp;148.500'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(148.5, 'FM999.999')</literal></entry>
        <entry><literal>'148.5'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(148.5, 'FM999.990')</literal></entry>
        <entry><literal>'148.500'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(148.5, '999D999')</literal></entry>
        <entry><literal>'&nbsp;148,500'</literal></entry>        
       </row>
       <row>
        <entry><literal>to_char(3148.5, '9G999D999')</literal></entry>
        <entry><literal>'&nbsp;3&nbsp;148,500'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(-485, '999S')</literal></entry>
        <entry><literal>'485-'</literal></entry>
       </row>
       <row>            
        <entry><literal>to_char(-485, '999MI')</literal></entry>
        <entry><literal>'485-'</literal></entry>        
       </row>
       <row>
        <entry><literal>to_char(485, '999MI')</literal></entry>
        <entry><literal>'485&nbsp;'</literal></entry>           
       </row>
       <row>
        <entry><literal>to_char(485, 'FM999MI')</literal></entry>
        <entry><literal>'485'</literal></entry>         
       </row>
       <row>
        <entry><literal>to_char(485, 'PL999')</literal></entry>
        <entry><literal>'+485'</literal></entry>        
       </row>
       <row>            
        <entry><literal>to_char(485, 'SG999')</literal></entry>
        <entry><literal>'+485'</literal></entry>        
       </row>
       <row>
        <entry><literal>to_char(-485, 'SG999')</literal></entry>
        <entry><literal>'-485'</literal></entry>        
       </row>
       <row>
        <entry><literal>to_char(-485, '9SG99')</literal></entry>
        <entry><literal>'4-85'</literal></entry>        
       </row>
       <row>
        <entry><literal>to_char(-485, '999PR')</literal></entry>
        <entry><literal>'&lt;485&gt;'</literal></entry>         
       </row>
       <row>
        <entry><literal>to_char(485, 'L999')</literal></entry>
        <entry><literal>'DM&nbsp;485</literal></entry>   
       </row>
       <row>
        <entry><literal>to_char(485, 'RN')</literal></entry>            
        <entry><literal>'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CDLXXXV'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(485, 'FMRN')</literal></entry>  
        <entry><literal>'CDLXXXV'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(5.2, 'FMRN')</literal></entry>
        <entry><literal>'V'</literal></entry>           
       </row>
       <row>
        <entry><literal>to_char(482, '999th')</literal></entry>
        <entry><literal>'&nbsp;482nd'</literal></entry>                         
       </row>
       <row>
        <entry><literal>to_char(485, '"Good&nbsp;number:"999')</literal></entry>
        <entry><literal>'Good&nbsp;number:&nbsp;485'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(485.8, '"Pre:"999"&nbsp;Post:"&nbsp;.999')</literal></entry>
        <entry><literal>'Pre:&nbsp;485&nbsp;Post:&nbsp;.800'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(12, '99V999')</literal></entry>         
        <entry><literal>'&nbsp;12000'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(12.4, '99V999')</literal></entry>
        <entry><literal>'&nbsp;12400'</literal></entry>
       </row>
       <row>            
        <entry><literal>to_char(12.45, '99V9')</literal></entry>
        <entry><literal>'&nbsp;125'</literal></entry>
       </row>
       <row>
        <entry><literal>to_char(0.0004859, '9.99EEEE')</literal></entry>
        <entry><literal>' 4.86e-04'</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  </sect1>


  <sect1 id="functions-datetime">
   <title>Funzioni e operatori di data/orario</title>

  <para>
    La <xref linkend="functions-datetime-table" /> mostra le funzioni
   disponibili per l'elaborazione dei valori data/orario, con i dettagli
   che compaiono nelle sottosezioni successive. La <xref
   linkend="operators-datetime-table" /> illustra il comportamento degli
   operatori aritmetici di base (<literal>+</literal>,
   <literal>*</literal>, ecc.). Per le funzioni di formattazione, consultare
   <xref linkend="functions-formatting" />. Dovreste avere familiarità con
   le informazioni di base sui tipi dati data/orario fornite da <xref
   linkend="datatype-datetime" />.
  </para>

  <para>
   
    Tutte le funzioni e gli operatori descritti in seguito che prendono l'input da <type>time</type> o <type>timestamp</type>,
    attualmente lo prendono in due varianti: una che prende <type>time with time zone</type> o <type>timestamp
    with time zone</type>, e l'altra che prende <type>time without time zone</type> o <type>timestamp without time zone</type>.
    Per brevità, queste varianti non vengono mostrate separatamente. Inoltre, gli
    operatori <literal>+</literal> e <literal>*</literal> si esprimono in coppie commutative (per
    esempio sia data + intero che intero + data); Verrà mostrato solo uno di
    ciascuna coppia.
  </para>

   
<table id="operators-datetime-table">
     <title>Operatori di data/orario</title>

     <tgroup cols="3">
      <thead>
       <row>
        <entry>Operatore</entry>
        <entry>Esempio</entry>
        <entry>Risultato</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><literal>+</literal> </entry>
        <entry><literal>date '2001-09-28' + integer '7'</literal></entry>
        <entry><literal>date '2001-10-05'</literal></entry>
       </row>

       <row>
        <entry> <literal>+</literal> </entry>
        <entry><literal>date '2001-09-28' + interval '1 hour'</literal></entry>
        <entry><literal>timestamp '2001-09-28 01:00:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>+</literal> </entry>
        <entry><literal>date '2001-09-28' + time '03:00'</literal></entry>
        <entry><literal>timestamp '2001-09-28 03:00:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>+</literal> </entry>
        <entry><literal>interval '1 day' + interval '1 hour'</literal></entry>
        <entry><literal>interval '1 day 01:00:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>+</literal> </entry>
        <entry><literal>timestamp '2001-09-28 01:00' + interval '23 hours'</literal></entry>
        <entry><literal>timestamp '2001-09-29 00:00:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>+</literal> </entry>
        <entry><literal>time '01:00' + interval '3 hours'</literal></entry>
        <entry><literal>time '04:00:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>- interval '23 hours'</literal></entry>
        <entry><literal>interval '-23:00:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>date '2001-10-01' - date '2001-09-28'</literal></entry>
        <entry><literal>integer '3'</literal> (days)</entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>date '2001-10-01' - integer '7'</literal></entry>
        <entry><literal>date '2001-09-24'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>date '2001-09-28' - interval '1 hour'</literal></entry>
        <entry><literal>timestamp '2001-09-27 23:00:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>time '05:00' - time '03:00'</literal></entry>
        <entry><literal>interval '02:00:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>time '05:00' - interval '2 hours'</literal></entry>
        <entry><literal>time '03:00:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>timestamp '2001-09-28 23:00' - interval '23 hours'</literal></entry>
        <entry><literal>timestamp '2001-09-28 00:00:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>interval '1 day' - interval '1 hour'</literal></entry>
        <entry><literal>interval '1 day -01:00:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>-</literal> </entry>
        <entry><literal>timestamp '2001-09-29 03:00' - timestamp '2001-09-27 12:00'</literal></entry>
        <entry><literal>interval '1 day 15:00:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>*</literal> </entry>
        <entry><literal>900 * interval '1 second'</literal></entry>
        <entry><literal>interval '00:15:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>*</literal> </entry>
        <entry><literal>21 * interval '1 day'</literal></entry>
        <entry><literal>interval '21 days'</literal></entry>
       </row>

       <row>
        <entry> <literal>*</literal> </entry>
        <entry><literal>double precision '3.5' * interval '1 hour'</literal></entry>
        <entry><literal>interval '03:30:00'</literal></entry>
       </row>

       <row>
        <entry> <literal>/</literal> </entry>
        <entry><literal>interval '1 hour' / double precision '1.5'</literal></entry>
        <entry><literal>interval '00:40:00'</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <indexterm>
    <primary>age</primary>
   </indexterm>
   <indexterm>
    <primary>clock_timestamp</primary>
   </indexterm>
   <indexterm>
    <primary>current_date</primary>
   </indexterm>
   <indexterm>
    <primary>current_time</primary>
   </indexterm>
   <indexterm>
    <primary>current_timestamp</primary>
   </indexterm>
   <indexterm>
    <primary>date_part</primary>
   </indexterm>
   <indexterm>
    <primary>date_trunc</primary>
   </indexterm>
   <indexterm>
    <primary>extract</primary>
   </indexterm>
   <indexterm>
    <primary>isfinite</primary>
   </indexterm>
   <indexterm>
    <primary>justify_days</primary>
   </indexterm>
   <indexterm>
    <primary>justify_hours</primary>
   </indexterm>
   <indexterm>
    <primary>justify_interval</primary>
   </indexterm>
   <indexterm>
    <primary>localtime</primary>
   </indexterm>
   <indexterm>
    <primary>localtimestamp</primary>
   </indexterm>
   <indexterm>
    <primary>now</primary>
   </indexterm>
   <indexterm>
    <primary>statement_timestamp</primary>
   </indexterm>
   <indexterm>
    <primary>timeofday</primary>
   </indexterm>
   <indexterm>
    <primary>transaction_timestamp</primary>
   </indexterm>

    <table id="functions-datetime-table">
     <title>Funzioni di data/orario </title>
     <tgroup cols="5">
      <thead>
       <row>
        <entry>Funczione</entry>
        <entry>Tipo di ritorno</entry>
        <entry>Descrizione</entry>
        <entry>Esempio</entry>
        <entry>Risultato</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><literal><function>age(<type>timestamp</type>, <type>timestamp</type>)</function></literal></entry>
        <entry><type>interval</type></entry>
        <entry>Sottrae gli argomenti, producendo un risultato <quote>simbolico</quote> 
        che usa anni e mesi</entry>
        <entry><literal>age(timestamp '2001-04-10', timestamp '1957-06-13')</literal></entry>
        <entry><literal>43 years 9 mons 27 days</literal></entry>
       </row>

       <row>
        <entry><literal><function>age(<type>timestamp</type>)</function></literal></entry>
        <entry><type>interval</type></entry>
        <entry>Sottrae da <function>current_date</function> (alla mezzanotte)</entry>
        <entry><literal>age(timestamp '1957-06-13')</literal></entry>
        <entry><literal>43 years 8 mons 3 days</literal></entry>
       </row>

       <row>
        <entry><literal><function>clock_timestamp()</function></literal></entry>
        <entry><type>timestamp with time zone</type></entry>
        <entry>Current date and time (changes during statement execution);
         see <xref linkend="functions-datetime-current"/>
        </entry>
        <entry></entry>
        <entry></entry>
       </row>

       <row>
        <entry><literal><function>current_date</function></literal></entry>
        <entry><type>date</type></entry>
        <entry>La data corrente; Vedere <xref linkend="functions-datetime-current"/>
        </entry>
        <entry></entry>
        <entry></entry>
       </row>

       <row>
        <entry><literal><function>current_time</function></literal></entry>
        <entry><type>time with time zone</type></entry>
        <entry>L'ora attuale del giorno;
         Vedere <xref linkend="functions-datetime-current"/>
        </entry>
        <entry></entry>
        <entry></entry>
       </row>

       <row>
        <entry><literal><function>current_timestamp</function></literal></entry>
        <entry><type>timestamp with time zone</type></entry>
        <entry>Data e orario corrente (all'inizio della transazione corrente);
         Vedere <xref linkend="functions-datetime-current"/>
        </entry>
        <entry></entry>
        <entry></entry>
       </row>

       <row>
        <entry><literal><function>date_part(<type>text</type>, <type>timestamp</type>)</function></literal></entry>
        <entry><type>double precision</type></entry>
        <entry>Ottiene un sottocampo (equivalente a <function>extract</function>);
         Vedere <xref linkend="functions-datetime-extract"/>
        </entry>
        <entry><literal>date_part('hour', timestamp '2001-02-16 20:38:40')</literal></entry>
        <entry><literal>20</literal></entry>
       </row>

       <row>
        <entry><literal><function>date_part(<type>text</type>, <type>interval</type>)</function></literal></entry>
        <entry><type>double precision</type></entry>
        <entry>Ottiene un sottocampo (equivalente a
         <function>extract</function>); Vedere <xref linkend="functions-datetime-extract"/>
        </entry>
        <entry><literal>date_part('month', interval '2 years 3 months')</literal></entry>
        <entry><literal>3</literal></entry>
       </row>

       <row>
        <entry><literal><function>date_trunc(<type>text</type>, <type>timestamp</type>)</function></literal></entry>
        <entry><type>timestamp</type></entry>
        <entry>Tronca con la precisione specificata; Vedere anche <xref linkend="functions-datetime-trunc"/>
        </entry>
        <entry><literal>date_trunc('hour', timestamp '2001-02-16 20:38:40')</literal></entry>
        <entry><literal>2001-02-16 20:00:00</literal></entry>
       </row>

       <row>
        <entry><literal><function>extract</function>(<parameter>field</parameter> from
         <type>timestamp</type>)</literal></entry>
        <entry><type>double precision</type></entry>
        <entry>Ottiene un sottocampo; Vedere <xref linkend="functions-datetime-extract"/>
        </entry>
        <entry><literal>extract(hour from timestamp '2001-02-16 20:38:40')</literal></entry>
        <entry><literal>20</literal></entry>
       </row>

       <row>
        <entry><literal><function>extract</function>(<parameter>field</parameter> from
         <type>interval</type>)</literal></entry>
        <entry><type>double precision</type></entry>
        <entry>Ottiene un sottocampo; Vedere <xref linkend="functions-datetime-extract"/>
        </entry>
        <entry><literal>extract(month from interval '2 years 3 months')</literal></entry>
        <entry><literal>3</literal></entry>
       </row>

       <row>
        <entry><literal><function>isfinite(<type>date</type>)</function></literal></entry>
        <entry><type>boolean</type></entry>
        <entry>Test per date finite (non +/-infinito)</entry>
        <entry><literal>isfinite(date '2001-02-16')</literal></entry>
        <entry><literal>true</literal></entry>
       </row>

       <row>3
        <entry><literal><function>isfinite(<type>timestamp</type>)</function></literal></entry>
        <entry><type>boolean</type></entry>
        <entry>Test per timestamp finiti (non +/-infinito)</entry>
        <entry><literal>isfinite(timestamp '2001-02-16 21:28:30')</literal></entry>
        <entry><literal>true</literal></entry>
       </row>

       <row>
        <entry><literal><function>isfinite(<type>interval</type>)</function></literal></entry>
        <entry><type>boolean</type></entry>
        <entry>Test per intervalli finiti</entry>
        <entry><literal>isfinite(interval '4 hours')</literal></entry>
        <entry><literal>true</literal></entry>
       </row>

       <row>
        <entry><literal><function>justify_days(<type>interval</type>)</function></literal></entry>
        <entry><type>interval</type></entry>
        <entry>Aggiusta l'intervallo per rappresentare periodi di 30 giorni come mesi</entry>
        <entry><literal>justify_days(interval '35 days')</literal></entry>
        <entry><literal>1 mon 5 days</literal></entry>
       </row>

       <row>
        <entry><literal><function>justify_hours(<type>interval</type>)</function></literal></entry>
        <entry><type>interval</type></entry>
        <entry>Aggiusta l'intervallo per rappresentare periodi di 24 ore come giorni</entry>
        <entry><literal>justify_hours(interval '27 hours')</literal></entry>
        <entry><literal>1 day 03:00:00</literal></entry>
       </row>

       <row>
        <entry><literal><function>justify_interval(<type>interval</type>)</function></literal></entry>
        <entry><type>interval</type></entry>
        <entry>Aggiusta l'intervallo usando <function>justify_days</function> e <function>justify_hours</function>, 
            con aggiustamenti addizionali di segno</entry>
        <entry><literal>justify_interval(interval '1 mon -1 hour')</literal></entry>
        <entry><literal>29 days 23:00:00</literal></entry>
       </row>

       <row>
        <entry><literal><function>localtime</function></literal></entry>
        <entry><type>time</type></entry>
        <entry>Orario del giorno corrente;
         Vedere <xref linkend="functions-datetime-current"/>
        </entry>
        <entry></entry>
        <entry></entry>
       </row>

       <row>
        <entry><literal><function>localtimestamp</function></literal></entry>
        <entry><type>timestamp</type></entry>
        <entry>Data e ora corrente (all'inizio dell'attuale transazione);
         Vedere <xref linkend="functions-datetime-current"/>
        </entry>
        <entry></entry>
        <entry></entry>
       </row>

       <row>
        <entry><literal><function>now()</function></literal></entry>
        <entry><type>timestamp with time zone</type></entry>
        <entry>Data e ora corrente (all'inizio dell'attuale transazione);
         Vedere <xref linkend="functions-datetime-current"/>
        </entry>
        <entry></entry>
        <entry></entry>
       </row>

       <row>
        <entry><literal><function>statement_timestamp()</function></literal></entry>
        <entry><type>timestamp with time zone</type></entry>
        <entry>Data e ora corrente (all'inizio dell'attuale transazione);
         Vedere <xref linkend="functions-datetime-current"/>
        </entry>
        <entry></entry>
        <entry></entry>
       </row>

       <row>
        <entry><literal><function>timeofday()</function></literal></entry>
        <entry><type>text</type></entry>
        <entry>Data e ora corrente
         (simile a <function>clock_timestamp</function>, ma come stringhe <type>text</type>);
         Vedere <xref linkend="functions-datetime-current"/>
        </entry>
        <entry></entry>
        <entry></entry>
       </row>

       <row>
        <entry><literal><function>transaction_timestamp()</function></literal></entry>
        <entry><type>timestamp with time zone</type></entry>
        <entry>Data e ora corrente (all'inizio dell'attuale transazione);
         Vedere <xref linkend="functions-datetime-current"/>
        </entry>
        <entry></entry>
        <entry></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
    In aggiunta a queste funzioni, è supportato l'operatore SQL 
    <literal>OVERLAPS</literal>:
<synopsis>
(<replaceable>start1</replaceable>, <replaceable>end1</replaceable>) OVERLAPS (<replaceable>start2</replaceable>, <replaceable>end2</replaceable>)
(<replaceable>start1</replaceable>, <replaceable>length1</replaceable>) OVERLAPS (<replaceable>start2</replaceable>, <replaceable>length2</replaceable>)
</synopsis>
        L'espressione restituisce true quando due periodi di tempo (definiti dai loro
        punti finali) si sovrappongono, false quando non lo fanno. I punti finali
        possono essere specificati come coppie di date, orari, o timestamp; O come
        una data, orario, o timestamp seguito da un intervallo. Quando viene fornita
        una coppia di valori, sia l'inizio che la fine può essere scritta
        per prima; <literal>OVERLAPS</literal> automaticamente prende il valore anteriore
        della coppia come inizio. Ogni periodo di tempo è considerato 
        rappresentare l'intervallo mezzo aperto <replaceable>start</replaceable> <literal>&lt;=</literal>
        <replaceable>time</replaceable> <literal>&lt;</literal> <replaceable>end</replaceable>, a meno che
        <replaceable>start</replaceable> e <replaceable>end</replaceable> siano uguali, nel qual caso rappresenta
        quel singolo istante. Questo significa per esempio che due periodi di 
        tempo con solo un punto finale in comune non si sovrappongono.
   </para>

<screen>
SELECT (DATE '2001-02-16', DATE '2001-12-21') OVERLAPS
       (DATE '2001-10-30', DATE '2002-10-30');
<lineannotation>Result: </lineannotation><computeroutput>true</computeroutput>
SELECT (DATE '2001-02-16', INTERVAL '100 days') OVERLAPS
       (DATE '2001-10-30', DATE '2002-10-30');
<lineannotation>Result: </lineannotation><computeroutput>false</computeroutput>
SELECT (DATE '2001-10-29', DATE '2001-10-30') OVERLAPS
       (DATE '2001-10-30', DATE '2001-10-31');
<lineannotation>Result: </lineannotation><computeroutput>false</computeroutput>
SELECT (DATE '2001-10-30', DATE '2001-10-30') OVERLAPS
       (DATE '2001-10-30', DATE '2001-10-31');
<lineannotation>Result: </lineannotation><computeroutput>true</computeroutput>
</screen>

<note>
    <para>
        Nota per il revisore: TODO
    </para>
</note>
  <para>
   Across daylight saving time changes (with the session time zone set to a 
   time zone that recognizes DST), this means <literal>interval '1 day'</literal> 
   does not necessarily equal <literal>interval '24 hours'</literal>. 
   For example, with the session time zone set to <literal>CST7CDT</literal>,
   <literal>timestamp with time zone '2005-04-02 12:00-07' + interval '1 day' </literal>
   will produce <literal>timestamp with time zone '2005-04-03 12:00-06'</literal>, 
   while adding <literal>interval '24 hours'</literal> to the same initial 
   <type>timestamp with time zone</type> produces
   <literal>timestamp with time zone '2005-04-03 13:00-06'</literal>, as there is
   a change in daylight saving time at <literal>2005-04-03 02:00</literal> in time zone 
   <literal>CST7CDT</literal>.
  </para>

  <para>
    Notare che ci può essere ambiguità nei <literal>mesi</literal> ritornati da
    <function>age</function> dato che i mesi hanno un numero differente di
    giorni. L'approccio di <productname>PostgreSQL</productname> usa il mese della
    data che viene prima delle due, quando calcola i mesi parziali. Per esempio,
    <literal>age('2004-06-01', '2004-04-30')</literal> usa Aprile per produrre
    <literal>1 mon 1 day</literal>, mentre usare Maggio produrrebbe <literal>1 mon 2
    days</literal> dato che Maggio ha 31 giorni, mentre Aprile ne ha solo 30.
  </para>

  <sect2 id="functions-datetime-extract">
   <title>Funzioni <function>EXTRACT</function> e <function>date_part</function></title>

   <indexterm>
    <primary>date_part</primary>
   </indexterm>
   <indexterm>
    <primary>extract</primary>
   </indexterm>

<synopsis>
EXTRACT(<replaceable>field</replaceable> FROM <replaceable>source</replaceable>)
</synopsis>

   <para>
    
    La funzione <function>extract</function> estrae sottocampi
    quali l'anno o l'ora dai valori data/orario.
    <replaceable>source</replaceable> deve essere una espressione di un valore di
    tipo <type>timestamp</type>, <type>time</type>, o <type>interval</type>.
    (Le espressioni di tipo <type>date</type> sono 
    convertite in <type>timestamp</type> e quindi possono essere
    usate), <replaceable>field</replaceable> è un identificatore o una
    stringa che seleziona quale campo estrarre dal valore sorgente.
    La funzione <function>extract</function> restituisce valori di tipo
    <type>double precision</type>.
    I seguenti sono nomi di campo validi:



    <!-- alphabetical -->
    <variablelist>
     <varlistentry>
      <term><literal>century</literal></term>
      <listitem>
       <para>
        The century
       </para>

<screen>
SELECT EXTRACT(CENTURY FROM TIMESTAMP '2000-12-16 12:21:13');
<lineannotation>Risultato: </lineannotation><computeroutput>20</computeroutput>
SELECT EXTRACT(CENTURY FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>21</computeroutput>
</screen>

       <para>
        
        Il primo secolo inizia il 0001-01-01 00:00:00 DC, anche se
        a quel tempo non era riconosciuto. Questa definizone si applica in tutti
        i paesi che utilizzano il calendario Gregoriano. Non esiste il secolo numero 0,
        si va da -1 a 1.
        Se non si condivide questo, scrivere il proprio reclamo a:
        Papa, Cattedrale di San Pietro di Roma, Vaticano.
       </para>

       <para>
        Le versioni di <productname>PostgreSQL</productname> precedenti all'8.0 non
        seguivano la numerazione dei secoli convenzionale, ma restituivano solo
        il campo anno diviso 100.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>day</literal></term>
      <listitem>
       <para>
        Il campo giorno (del mese) (1 - 31)
       </para>

<screen>
SELECT EXTRACT(DAY FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>16</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>decade</literal></term>
      <listitem>
       <para>
        Il campo anno diviso per 10
       </para>

<screen>
SELECT EXTRACT(DECADE FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>200</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>dow</literal></term>
      <listitem>
       <para>
        Il giorno della settimana dalla Domenica(<literal>0</literal>) al
        Sabato(<literal>6</literal>)
       </para>

<screen>
SELECT EXTRACT(DOW FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>5</computeroutput>
</screen>
       <para>
        Notare che la numerazione dei giorni della settimana di <function>extract</function>
        è diversa da quella della funzione
        <function>to_char(..., 'D')</function>.
       </para>

      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>doy</literal></term>
      <listitem>
       <para>
        Il giorno dell'anno (1 - 365/366)
       </para>

<screen>
SELECT EXTRACT(DOY FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>47</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>epoch</literal></term>
      <listitem>
       <para>
        Per i valori <type>date</type> e <type>timestamp</type>, il
        numero di secondi a partire dal 1970-01-01 00:00:00-00 (può essere negativo);
        per i valori <type>interval</type>, il numero totale
        di secondi nell'intervallo.
       </para>

<screen>
SELECT EXTRACT(EPOCH FROM TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40.12-08');
<lineannotation>Result: </lineannotation><computeroutput>982384720.12</computeroutput>

SELECT EXTRACT(EPOCH FROM INTERVAL '5 days 3 hours');
<lineannotation>Result: </lineannotation><computeroutput>442800</computeroutput>
</screen>

       <para>
            Questo è il modo per convertire un valore epoch in un time
            stamp:
       </para>
<screen>
SELECT TIMESTAMP WITH TIME ZONE 'epoch' + 982384720.12 * INTERVAL '1 second';
</screen>
       <para>
            (La funzione <function>to_timestamp</function> incapsula tale conversione.)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>hour</literal></term>
      <listitem>
       <para>
         Il campo ora (0 - 23)
       </para>

<screen>
SELECT EXTRACT(HOUR FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Result: </lineannotation><computeroutput>20</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>isodow</literal></term>
      <listitem>
       <para>
        Il giorno della settimana dal Lunedì(<literal>1</literal>) alla
        Domenica(<literal>7</literal>)
       </para>

<screen>
SELECT EXTRACT(ISODOW FROM TIMESTAMP '2001-02-18 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>7</computeroutput>
</screen>
       <para>
        Questo è identico a <literal>dow</literal> eccetto per la Domenica. Esso
        segue la numerazione dei giorni della settimana <acronym>ISO</acronym> 8601.
       </para>

      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>isoyear</literal></term>
      <listitem>
       <para>
        The <acronym>ISO</acronym> 8601 year that the date falls in (not applicable to intervals)
        L'anno <acronym>ISO</acronym> 8601 in cui cade la data (non applicabile agli intervalli).
       </para>

<screen>
SELECT EXTRACT(ISOYEAR FROM DATE '2006-01-01');
<lineannotation>Risultato: </lineannotation><computeroutput>2005</computeroutput>
SELECT EXTRACT(ISOYEAR FROM DATE '2006-01-02');
<lineannotation>Risultato: </lineannotation><computeroutput>2006</computeroutput>
</screen>

       <para>
        
        Ogni anno <acronym>ISO</acronym> comincia con il lunedì della settimana 
        contenente il 4 di gennaio, per cui all'inizio di Gennaio o alla fine di Dicembre l'anno <acronym>ISO</acronym> 
        può essere diverso dall'anno Gregoriano. Vedere il campo <literal>week</literal> per ulteriori informazioni.
       </para>
       <para>
        Questo campo non è disponibile nelle versioni di PostgreSQL precedenti alla 8.3.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>microseconds</literal></term>
      <listitem>
       <para>
        Il campo secondi, compresa la parte frazionale, moltiplicato per 1
        000 000.  Notare che questo comprende i secondi completi.
       </para>

<screen>
SELECT EXTRACT(MICROSECONDS FROM TIME '17:12:28.5');
<lineannotation>Risultato: </lineannotation><computeroutput>28500000</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>millennium</literal></term>
      <listitem>
       <para>
        Il millennio
       </para>

<screen>
SELECT EXTRACT(MILLENNIUM FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>3</computeroutput>
</screen>

       <para>
        Gli anni compresi nel 1900 sono relativi al secondo millennio.
        Il terzo millennio inizia l' 1 gennaio, 2001.
       </para>

       <para>
        Le versioni di <productname>PostgreSQL</productname> precedenti all'8.0 non
        seguono la numerazione convenzionale dei millenni, ma restituiscono
        il campo anno diviso 1000.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>milliseconds</literal></term>
      <listitem>
       <para>
        Il campo secondi, compresa la parte frazionale, moltiplicato per
        1000.  Notare che questo comprende i secondi completi.
       </para>

<screen>
SELECT EXTRACT(MILLISECONDS FROM TIME '17:12:28.5');
<lineannotation>Risultato: </lineannotation><computeroutput>28500</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>minute</literal></term>
      <listitem>
       <para>
        Il campo dei minuti (0 - 59)
       </para>

<screen>
SELECT EXTRACT(MINUTE FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>38</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>month</literal></term>
      <listitem>
       <para>
        Per valori <type>timestamp</type>, il numero di mesi compresi
        nell'anno (1 - 12) ; per valori <type>interval</type>
        il numero dei mesi, modulo 12 (0 - 11)
       </para>

<screen>
SELECT EXTRACT(MONTH FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>2</computeroutput>

SELECT EXTRACT(MONTH FROM INTERVAL '2 years 3 months');
<lineannotation>Risultato: </lineannotation><computeroutput>3</computeroutput>

SELECT EXTRACT(MONTH FROM INTERVAL '2 years 13 months');
<lineannotation>Risultato: </lineannotation><computeroutput>1</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>quarter</literal></term>
      <listitem>
       <para>
        Il quarto di anno (trimestre) (1 - 4) nel quale è compreso il giorno
       </para>

<screen>
SELECT EXTRACT(QUARTER FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>1</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>second</literal></term>
      <listitem>
       <para>
        
        Il campo secondi, comprese la parti frazionarie (0 -
        59<footnote><simpara>60 se i secondi sono implementati
        dal sistema operativo</simpara></footnote>)
       </para>

<screen>
SELECT EXTRACT(SECOND FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>40</computeroutput>

SELECT EXTRACT(SECOND FROM TIME '17:12:28.5');
<lineannotation>Risultato: </lineannotation><computeroutput>28.5</computeroutput>
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>timezone</literal></term>
      <listitem>
       <para>
        
        Lo scostamento dal fuso orario UTC, misurato in secondi. I valori positivi
        corrispondono ai fusi orari ad est di UTC, i valori negativi ai
        fusi ad ovest di UTC.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>timezone_hour</literal></term>
      <listitem>
       <para>
        La componente ora dello scostamento dal fuso orario
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>timezone_minute</literal></term>
      <listitem>
       <para>
        La componente minuto dello scostamento dal fuso orario
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>week</literal></term>
      <listitem>
       <para>
        
        Il numero della settimana dell'anno in cui cade il giorno. Per definizione
        (<acronym>ISO</acronym> 8601), la prima settimana di un anno
        contiene il 4 Gennaio di quell'anno. (La settimana <acronym>ISO</acronym>-8601
        inizia il lunedì). In altri termini, il primo giovedi di 
        un anno è nella settimana 1 di quell'anno.
       </para>
       <para>
        
        Per questo motivo, è possibile che le date di inizio gennaio facciano parte della 
        52esima o 53esima settimana dell'anno precedente. Per esempio, <literal>2005-01-01</literal>
        fa parte della 53esima settimana dell'anno 2004, e <literal>2006-01-01</literal> fa parte della 
        52esima settimana dell'anno 2005.
       </para>

<screen>
SELECT EXTRACT(WEEK FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>7</computeroutput>
</screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>year</literal></term>
      <listitem>
       <para>
        Il campo anno. Ricordarsi che non esiste <literal>0 DC</literal>, per cui le sottrazioni  
        degli anni <literal>DC</literal> dagli anni <literal>AC</literal> dovranno essere fatte con attenzione.
       </para>

<screen>
SELECT EXTRACT(YEAR FROM TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>2001</computeroutput>
</screen>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

   <para>
    La funzione <function>extract</function> è destinata principalmente
    ai processi di calcolo. Per la formattazione dei valori data/orario da
    visualizzare, consultare <xref linkend="functions-formatting" />.
   </para>

   <para>
    La funzione <function>date_part</function> è modellata
    sulla funzione tradizionle di <productname>Ingres</productname>  equivalente alla
    funzione <function>extract</function> di <acronym>SQL</acronym> standard:
<synopsis>
date_part('<replaceable>field</replaceable>', <replaceable>source</replaceable>)
</synopsis>
    
    Notare che qui il parametro <replaceable>campo</replaceable> dovrà
    necessariamente essere un valore stringa, non un nome. I nomi di campo
    validi per <function>date_part</function> sono gli stessi utilizzati per
    <function>extract</function>.
   </para>

<screen>
SELECT date_part('day', TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>16</computeroutput>

SELECT date_part('hour', INTERVAL '4 hours 3 minutes');
<lineannotation>Risultato: </lineannotation><computeroutput>4</computeroutput>
</screen>

  </sect2>

  <sect2 id="functions-datetime-trunc">
   <title>Funzione <function>date_trunc</function></title>

   <indexterm>
    <primary>date_trunc</primary>
   </indexterm>

   <para>
    La funzione <function>date_trunc</function> è concettualmente
    simile alla funzione <function>trunc</function> per i numeri.
   </para>

   <para>
<synopsis>
date_trunc('<replaceable>field</replaceable>', <replaceable>source</replaceable>)
</synopsis>
    
    <replaceable>source</replaceable> è un valore di tipo
    <type>timestamp</type> o <type>interval</type>.
    (i valori di tipo <type>date</type> e
    <type>time</type> vengono convertiti automaticamente a <type>timestamp</type> o
    <type>interval</type> rispettivamente).
    <replaceable>field</replaceable> seleziona con quale precisione
    troncare il valore in input. Il valore restituito è di tipo
    <type>timestamp</type> o <type>interval</type>
    con tutti i campi meno significativi di quello selezionato
    impostati a zero (o uno, per il giorno ed il mese).
   </para>

   <para>
    Valori validi di <replaceable>field</replaceable> sono:
    <simplelist>
     <member><literal>microseconds</literal></member>
     <member><literal>milliseconds</literal></member>
     <member><literal>second</literal></member>
     <member><literal>minute</literal></member>
     <member><literal>hour</literal></member>
     <member><literal>day</literal></member>
     <member><literal>week</literal></member>
     <member><literal>month</literal></member>
     <member><literal>quarter</literal></member>
     <member><literal>year</literal></member>
     <member><literal>decade</literal></member>
     <member><literal>century</literal></member>
     <member><literal>millennium</literal></member>
    </simplelist>
   </para>

   <para>
    Esempi:
<screen>
SELECT date_trunc('hour', TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>2001-02-16 20:00:00</computeroutput>

SELECT date_trunc('year', TIMESTAMP '2001-02-16 20:38:40');
<lineannotation>Risultato: </lineannotation><computeroutput>2001-01-01 00:00:00</computeroutput>
</screen>
   </para>
  </sect2>

  <sect2 id="functions-datetime-zoneconvert">
   <title><literal>AT TIME ZONE</literal></title>

   <indexterm>
    <primary>time zone</primary>
    <secondary>conversione</secondary>
   </indexterm>

   <indexterm>
    <primary>AT TIME ZONE</primary>
   </indexterm>

   <para>
    Il costrutto <literal>AT TIME ZONE</literal> consente conversioni
    di timestamp per fusi orari diversi. La <xref
    linkend="functions-datetime-zoneconvert-table" /> mostra le sue
    diverse varianti.
   </para>

    <table id="functions-datetime-zoneconvert-table">
     <title>Varianti di <literal>AT TIME ZONE</literal></title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Espressione</entry>
        <entry>Tipo di ritorno</entry>
        <entry>Descrizione</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry>
         <literal><type>timestamp without time zone</type> AT TIME ZONE <replaceable>fuso</replaceable></literal>
        </entry>
        <entry><type>timestamp with time zone</type></entry>
        <entry>Tratta il time stamp <emphasis>senza fuso orario</emphasis> fornito come localizzato nel fuso orario specificato</entry>
       </row>

       <row>
        <entry>
         <literal><type>timestamp with time zone</type> AT TIME ZONE <replaceable>fuso</replaceable></literal>
        </entry>
        <entry><type>timestamp without time zone</type></entry>
        <entry>Converte il time stamp <emphasis>con fuso orario</emphasis> fornito al nuovo fuso orario</entry>
       </row>

       <row>
        <entry>
         <literal><type>time with time zone</type> AT TIME ZONE <replaceable>fuso</replaceable></literal>
        </entry>
        <entry><type>time with time zone</type></entry>
        <entry>Converte il time <emphasis>con fuso orario</emphasis> fornito al nuovo fuso orario</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
    In queste espressioni, la <replaceable>zona</replaceable> di fuso orario desiderato può essere
    specificato indifferentemente come una stringa di testo (p.e., <literal>'PST'</literal>)
    o come un intervallo (p.e., <literal>INTERVAL '-08:00'</literal>).
    Nel caso del testo, un nome di fuso orario può essere specificato in ognuno dei modi
    descritti dentro <xref linkend="datatype-timezones" />.
   </para>

   <para>
    Esempi (supponendo che il fuso orario locale è <literal>PST8PDT</literal>):
<screen>
SELECT TIMESTAMP '2001-02-16 20:38:40' AT TIME ZONE 'MST';
<lineannotation>Risultato: </lineannotation><computeroutput>2001-02-16 19:38:40-08</computeroutput>

SELECT TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40-05' AT TIME ZONE 'MST';
<lineannotation>Risultato: </lineannotation><computeroutput>2001-02-16 18:38:40</computeroutput>
</screen>
    
    Il primo esempio prende un timestamp senza fuso orario e lo interpreta come tempo MST
    (UTC-7), che viene poi convertito in PST (UTC-8) per la visualizzazione. Il secondo esempio prende 
    un timestamp specificato in EST (UTC-5) e lo converte nel tempo locale in MST (UTC-7).
   </para>

   <para>
    
    La funzione <literal><function>timezone</function>(<replaceable>zone</replaceable>,
    <replaceable>timestamp</replaceable>)</literal> è equivalente al costrutto
    conforme-SQL  
    <literal><replaceable>timestamp</replaceable> AT TIME ZONE <replaceable>zone</replaceable></literal>
   </para>
  </sect2>

  <sect2 id="functions-datetime-current">
   <title>Data/orario corrente</title>

   <indexterm>
    <primary>data</primary>
    <secondary>corrente</secondary>
   </indexterm>

   <indexterm>
    <primary>orario</primary>
    <secondary>corrente</secondary>
   </indexterm>

   <para>
    <productname>PostgreSQL</productname> fornisce un certo numero di funzioni
    che restituiscono valori relativi alla data e all'orario corrente. Tutte
    queste funzioni standard-SQL restituiscono valori basati al momento di inizio
    della transazione corrente:
<synopsis>
CURRENT_DATE
CURRENT_TIME
CURRENT_TIMESTAMP
CURRENT_TIME(<replaceable>precision</replaceable>)
CURRENT_TIMESTAMP(<replaceable>precision</replaceable>)
LOCALTIME
LOCALTIMESTAMP
LOCALTIME(<replaceable>precision</replaceable>)
LOCALTIMESTAMP(<replaceable>precision</replaceable>)
</synopsis>
    </para>

    <para>
     <function>CURRENT_TIME</function> e
     <function>CURRENT_TIMESTAMP</function> forniscono valori con fuso orario;
     <function>LOCALTIME</function> e
     <function>LOCALTIMESTAMP</function> forniscono valori senza fuso orario.
    </para>

    <para>
     <function>CURRENT_TIME</function>,
     <function>CURRENT_TIMESTAMP</function>,
     <function>LOCALTIME</function>, e
     <function>LOCALTIMESTAMP</function>
     can optionally take
     Possono opzionalmente essere forniti di un parametro precisione,
     che causa l'arrotondamento del risultato a quelle cifre
     decimali del campo dei secondi. Senza un parametro di precisione,
     il risultato è dato alla piena precisione disponibile
    </para>

   <para>
    Alcuni esempi:
<screen>
SELECT CURRENT_TIME;
<lineannotation>Risultato: </lineannotation><computeroutput>14:39:53.662522-05</computeroutput>

SELECT CURRENT_DATE;
<lineannotation>Risultato: </lineannotation><computeroutput>2001-12-23</computeroutput>

SELECT CURRENT_TIMESTAMP;
<lineannotation>Risultato: </lineannotation><computeroutput>2001-12-23 14:39:53.662522-05</computeroutput>

SELECT CURRENT_TIMESTAMP(2);
<lineannotation>Risultato: </lineannotation><computeroutput>2001-12-23 14:39:53.66-05</computeroutput>

SELECT LOCALTIMESTAMP;
<lineannotation>Risultato: </lineannotation><computeroutput>2001-12-23 14:39:53.662522</computeroutput>
</screen>
   </para>

   <para>
    
    Poichè queste funzioni restituiscono
    il momento di inizio della transazione corrente, il loro valore non
    cambia nel corso della transazione. Ciò viene considerato una caratteristica: 
    l'intento è di consentire ad una singola transazione di avere una consistente
    nozione del tempo <quote>corrente</quote>, in modo che modifiche
    multiple all'interno della stessa transazione generano lo stesso
    timestamp.
   </para>

   <note>
    <para>
     Altri sistemi di database potrebbero avanzare questo valore più
     frequentemente.
    </para>
   </note>

   <para>
    <productname>PostgreSQL</productname> fornisce anche funzioni che
    restituiscono il tempo di inizio dell'istruzione corrente, come pure il tempo
    corrente effettivo al momento in cui viene chiamata la funzione. L'elenco completo
    delle funzioni non standard-SQL relative al tempo è:
<synopsis>
transaction_timestamp()
statement_timestamp()
clock_timestamp()
timeofday()
now()
</synopsis>
   </para>

   <para>
    La funzione <function>now()</function> è tradizionale di <productname>PostgreSQL</productname>
    ed è equivalente a <function>CURRENT_TIMESTAMP</function>.
    La funzione <function>transaction_timestamp()</function> è anch'essa equivalente a
    <function>CURRENT_TIMESTAMP</function>, ma viene chiamata per riflettere chiaramente
    cosa restituisce.
    La funzione <function>statement_timestamp()</function> restituisce il tempo di inizio dell'istruzione
    corrente (più specificatamente, il tempo di ricezione dell'ultimo messaggio di
    comando dal client).
    Le funzioni <function>statement_timestamp()</function> e <function>transaction_timestamp()</function>
    restituiscono lo stesso valore durante il primo comando di una transazione, ma possono
    differire durante i successivi comandi.
    
    
    La funzione <function>clock_timestamp()</function> restituisce l'orario corrente effettivo, e
    quindi il suo valore cambia anche all'interno di un solo comando SQL.
    <function>timeofday()</function> è una storica funzione
    <productname>PostgreSQL</productname>. Come
    <function>clock_timestamp()</function>, essa restituisce l'orario corrente effettivo,
    ma come una stringa di tipo <type>text</type> formattata invede di un valore <type>timestamp
    with time zone</type>.
        <function>now()</function> è una funzione tradizionale di <productname>PostgreSQL</productname> 
        equivalente a <function>transaction_timestamp()</function>.
   </para>

   <para>
    
        Tutti i tipi di dato "data/orario" accettano anche lo speciale valore letterale
        <literal>now</literal> per specificare la data e l'orario corrente (anch'esso,
        interpretato come tempo di inizio della transazione). Per cui,
        le seguenti tre istruzioni restituiscono tutte lo stesso risultato:
<programlisting>
SELECT CURRENT_TIMESTAMP;
SELECT now();
SELECT TIMESTAMP 'now';  -- errato per utilizzo con DEFAULT
</programlisting>
   </para>

    <tip>
     <para>
      
        Non bisogna utilizzare la terza forma quando si specifica una clausula <literal>DEFAULT</literal>
      nella creazione di una tabella. Il sistema convertirà  <literal>now</literal>
      in un <type>timestamp</type> appena la costante viene analizzata, per cui quando
      si avrà bisogno del valore di default, verrà usato  
      il momento di creazione della tabella! Le prime due forme
      non verranno valutate fino a che non viene usato il valore di default,
      perchè sono delle chiamate di funzione. Per cui forniranno il comportamento
      desiderato, cioè acquisire come default il momento di inserimento della riga.
     </para>
    </tip>
  </sect2>

  <sect2 id="functions-datetime-delay">
   <title>Ritardare l'esecuzione</title>

   <indexterm>
    <primary>pg_sleep</primary>
   </indexterm>
   <indexterm>
    <primary>sleep</primary>
   </indexterm>
   <indexterm>
    <primary>delay</primary>
   </indexterm>

   <para>
    Le seguenti funzioni sono disponibili per ritardare l'esecuzione del processo
    server:
<synopsis>
pg_sleep(<replaceable>seconds</replaceable>)
</synopsis>

    <function>pg_sleep</function> rende dormiente il processo della sessione corrente, fino a che
    non viene raggiunto il numero di secondi contenuto nel parametro <replaceable>seconds</replaceable>.
    Il parametro <replaceable>seconds</replaceable> è un valore di tipo
    <type>double precision</type>, per cui possono essere specificati ritardi con frazioni di secondi.
    Per esempio:

<programlisting>
SELECT pg_sleep(1.5);
</programlisting>
   </para>

   <note>
        <para>
            Nota per il revisore: Intervallo di dormienza è urend
        </para>
    </note>
   <note>
     <para>
      
        La risoluzione effettiva dell'intervallo di dormienza è specifico alla piattaforma; Un valore
      comune è 0.01 secondi.  Il ritardo di dormienza sarà lungo almeno come specificato.
      Potrebbe essere più lungo, in dipendenza di fattori come il carico del server.
     </para>
   </note>

   <warning>
     <para>
      Assicurarsi che la propria sessione non abbia più lock del necessario
      quando si chiama <function>pg_sleep</function>. Altrimenti altre sessioni
      potrebbero dover attendere per quel processo dormiente, rallentando l'intero
      sistema.
     </para>
   </warning>
  </sect2>

 </sect1>

  
 <sect1 id="functions-enum">
  <title>Funzioni di supporto per enum</title>

  <para>
   
    Per i tipi enum (descritti in <xref linkend="datatype-enum" />),
   ci sono diverse funzioni che consentono una programmazione più pulita
   senza utilizzo di hard-coding per particolari valori di un tipo enum.
   Queste sono elencate nella tabella <xref linkend="functions-enum-table" />. Gli esempi
   accettano un tipo enum creato come:

<programlisting>
CREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple');
</programlisting>

  </para>

  <table id="functions-enum-table">
    <title>Funzioni di supporto per enum</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>Funzione</entry>
       <entry>Descrizione</entry>
       <entry>Esempio</entry>
       <entry>Esempio di risultato</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><literal>enum_first(anyenum)</literal></entry>
       <entry>Restituisce il primo valore del tipo enum in input</entry>
       <entry><literal>enum_first(null::rainbow)</literal></entry>
       <entry><literal>red</literal></entry>
      </row>
      <row>
       <entry><literal>enum_last(anyenum)</literal></entry>
       <entry>Restituisce l'ultimo valore del tipo enum in input</entry>
       <entry><literal>enum_last(null::rainbow)</literal></entry>
       <entry><literal>purple</literal></entry>
      </row>
      <row>
       <entry><literal>enum_range(anyenum)</literal></entry>
       <entry>Restituisce tutti i valori del tipo enum in input, in un array ordinato</entry>
       <entry><literal>enum_range(null::rainbow)</literal></entry>
       <entry><literal>{red,orange,yellow,green,blue,purple}</literal></entry>
      </row>
      <row>
       <entry morerows="2"><literal>enum_range(anyenum, anyenum)</literal></entry>
       <entry morerows="2">
        
        Restituisce l'intervallo tra i due valori di enum forniti, come un array
        ordinato. I valori dovranno essere dello stesso tipo di enum. Se il primo
        parametro è null, il risultato inizierà con il primo
        valore del tipo enum.
        Se il secondo parametro è null, il risultato terminarà
        con l'ultimo valore del tipo enum.
       </entry>
       <entry><literal>enum_range('orange'::rainbow, 'green'::rainbow)</literal></entry>
       <entry><literal>{orange,yellow,green}</literal></entry>
      </row>
      <row>
       <entry><literal>enum_range(NULL, 'green'::rainbow)</literal></entry>
       <entry><literal>{red,orange,yellow,green}</literal></entry>
      </row>
      <row>
       <entry><literal>enum_range('orange'::rainbow, NULL)</literal></entry>
       <entry><literal>{orange,yellow,green,blue,purple}</literal></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

<note>
    <para>
        Nota per il revisore: hardwired?
    </para>
</note>
   <para>

    Notare che tranne che per la forma con due argomenti di <function>enum_range</function>,
    queste funzioni non tengono conto dello specifico valore che gli viene passato; ma si
    curano solo del tipo dato dichiarato.  Può essere indifferentemente passato
    null o un valore specifico del tipo, con lo stesso risultato. È più comune che
    queste funzioni siano applicate ad una colonna di tabella o ad un argomento di funzione
    piuttosto che ad un nome di tipo hardwired come suggerito dagli esempi.
   </para>
 </sect1>

 <sect1 id="functions-geometry">
  <title>Funzioni e operatori geometrici</title>

   <para>
    The geometric types <type>point</type>, <type>box</type>,
    <type>lseg</type>, <type>line</type>, <type>path</type>,
    <type>polygon</type>, and <type>circle</type> have a large set of
    native support functions and operators, shown in <xref
    linkend="functions-geometry-op-table"/>, <xref
    linkend="functions-geometry-func-table"/>, and <xref
    linkend="functions-geometry-conv-table"/>.
    
    I tipi geometrici <type>point</type>, <type>box</type>,
    <type>lseg</type>, <type>line</type>, <type>path</type>,
    <type>polygon</type> e <type>circle</type> hanno un notevole insieme di
    funzioni e operatori nativi di supporto, mostrati nella <xref
    linkend="functions-geometry-op-table" />, nella <xref
    linkend="functions-geometry-func-table" /> e nella <xref
    linkend="functions-geometry-conv-table" />.
   </para>

   <caution>
    <para>
     
    Notare che l' operatore <quote>uguale a</quote>, <literal>~=</literal>, rappresenta
     la normale nozione di uguaglianza per i tipi <type>point</type>,
     <type>box</type>, <type>polygon</type>, e <type>circle</type>.
     Alcuni di questi tipi hanno anche un operatore <literal>=</literal>, ma
     <literal>=</literal> confronta
     solo per <emphasis>aree</emphasis> uguali. Gli altri operatori di confronto scalari
     (<literal>&lt;=</literal> e così via) similmente confrontano aree per questi tipi.
    </para>
   </caution>

   <table id="functions-geometry-op-table">
     <title>Operatori geometrici</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Operatore</entry>
        <entry>Descrizione</entry>
        <entry>Esempio</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry> <literal>+</literal> </entry>
        <entry>Traslazione</entry>
        <entry><literal>box '((0,0),(1,1))' + point '(2.0,0)'</literal></entry>
       </row>
       <row>
        <entry> <literal>-</literal> </entry>
        <entry>Traslazione</entry>
        <entry><literal>box '((0,0),(1,1))' - point '(2.0,0)'</literal></entry>
       </row>
       <row>
        <entry> <literal>*</literal> </entry>
        <entry>Scalatura/rotazione</entry>
        <entry><literal>box '((0,0),(1,1))' * point '(2.0,0)'</literal></entry>
       </row>
       <row>
        <entry> <literal>/</literal> </entry>
        <entry>Scaling/rotation</entry>
        <entry><literal>box '((0,0),(2,2))' / point '(2.0,0)'</literal></entry>
       </row>
       <row>
        <entry> <literal>#</literal> </entry>
        <entry>Punto o box di intersezione</entry>
        <entry><literal>'((1,-1),(-1,1))' # '((1,1),(-1,-1))'</literal></entry>
       </row>
       <row>
        <entry> <literal>#</literal> </entry>
        <entry>Numero di punti in un tracciato o poligono</entry>
        <entry><literal># '((1,0),(0,1),(-1,0))'</literal></entry>
       </row>
       <row>
        <entry> <literal>@-@</literal> </entry>
        <entry>Lunghezza o circonferenza</entry>
        <entry><literal>@-@ path '((0,0),(1,0))'</literal></entry>
       </row>
       <row>
        <entry> <literal>@@</literal> </entry>
        <entry>Centro</entry>
        <entry><literal>@@ circle '((0,0),10)'</literal></entry>
       </row>
       <row>
        <entry> <literal>##</literal> </entry>
        <entry>Punto più vicino al primo operando sul secondo operando</entry>
        <entry><literal>point '(0,0)' ## lseg '((2,0),(0,2))'</literal></entry>
       </row>
       <row>
        <entry> <literal>&lt;-&gt;</literal> </entry>
        <entry>Distanza tra</entry>
        <entry><literal>circle '((0,0),1)' &lt;-&gt; circle '((5,0),1)'</literal></entry>
       </row>
       <row>
        <entry> <literal>&amp;&amp;</literal> </entry>
        <entry>Si sovrappongono? (Un punto in comune lo rende true.)</entry>
        <entry><literal>box '((0,0),(1,1))' &amp;&amp; box '((0,0),(2,2))'</literal></entry>
       </row>
       <row>
        <entry> <literal>&lt;&lt;</literal> </entry>
        <entry>È strettamente a sinistra di?</entry>
        <entry><literal>circle '((0,0),1)' &lt;&lt; circle '((5,0),1)'</literal></entry>
       </row>
       <row>
        <entry> <literal>&gt;&gt;</literal> </entry>
        <entry>È strettamente a destra di?</entry>
        <entry><literal>circle '((5,0),1)' &gt;&gt; circle '((0,0),1)'</literal></entry>
       </row>
       <row>
        <entry> <literal>&amp;&lt;</literal> </entry>
        <entry>Non si estende alla destra di?</entry>
        <entry><literal>box '((0,0),(1,1))' &amp;&lt; box '((0,0),(2,2))'</literal></entry>
       </row>
       <row>
        <entry> <literal>&amp;&gt;</literal> </entry>
        <entry>Non si estende alla sinistra di?</entry>
        <entry><literal>box '((0,0),(3,3))' &amp;&gt; box '((0,0),(2,2))'</literal></entry>
       </row>
       <row>
        <entry> <literal>&lt;&lt;|</literal> </entry>
        <entry>È strettamente sotto?</entry>
        <entry><literal>box '((0,0),(3,3))' &lt;&lt;| box '((3,4),(5,5))'</literal></entry>
       </row>
       <row>
        <entry> <literal>|&gt;&gt;</literal> </entry>
        <entry>È strettamente sopra?</entry>
        <entry><literal>box '((3,4),(5,5))' |&gt;&gt; box '((0,0),(3,3))'</literal></entry>
       </row>
       <row>
        <entry> <literal>&amp;&lt;|</literal> </entry>
        <entry>Non si estende al di sopra?</entry>
        <entry><literal>box '((0,0),(1,1))' &amp;&lt;| box '((0,0),(2,2))'</literal></entry>
       </row>
       <row>
        <entry> <literal>|&amp;&gt;</literal> </entry>
        <entry>Non si estende al di sotto?</entry>
        <entry><literal>box '((0,0),(3,3))' |&amp;&gt; box '((0,0),(2,2))'</literal></entry>
       </row>
       <row>
        <entry> <literal>&lt;^</literal> </entry>
        <entry>È sotto (consente di toccare)?</entry>
        <entry><literal>circle '((0,0),1)' &lt;^ circle '((0,5),1)'</literal></entry>
       </row>
       <row>
        <entry> <literal>&gt;^</literal> </entry>
        <entry>È sopra (consente di toccare)?</entry>
        <entry><literal>circle '((0,5),1)' &gt;^ circle '((0,0),1)'</literal></entry>
       </row>
       <row>
        <entry> <literal>?#</literal> </entry>
        <entry>Interseca?</entry>
        <entry><literal>lseg '((-1,0),(1,0))' ?# box '((-2,-2),(2,2))'</literal></entry>
       </row>
       <row>
        <entry> <literal>?-</literal> </entry>
        <entry>È orizzontale?</entry>
        <entry><literal>?- lseg '((-1,0),(1,0))'</literal></entry>
       </row>
       <row>
        <entry> <literal>?-</literal> </entry>
        <entry>Sono allineati orizzontalmente?</entry>
        <entry><literal>point '(1,0)' ?- point '(0,0)'</literal></entry>
       </row>
       <row>
        <entry> <literal>?|</literal> </entry>
        <entry>È verticale?</entry>
        <entry><literal>?| lseg '((-1,0),(1,0))'</literal></entry>
       </row>
       <row>
        <entry> <literal>?|</literal> </entry>
        <entry>Sono allineati verticalmente?</entry>
        <entry><literal>point '(0,1)' ?| point '(0,0)'</literal></entry>
       </row>
       <row>
        <entry> <literal>?-|</literal> </entry>
        <entry>È perpendicolare?</entry>
        <entry><literal>lseg '((0,0),(0,1))' ?-| lseg '((0,0),(1,0))'</literal></entry>
       </row>
       <row>
        <entry> <literal>?||</literal> </entry>
        <entry>Sono paralleli?</entry>
        <entry><literal>lseg '((-1,0),(1,0))' ?|| lseg '((-1,2),(1,2))'</literal></entry>
       </row>
       <row>
        <entry> <literal>@&gt;</literal> </entry>
        <entry>Contiene?</entry>
        <entry><literal>circle '((0,0),2)' @&gt; point '(1,1)'</literal></entry>
       </row>
       <row>
        <entry> <literal>&lt;@</literal> </entry>
        <entry>Contenuto dentro o su?</entry>
        <entry><literal>point '(1,1)' &lt;@ circle '((0,0),2)'</literal></entry>
       </row>
       <row>
        <entry> <literal>~=</literal> </entry>
        <entry>Stesso di?</entry>
        <entry><literal>polygon '((0,0),(1,1))' ~= polygon '((1,1),(0,0))'</literal></entry>
       </row>
      </tbody>
     </tgroup>
   </table>

   <note>
    <para>
     
    Prima di <productname>PostgreSQL</productname> 8.2, gli operatori di
     contenimento <literal>@&gt;</literal> e <literal>&lt;@</literal> erano rispettivamente
     chiamati <literal>~</literal> e <literal>@</literal>. Questi nomi sono ancora
     disponibili, ma sono deprecati e saranno sicuramente rimossi.
    </para>
   </note>

   <indexterm>
    <primary>area</primary>
   </indexterm>
   <indexterm>
    <primary>center</primary>
   </indexterm>
   <indexterm>
    <primary>diameter</primary>
   </indexterm>
   <indexterm>
    <primary>height</primary>
   </indexterm>
   <indexterm>
    <primary>isclosed</primary>
   </indexterm>
   <indexterm>
    <primary>isopen</primary>
   </indexterm>
   <indexterm>
    <primary>length</primary>
   </indexterm>
   <indexterm>
    <primary>npoints</primary>
   </indexterm>
   <indexterm>
    <primary>pclose</primary>
   </indexterm>
   <indexterm>
    <primary>popen</primary>
   </indexterm>
   <indexterm>
    <primary>radius</primary>
   </indexterm>
   <indexterm>
    <primary>width</primary>
   </indexterm>

   <table id="functions-geometry-func-table">
     <title>Funzioni geometriche</title>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>Funzione</entry>
        <entry>Tipo restituito</entry>
        <entry>Descrizione</entry>
        <entry>Esempio</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal><function>area(<replaceable>object</replaceable>)</function></literal></entry>
        <entry><type>double precision</type></entry>
        <entry>area</entry>
        <entry><literal>area(box '((0,0),(1,1))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>center(<replaceable>object</replaceable>)</function></literal></entry>
        <entry><type>point</type></entry>
        <entry>centro</entry>
        <entry><literal>center(box '((0,0),(1,2))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>diameter(<type>circle</type>)</function></literal></entry>
        <entry><type>double precision</type></entry>
        <entry>diametro del cerchio</entry>
        <entry><literal>diameter(circle '((0,0),2.0)')</literal></entry>
       </row>
       <row>
        <entry><literal><function>height(<type>box</type>)</function></literal></entry>
        <entry><type>double precision</type></entry>
        <entry>dimensione verticale del box</entry>
        <entry><literal>height(box '((0,0),(1,1))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>isclosed(<type>path</type>)</function></literal></entry>
        <entry><type>boolean</type></entry>
        <entry>un tracciato chiuso?</entry>
        <entry><literal>isclosed(path '((0,0),(1,1),(2,0))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>isopen(<type>path</type>)</function></literal></entry>
        <entry><type>boolean</type></entry>
        <entry>un tracciato aperto?</entry>
        <entry><literal>isopen(path '[(0,0),(1,1),(2,0)]')</literal></entry>
       </row>
       <row>
        <entry><literal><function>length(<replaceable>object</replaceable>)</function></literal></entry>
        <entry><type>double precision</type></entry>
        <entry>lunghezza</entry>
        <entry><literal>length(path '((-1,0),(1,0))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>npoints(<type>path</type>)</function></literal></entry>
        <entry><type>int</type></entry>
        <entry>numero di punti</entry>
        <entry><literal>npoints(path '[(0,0),(1,1),(2,0)]')</literal></entry>
       </row>
       <row>
        <entry><literal><function>npoints(<type>polygon</type>)</function></literal></entry>
        <entry><type>int</type></entry>
        <entry>numero di punti</entry>
        <entry><literal>npoints(polygon '((1,1),(0,0))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>pclose(<type>path</type>)</function></literal></entry>
        <entry><type>path</type></entry>
        <entry>converte il tracciato in chiuso</entry>
        <entry><literal>pclose(path '[(0,0),(1,1),(2,0)]')</literal></entry>
       </row>
       <row>
        <entry><literal><function>popen(<type>path</type>)</function></literal></entry>
        <entry><type>path</type></entry>
        <entry>converte il tracciato in aperto</entry>
        <entry><literal>popen(path '((0,0),(1,1),(2,0))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>radius(<type>circle</type>)</function></literal></entry>
        <entry><type>double precision</type></entry>
        <entry>raggio del cerchio</entry>
        <entry><literal>radius(circle '((0,0),2.0)')</literal></entry>
       </row>
       <row>
        <entry><literal><function>width(<type>box</type>)</function></literal></entry>
        <entry><type>double precision</type></entry>
        <entry>dimensione orizzontale del box</entry>
        <entry><literal>width(box '((0,0),(1,1))')</literal></entry>
       </row>
      </tbody>
     </tgroup>
   </table>

   <table id="functions-geometry-conv-table">
     <title>Funzioni di conversione per tipi geometrici</title>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>Funzione</entry>
        <entry>Tipo di ritorno</entry>
        <entry>Descrizione</entry>
        <entry>Esempio</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal><function>box(<type>circle</type>)</function></literal></entry>
        <entry><type>box</type></entry>
        <entry>da cerchio a box</entry>
        <entry><literal>box(circle '((0,0),2.0)')</literal></entry>
       </row>
       <row>
        <entry><literal><function>box(<type>point</type>, <type>point</type>)</function></literal></entry>
        <entry><type>box</type></entry>
        <entry>da punti a box</entry>
        <entry><literal>box(point '(0,0)', point '(1,1)')</literal></entry>
       </row>
       <row>
        <entry><literal><function>box(<type>polygon</type>)</function></literal></entry>
        <entry><type>box</type></entry>
        <entry>da poligono a box</entry>
        <entry><literal>box(polygon '((0,0),(1,1),(2,0))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>circle(<type>box</type>)</function></literal></entry>
        <entry><type>circle</type></entry>
        <entry>da box a cerchio</entry>
        <entry><literal>circle(box '((0,0),(1,1))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>circle(<type>point</type>, <type>double precision</type>)</function></literal></entry>
        <entry><type>circle</type></entry>
        <entry>da centro e raggio a cerchio</entry>
        <entry><literal>circle(point '(0,0)', 2.0)</literal></entry>
       </row>
       <row>
        <entry><literal><function>circle(<type>polygon</type>)</function></literal></entry>
        <entry><type>circle</type></entry>
        <entry>da poligono a cerchio</entry>
        <entry><literal>circle(polygon '((0,0),(1,1),(2,0))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>lseg(<type>box</type>)</function></literal></entry>
        <entry><type>lseg</type></entry>
        <entry>da diagonale di box a segmento di linea</entry>
        <entry><literal>lseg(box '((-1,0),(1,0))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>lseg(<type>point</type>, <type>point</type>)</function></literal></entry>
        <entry><type>lseg</type></entry>
        <entry>da punti a segmento di linea</entry>
        <entry><literal>lseg(point '(-1,0)', point '(1,0)')</literal></entry>
       </row>
       <row>
        <entry><literal><function>path(<type>polygon</type>)</function></literal></entry>
        <entry><type>point</type></entry>
        <entry>da poligono a tracciato</entry>
        <entry><literal>path(polygon '((0,0),(1,1),(2,0))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>point</function>(<type>double
         precision</type>, <type>double precision</type>)</literal></entry>
        <entry><type>point</type></entry>
        <entry>costruisce un punto</entry>
        <entry><literal>point(23.4, -44.5)</literal></entry>
       </row>
       <row>
        <entry><literal><function>point(<type>box</type>)</function></literal></entry>
        <entry><type>point</type></entry>
        <entry>centro del box</entry>
        <entry><literal>point(box '((-1,0),(1,0))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>point(<type>circle</type>)</function></literal></entry>
        <entry><type>point</type></entry>
        <entry>centro del cerchio</entry>
        <entry><literal>point(circle '((0,0),2.0)')</literal></entry>
       </row>
       <row>
        <entry><literal><function>point(<type>lseg</type>)</function></literal></entry>
        <entry><type>point</type></entry>
        <entry>centro del segmento di linea</entry>
        <entry><literal>point(lseg '((-1,0),(1,0))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>point(<type>polygon</type>)</function></literal></entry>
        <entry><type>point</type></entry>
        <entry>centro del poligono</entry>
        <entry><literal>point(polygon '((0,0),(1,1),(2,0))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>polygon(<type>box</type>)</function></literal></entry>
        <entry><type>polygon</type></entry>
        <entry>da box a poligono di 4 punti</entry>
        <entry><literal>polygon(box '((0,0),(1,1))')</literal></entry>
       </row>
       <row>
        <entry><literal><function>polygon(<type>circle</type>)</function></literal></entry>
        <entry><type>polygon</type></entry>
        <entry>da cerchio a poligono da 12 punti</entry>
        <entry><literal>polygon(circle '((0,0),2.0)')</literal></entry>
       </row>
       <row>
        <entry><literal><function>polygon(<replaceable class="parameter">npts</replaceable>, <type>circle</type>)</function></literal></entry>
        <entry><type>polygon</type></entry>
        <entry>da cerchio a poligono di <replaceable class="parameter">npts</replaceable> punti</entry>
        <entry><literal>polygon(12, circle '((0,0),2.0)')</literal></entry>
       </row>
       <row>
        <entry><literal><function>polygon(<type>path</type>)</function></literal></entry>
        <entry><type>polygon</type></entry>
        <entry>da tracciato a poligono</entry>
        <entry><literal>polygon(path '((0,0),(1,1),(2,0))')</literal></entry>
       </row>
      </tbody>
     </tgroup>
   </table>

    <para>
     È possibile accedere alle due componenti numeriche di un <type>point</type>
     come se fosse un array con indici 0 e 1. Per esempio, se
     <literal>t.p</literal> è una colonna <type>point</type> allora
     <literal>SELECT p[0] FROM t</literal> recupera la coordinata X e
     <literal>UPDATE t SET p[1] = ...</literal> cambia la coordinata Y.
     Nello stesso modo, un valore di tipo <type>box</type> o <type>lseg</type> può essere trattato
     come un array di due valori <type>punto</type>.
    </para>

    <para>
     
    La funzione <function>area</function> funziona per i tipi
     <type>box</type>, <type>circle</type>, e <type>path</type>.
     La funzione <function>area</function> nei tipi di dato <type>path</type> funziona solo 
     se i punti nel
     <type>path</type> sono non-intersecanti. Per esempio,
     <type>path</type>
     <literal>'((0,0),(0,1),(2,1),(2,2),(1,2),(1,0),(0,0))'::PATH</literal>
     non funzionerà; Tuttavia, il seguente 
     <type>path</type> visivamente identico
     <literal>'((0,0),(0,1),(1,1),(1,2),(2,2),(2,1),(1,1),(1,0),(0,0))'::PATH</literal>
     funziona. Se il concetto di tracciato intersecante o non-intersecante
     è confuso, disegnare ambedue i <type>percorsi</type>
     visti sopra, lato per lato su un pezzo di carta millimetrata.
    </para>

  </sect1>


 <sect1 id="functions-net">
  <title>Funzioni e operatori per indirizzi di rete</title>

  <para>
   
    La <xref linkend="cidr-inet-operators-table" /> mostra gli operatori
   disponibili per i tipi <type>cidr</type> e <type>inet</type>.
   Gli operatori <literal>&lt;&lt;</literal>,
   <literal>&lt;&lt;=</literal>, <literal>&gt;&gt;</literal> e
   <literal>&gt;&gt;=</literal> testano per l'inclusione nella subnet. Essi
   considerano solo la parte rete dei due indirizzi, ignorando qualsiasi
   parte host, e determinano se una parte della rete è identica all'altra
   oppure è una subnet dell'altra.
  </para>

    <table id="cidr-inet-operators-table">
     <title>Operatori <type>cidr</type> e <type>inet</type> </title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Operatore</entry>
        <entry>Descrizione</entry>
        <entry>Esempio</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry> <literal>&lt;</literal> </entry>
        <entry>è minore di</entry>
        <entry><literal>inet '192.168.1.5' &lt; inet '192.168.1.6'</literal></entry>
       </row>
       <row>
        <entry> <literal>&lt;=</literal> </entry>
        <entry>è minore di o uguale</entry>
        <entry><literal>inet '192.168.1.5' &lt;= inet '192.168.1.5'</literal></entry>
       </row>
       <row>
        <entry> <literal>=</literal> </entry>
        <entry>è uguale</entry>
        <entry><literal>inet '192.168.1.5' = inet '192.168.1.5'</literal></entry>
       </row>
       <row>
        <entry> <literal>&gt;=</literal> </entry>
        <entry>è maggiore o uguale</entry>
        <entry><literal>inet '192.168.1.5' &gt;= inet '192.168.1.5'</literal></entry>
       </row>
       <row>
        <entry> <literal>&gt;</literal> </entry>
        <entry>è maggiore di</entry>
        <entry><literal>inet '192.168.1.5' &gt; inet '192.168.1.4'</literal></entry>
       </row>
       <row>
        <entry> <literal>&lt;&gt;</literal> </entry>
        <entry>non è uguale</entry>
        <entry><literal>inet '192.168.1.5' &lt;&gt; inet '192.168.1.4'</literal></entry>
       </row>
       <row>
        <entry> <literal>&lt;&lt;</literal> </entry>
        <entry>è contenuta all'interno di</entry>
        <entry><literal>inet '192.168.1.5' &lt;&lt; inet '192.168.1/24'</literal></entry>
       </row>
       <row>
        <entry> <literal>&lt;&lt;=</literal> </entry>
        <entry>è contenuta all'interno di o uguale</entry>
        <entry><literal>inet '192.168.1/24' &lt;&lt;= inet '192.168.1/24'</literal></entry>
       </row>
       <row>
        <entry> <literal>&gt;&gt;</literal> </entry>
        <entry>contiene</entry>
        <entry><literal>inet '192.168.1/24' &gt;&gt; inet '192.168.1.5'</literal></entry>
       </row>
       <row>
        <entry> <literal>&gt;&gt;=</literal> </entry>
        <entry>contiene o è uguale</entry>
        <entry><literal>inet '192.168.1/24' &gt;&gt;= inet '192.168.1/24'</literal></entry>
       </row>
       <row>
        <entry> <literal>~</literal> </entry>
        <entry>NOT a bit</entry>
        <entry><literal>~ inet '192.168.1.6'</literal></entry>
       </row>
       <row>
        <entry> <literal>&amp;</literal> </entry>
        <entry>AND a bit</entry>
        <entry><literal>inet '192.168.1.6' &amp; inet '0.0.0.255'</literal></entry>
       </row>
       <row>
        <entry> <literal>|</literal> </entry>
        <entry>OR a bit</entry>
        <entry><literal>inet '192.168.1.6' | inet '0.0.0.255'</literal></entry>
       </row>
       <row>
        <entry> <literal>+</literal> </entry>
        <entry>addizione</entry>
        <entry><literal>inet '192.168.1.6' + 25</literal></entry>
       </row>
       <row>
        <entry> <literal>-</literal> </entry>
        <entry>sottrazione</entry>
        <entry><literal>inet '192.168.1.43' - 36</literal></entry>
       </row>
       <row>
        <entry> <literal>-</literal> </entry>
        <entry>sottrazione</entry>
        <entry><literal>inet '192.168.1.43' - inet '192.168.1.19'</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  <para>
   La <xref linkend="cidr-inet-functions-table" /> mostra le funzioni
   disponibili per l'uso con i tipi <type>cidr</type> e
   <type>inet</type>. Le funzioni <function>host</function>,
   <function>text</function> e <function>abbrev</function>
   sono principalmente intese per offrire un formato alternativo di
   visualizzazione.
  </para>

    <table id="cidr-inet-functions-table">
     <title>Funzioni <type>cidr</type> e <type>inet</type></title>
     <tgroup cols="5">
      <thead>
       <row>
        <entry>Funzione</entry>
        <entry>Tipi di ritorno</entry>
        <entry>Descrizione</entry>
        <entry>Esempio</entry>
        <entry>Risultato</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal><function>abbrev(<type>inet</type>)</function></literal></entry>
        <entry><type>text</type></entry>
        <entry>formato di visualizzazione come testo abbreviato</entry>
        <entry><literal>abbrev(inet '10.1.0.0/16')</literal></entry>
        <entry><literal>10.1.0.0/16</literal></entry>
       </row>
       <row>
        <entry><literal><function>abbrev(<type>cidr</type>)</function></literal></entry>
        <entry><type>text</type></entry>
        <entry>formato di visualizzazione come testo abbreviato</entry>
        <entry><literal>abbrev(cidr '10.1.0.0/16')</literal></entry>
        <entry><literal>10.1/16</literal></entry>
       </row>
       <row>
        <entry><literal><function>broadcast(<type>inet</type>)</function></literal></entry>
        <entry><type>inet</type></entry>
        <entry>indirizzo di broadcast per la rete</entry>
        <entry><literal>broadcast('192.168.1.5/24')</literal></entry>
        <entry><literal>192.168.1.255/24</literal></entry>
       </row>
       <row>
        <entry><literal><function>family(<type>inet</type>)</function></literal></entry>
        <entry><type>int</type></entry>
        <entry>estrae una famiglia di indirizzi; <literal>4</literal> per IPv4,
        <literal>6</literal> for IPv6</entry>
        <entry><literal>family('::1')</literal></entry>
        <entry><literal>6</literal></entry>
       </row>
       <row>
        <entry><literal><function>host(<type>inet</type>)</function></literal></entry>
        <entry><type>text</type></entry>
        <entry>estrae l'indirizzo IP come testo</entry>
        <entry><literal>host('192.168.1.5/24')</literal></entry>
        <entry><literal>192.168.1.5</literal></entry>
       </row>
       <row>
        <entry><literal><function>hostmask(<type>inet</type>)</function></literal></entry>
        <entry><type>inet</type></entry>
        <entry>costruisce maschera di host per la rete</entry>
        <entry><literal>hostmask('192.168.23.20/30')</literal></entry>
        <entry><literal>0.0.0.3</literal></entry>
       </row>
       <row>
        <entry><literal><function>masklen(<type>inet</type>)</function></literal></entry>
        <entry><type>int</type></entry>
        <entry>estrazione lunghezza netmask</entry>
        <entry><literal>masklen('192.168.1.5/24')</literal></entry>
        <entry><literal>24</literal></entry>
       </row>
       <row>
        <entry><literal><function>netmask(<type>inet</type>)</function></literal></entry>
        <entry><type>inet</type></entry>
        <entry>costruisce netmask per la rete</entry>
        <entry><literal>netmask('192.168.1.5/24')</literal></entry>
        <entry><literal>255.255.255.0</literal></entry>
       </row>
       <row>
        <entry><literal><function>network(<type>inet</type>)</function></literal></entry>
        <entry><type>cidr</type></entry>
        <entry>estrae la parte network di un indirizzo</entry>
        <entry><literal>network('192.168.1.5/24')</literal></entry>
        <entry><literal>192.168.1.0/24</literal></entry>
       </row>
       <row>
        <entry><literal><function>set_masklen(<type>inet</type>, <type>int</type>)</function></literal></entry>
        <entry><type>inet</type></entry>
        <entry>impostazione lunghezza netmask per valori <type>inet</type></entry>
        <entry><literal>set_masklen('192.168.1.5/24', 16)</literal></entry>
        <entry><literal>192.168.1.5/16</literal></entry>
       </row>
       <row>
        <entry><literal><function>set_masklen(<type>cidr</type>, <type>int</type>)</function></literal></entry>
        <entry><type>cidr</type></entry>
        <entry>imposta la lunghezza di netmask per valori <type>cidr</type></entry>
        <entry><literal>set_masklen('192.168.1.0/24'::cidr, 16)</literal></entry>
        <entry><literal>192.168.0.0/16</literal></entry>
       </row>
       <row>
        <entry><literal><function>text(<type>inet</type>)</function></literal></entry>
        <entry><type>text</type></entry>
        <entry>estrae l'indirizzo IP e lunghezza netmask come testo</entry>
        <entry><literal>text(inet '192.168.1.5')</literal></entry>
        <entry><literal>192.168.1.5/32</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  <para>
   
    Qualunque valore <type>cidr</type> può essere convertito implicitamente o esplicitamente
   a <type>inet</type>; per cui, le funzioni mostrate sopra che operano sugli
   <type>inet</type> lavorano anche con valori <type>cidr</type>. (Dove ci sono
   funzioni separate per <type>inet</type> e <type>cidr</type>, è perchè
   il comportamento dovrebbe essere differente per i due casi).
   Inoltre, è consentito convertire un valore <type>inet</type> a <type>cidr</type>.
   Quando ciò viene fatto, ogni bit alla destra della netmask viene tacitamente azzerato
   per creare un valore <type>cidr</type> valido.
   Inoltre,
   si può convertire un valore testo a <type>inet</type> o <type>cidr</type>
   utilizzando la normale sintassi di conversione: per esempio,
   <literal>inet(<replaceable>espressione</replaceable>)</literal> o
   <literal><replaceable>colname</replaceable>::cidr</literal>.
  </para>

  <para>
   
    La <xref linkend="macaddr-functions-table" /> mostra le funzioni
   disponibili per l'uso con i tipi <type>macaddr</type>. La funzione
   <literal><function>trunc</function>(<type>macaddr</type>)</literal> restituisce un
   indirizzo MAC con gli ultimi 3 byte impostati a zero. Questo può essere usato per
   associare il restante prefisso con un costruttore.
  </para>

    <table id="macaddr-functions-table">
     <title>Funzioni <type>macaddr</type></title>
     <tgroup cols="5">
      <thead>
       <row>
        <entry>Funzione</entry>
        <entry>Tipo restituito</entry>
        <entry>Descrizione</entry>
        <entry>Esempio</entry>
        <entry>Risultato</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal><function>trunc(<type>macaddr</type>)</function></literal></entry>
        <entry><type>macaddr</type></entry>
        <entry>imposta gli ultimi 3 byte a zero</entry>
        <entry><literal>trunc(macaddr '12:34:56:78:90:ab')</literal></entry>
        <entry><literal>12:34:56:00:00:00</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
    Il tipo <type>macaddr</type> supporta anche gli operatori relazionali
    standard (<literal>&gt;</literal>, <literal>&lt;=</literal>, ecc.) per
    l'ordinamento lessicografico.
   </para>

  </sect1>


 <sect1 id="functions-textsearch">
  <title>Funzioni e operatori per ricerca testo</title>

   <indexterm zone="datatype-textsearch">
    <primary>ricerca full-text</primary>
    <secondary>funzioni e operatori</secondary>
   </indexterm>

   <indexterm zone="datatype-textsearch">
    <primary>ricerca di testo</primary>
    <secondary>funzioni e operatori</secondary>
   </indexterm>

  <para>
   
    La <xref linkend="textsearch-operators-table" />,
   la <xref linkend="textsearch-functions-table" /> e
   la <xref linkend="textsearch-functions-debug-table" />
   riassumono le funzioni e gli operatori che sono forniti per
   ricerche full-text. Consultare <xref linkend="textsearch" /> per una spiegazione
   dettagliata della capacità di <productname>PostgreSQL</productname> per le ricerche
   di testo.
  </para>

    <table id="textsearch-operators-table">
     <title>Operatori per ricerca di testo</title>
     <tgroup cols="4">
      <thead>
       <row>
        
        <entry>Operatore</entry>
        <entry>Descrizione</entry>
        <entry>Esempio</entry>
        <entry>Risultato</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry> <literal>@@</literal> </entry>
        <entry><type>tsvector</type> corrisponde a <type>tsquery</type> ?</entry>
        <entry><literal>to_tsvector('fat cats ate rats') @@ to_tsquery('cat &amp; rat')</literal></entry>
        <entry><literal>t</literal></entry>
       </row>
       <row>
        <entry> <literal>@@@</literal> </entry>
        <entry>sinonimo deprecato di <literal>@@</literal></entry>
        <entry><literal>to_tsvector('fat cats ate rats') @@@ to_tsquery('cat &amp; rat')</literal></entry>
        <entry><literal>t</literal></entry>
       </row>
       <row>
        <entry> <literal>||</literal> </entry>
        <entry>concatena <type>tsvector</type></entry>
        <entry><literal>'a:1 b:2'::tsvector || 'c:1 d:2 b:3'::tsvector</literal></entry>
        <entry><literal>'a':1 'b':2,5 'c':3 'd':4</literal></entry>
       </row>
       <row>
        <entry> <literal>&amp;&amp;</literal> </entry>
        <entry>AND di <type>tsquery</type></entry>
        <entry><literal>'fat | rat'::tsquery &amp;&amp; 'cat'::tsquery</literal></entry>
        <entry><literal>( 'fat' | 'rat' ) &amp; 'cat'</literal></entry>
       </row>
       <row>
        <entry> <literal>||</literal> </entry>
        <entry>OR di <type>tsquery</type></entry>
        <entry><literal>'fat | rat'::tsquery || 'cat'::tsquery</literal></entry>
        <entry><literal>( 'fat' | 'rat' ) | 'cat'</literal></entry>
       </row>
       <row>
        <entry> <literal>!!</literal> </entry>
        <entry>nega un <type>tsquery</type></entry>
        <entry><literal>!! 'cat'::tsquery</literal></entry>
        <entry><literal>!'cat'</literal></entry>
       </row>
       <row>
        <entry> <literal>@&gt;</literal> </entry>
        <entry>un <type>tsquery</type> ne contiene un altro?</entry>
        <entry><literal>'cat'::tsquery @&gt; 'cat &amp; rat'::tsquery</literal></entry>
        <entry><literal>f</literal></entry>
       </row>
       <row>
        <entry> <literal>&lt;@</literal> </entry>
        <entry>un <type>tsquery</type> è contenuto in?</entry>
        <entry><literal>'cat'::tsquery &lt;@ 'cat &amp; rat'::tsquery</literal></entry>
        <entry><literal>t</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

    <note>
     <para>
      Gli operatori di contenimento <type>tsquery</type> considerano solo i lessemi
      elencati nelle due query, ignorando la combinazione degli operatori.
     </para>
    </note>

    <para>
     
    In aggiunta agli operatori mostrati nella tabella, per i tipi <type>tsvector</type>
     e <type>tsquery</type>, sono definiti gli operatori di confronto ordinari B-tree
     (<literal>=</literal>, <literal>&lt;</literal>, ecc). Questi non sono normalmente usati per
     ricerche di testo ma consentono, per esempio, di costruire indici unici sulle
     colonne di questo tipo.
    </para>

    <table id="textsearch-functions-table">
     <title>Funzioni per ricerca di testo</title>
     <tgroup cols="5">
      <thead>
       <row>
        <entry>Funzione</entry>
        <entry>Tipo restituito</entry>
        <entry>Descrizione</entry>
        <entry>Esempio</entry>
        <entry>Risultato</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal><function>to_tsvector(<optional> <replaceable class="PARAMETER">config</replaceable> <type>regconfig</type> , </optional> <replaceable class="PARAMETER">document</replaceable> <type>text</type>)</function></literal></entry>
        <entry><type>tsvector</type></entry>
        <entry>converte un documento di testo in <type>tsvector</type></entry>
        <entry><literal>to_tsvector('english', 'The Fat Rats')</literal></entry>
        <entry><literal>'fat':2 'rat':3</literal></entry>
       </row>
       <row>
        <entry><literal><function>length(<type>tsvector</type>)</function></literal></entry>
        <entry><type>integer</type></entry>
        <entry>numero di lessemi in un <type>tsvector</type></entry>
        <entry><literal>length('fat:2,4 cat:3 rat:5A'::tsvector)</literal></entry>
        <entry><literal>3</literal></entry>
       </row>
       <row>
        <entry><literal><function>setweight(<type>tsvector</type>, <type>"char"</type>)</function></literal></entry>
        <entry><type>tsvector</type></entry>
        <entry>assegna il peso di ogni elemento di <type>tsvector</type></entry>
        <entry><literal>setweight('fat:2,4 cat:3 rat:5B'::tsvector, 'A')</literal></entry>
        <entry><literal>'cat':3A 'fat':2A,4A 'rat':5A</literal></entry>
       </row>
       <row>
        <entry><literal><function>strip(<type>tsvector</type>)</function></literal></entry>
        <entry><type>tsvector</type></entry>
        <entry>rimuove le posizioni ed i pesi da <type>tsvector</type></entry>
        <entry><literal>strip('fat:2,4 cat:3 rat:5A'::tsvector)</literal></entry>
        <entry><literal>'cat' 'fat' 'rat'</literal></entry>
       </row>
       <row>
        <entry><literal><function>to_tsquery(<optional> <replaceable class="PARAMETER">config</replaceable> <type>regconfig</type> , </optional> <replaceable class="PARAMETER">query</replaceable> <type>text</type>)</function></literal></entry>
        <entry><type>tsquery</type></entry>
        <entry>normalizza le parole e le converte in <type>tsquery</type></entry>
        <entry><literal>to_tsquery('english', 'The &amp; Fat &amp; Rats')</literal></entry>
        <entry><literal>'fat' &amp; 'rat'</literal></entry>
       </row>
       <row>
        <entry><literal><function>plainto_tsquery(<optional> <replaceable class="PARAMETER">config</replaceable> <type>regconfig</type> , </optional> <replaceable class="PARAMETER">query</replaceable> <type>text</type>)</function></literal></entry>
        <entry><type>tsquery</type></entry>
        <entry>produce <type>tsquery</type> ignorando la punteggiatura</entry>
        <entry><literal>plainto_tsquery('english', 'The Fat Rats')</literal></entry>
        <entry><literal>'fat' &amp; 'rat'</literal></entry>
       </row>
       <row>
        <entry><literal><function>numnode(<type>tsquery</type>)</function></literal></entry>
        <entry><type>integer</type></entry>
        <entry>numero di lessemi più operatori in <type>tsquery</type></entry>
        <entry><literal> numnode('(fat &amp; rat) | cat'::tsquery)</literal></entry>
        <entry><literal>5</literal></entry>
       </row>
       <row>
        <entry><literal><function>querytree(<replaceable class="PARAMETER">query</replaceable> <type>tsquery</type>)</function></literal></entry>
        <entry><type>text</type></entry>
        <entry>ottiene la parte indicizzabile di una <type>tsquery</type></entry>
        <entry><literal>querytree('foo &amp; ! bar'::tsquery)</literal></entry>
        <entry><literal>'foo'</literal></entry>
       </row>
       <row>
        <entry><literal><function>ts_rank(<optional> <replaceable class="PARAMETER">weights</replaceable> <type>float4[]</type>, </optional> <replaceable class="PARAMETER">vector</replaceable> <type>tsvector</type>, <replaceable class="PARAMETER">query</replaceable> <type>tsquery</type> <optional>, <replaceable class="PARAMETER">normalization</replaceable> <type>integer</type> </optional>)</function></literal></entry>
        <entry><type>float4</type></entry>
        <entry>classifica il documento per la query</entry>
        <entry><literal>ts_rank(textsearch, query)</literal></entry>
        <entry><literal>0.818</literal></entry>
       </row>
       <row>
        <entry><literal><function>ts_rank_cd(<optional> <replaceable class="PARAMETER">weights</replaceable> <type>float4[]</type>, </optional> <replaceable class="PARAMETER">vector</replaceable> <type>tsvector</type>, <replaceable class="PARAMETER">query</replaceable> <type>tsquery</type> <optional>, <replaceable class="PARAMETER">normalization</replaceable> <type>integer</type> </optional>)</function></literal></entry>
        <entry><type>float4</type></entry>
        <entry>classifica il documento per la query usando la "cover density"</entry>
        <entry><literal>ts_rank_cd('{0.1, 0.2, 0.4, 1.0}', textsearch, query)</literal></entry>
        <entry><literal>2.01317</literal></entry>
       </row>
       <row>
        <entry><literal><function>ts_headline(<optional> <replaceable class="PARAMETER">config</replaceable> <type>regconfig</type>, </optional> <replaceable class="PARAMETER">document</replaceable> <type>text</type>, <replaceable class="PARAMETER">query</replaceable> <type>tsquery</type> <optional>, <replaceable class="PARAMETER">options</replaceable> <type>text</type> </optional>)</function></literal></entry>
        <entry><type>text</type></entry>
        <entry>visualizza una uguaglianza di query</entry>
        <entry><literal>ts_headline('x y z', 'z'::tsquery)</literal></entry>
        <entry><literal>x y &lt;b&gt;z&lt;/b&gt;</literal></entry>
       </row>
       <row>
        <entry><literal><function>ts_rewrite(<replaceable class="PARAMETER">query</replaceable> <type>tsquery</type>, <replaceable class="PARAMETER">target</replaceable> <type>tsquery</type>, <replaceable class="PARAMETER">substitute</replaceable> <type>tsquery</type>)</function></literal></entry>
        <entry><type>tsquery</type></entry>
        <entry>rimpiazza target con  sobstitute dentro la query</entry>
        <entry><literal>ts_rewrite('a &amp; b'::tsquery, 'a'::tsquery, 'foo|bar'::tsquery)</literal></entry>
        <entry><literal>'b' &amp; ( 'foo' | 'bar' )</literal></entry>
       </row>
       <row>
        <entry><literal><function>ts_rewrite(<replaceable class="PARAMETER">query</replaceable> <type>tsquery</type>, <replaceable class="PARAMETER">select</replaceable> <type>text</type>)</function></literal></entry>
        <entry><type>tsquery</type></entry>
        <entry>rimpiazza usando i target ed i substitutes da un comando <command>SELECT</command></entry>
        <entry><literal>SELECT ts_rewrite('a &amp; b'::tsquery, 'SELECT t,s FROM aliases')</literal></entry>
        <entry><literal>'b' &amp; ( 'foo' | 'bar' )</literal></entry>
       </row>
       <row>
        <entry><literal><function>get_current_ts_config()</function></literal></entry>
        <entry><type>regconfig</type></entry>
        <entry>ottiene la configurazione di ricerca di testo predefinita</entry>
        <entry><literal>get_current_ts_config()</literal></entry>
        <entry><literal>english</literal></entry>
       </row>
       <row>
        <entry><literal><function>tsvector_update_trigger()</function></literal></entry>
        <entry><type>trigger</type></entry>
        <entry>funzione trigger per aggiornamento automatico di colonne <type>tsvector</type></entry>
        <entry><literal>CREATE TRIGGER ... tsvector_update_trigger(tsvcol, 'pg_catalog.swedish', title, body)</literal></entry>
        <entry><literal></literal></entry>
       </row>
       <row>
        <entry><literal><function>tsvector_update_trigger_column()</function></literal></entry>
        <entry><type>trigger</type></entry>
        <entry>funzione trigger per aggiornamento automatico di colonne <type>tsvector</type></entry>
        <entry><literal>CREATE TRIGGER ... tsvector_update_trigger_column(tsvcol, configcol, title, body)</literal></entry>
        <entry><literal></literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  <note>
   <para>
    
    Tutte le funzioni di ricerca testo che accettano un argomento opzionale
    <type>regconfig</type> devono usare la configurazione specificata da
    <xref linkend="guc-default-text-search-config" />
    quando quell'argomento è omesso.
   </para>
  </note>

  <para>
   
    Le funzioni nella
   <xref linkend="textsearch-functions-debug-table" />
   sono elencate separatamente perchè non sono normalmente utilizzate nelle comuni
   operazioni di ricerca testo. Esse sono utili per lo sviluppo e la messa a punto di
   nuove configurazioni di ricerca testo.
  </para>

    <table id="textsearch-functions-debug-table">
     <title>Funzioni per il debug di ricerca testo</title>
     <tgroup cols="5">
      <thead>
       <row>
        <entry>Funzione</entry>
        <entry>Tipo restituito</entry>
        <entry>Descrizione</entry>
        <entry>Esempio</entry>
        <entry>Risultato</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal><function>ts_debug(<optional> <replaceable class="PARAMETER">config</replaceable> <type>regconfig</type>, </optional> <replaceable class="PARAMETER">document</replaceable> <type>text</type>, OUT <replaceable class="PARAMETER">alias</replaceable> <type>text</type>, OUT <replaceable class="PARAMETER">description</replaceable> <type>text</type>, OUT <replaceable class="PARAMETER">token</replaceable> <type>text</type>, OUT <replaceable class="PARAMETER">dictionaries</replaceable> <type>regdictionary[]</type>, OUT <replaceable class="PARAMETER">dictionary</replaceable> <type>regdictionary</type>, OUT <replaceable class="PARAMETER">lexemes</replaceable> <type>text[]</type>)</function></literal></entry>
        <entry><type>setof record</type></entry>
        <entry>testa una configurazione</entry>
        <entry><literal>ts_debug('english', 'The Brightest supernovaes')</literal></entry>
        <entry><literal>(asciiword,"Word, all ASCII",The,{english_stem},english_stem,{}) ...</literal></entry>
       </row>
       <row>
        <entry><literal><function>ts_lexize(<replaceable class="PARAMETER">dict</replaceable> <type>regdictionary</type>, <replaceable class="PARAMETER">token</replaceable> <type>text</type>)</function></literal></entry>
        <entry><type>text[]</type></entry>
        <entry>testa un dizionario</entry>
        <entry><literal>ts_lexize('english_stem', 'stars')</literal></entry>
        <entry><literal>{star}</literal></entry>
       </row>
       <row>
        <entry><literal><function>ts_parse(<replaceable class="PARAMETER">parser_name</replaceable> <type>text</type>, <replaceable class="PARAMETER">document</replaceable> <type>text</type>, OUT <replaceable class="PARAMETER">tokid</replaceable> <type>integer</type>, OUT <replaceable class="PARAMETER">token</replaceable> <type>text</type>)</function></literal></entry>
        <entry><type>setof record</type></entry>
        <entry>testa un parser</entry>
        <entry><literal>ts_parse('default', 'foo - bar')</literal></entry>
        <entry><literal>(1,foo) ...</literal></entry>
       </row>
       <row>
        <entry><literal><function>ts_parse(<replaceable class="PARAMETER">parser_oid</replaceable> <type>oid</type>, <replaceable class="PARAMETER">document</replaceable> <type>text</type>, OUT <replaceable class="PARAMETER">tokid</replaceable> <type>integer</type>, OUT <replaceable class="PARAMETER">token</replaceable> <type>text</type>)</function></literal></entry>
        <entry><type>setof record</type></entry>
        <entry>testa un parser</entry>
        <entry><literal>ts_parse(3722, 'foo - bar')</literal></entry>
        <entry><literal>(1,foo) ...</literal></entry>
       </row>
       <row>
        <entry><literal><function>ts_token_type(<replaceable class="PARAMETER">parser_name</replaceable> <type>text</type>, OUT <replaceable class="PARAMETER">tokid</replaceable> <type>integer</type>, OUT <replaceable class="PARAMETER">alias</replaceable> <type>text</type>, OUT <replaceable class="PARAMETER">description</replaceable> <type>text</type>)</function></literal></entry>
        <entry><type>setof record</type></entry>
        <entry>ottiene i tipi di token definiti dal parser</entry>
        <entry><literal>ts_token_type('default')</literal></entry>
        <entry><literal>(1,asciiword,"Word, all ASCII") ...</literal></entry>
       </row>
       <row>
        <entry><literal><function>ts_token_type(<replaceable class="PARAMETER">parser_oid</replaceable> <type>oid</type>, OUT <replaceable class="PARAMETER">tokid</replaceable> <type>integer</type>, OUT <replaceable class="PARAMETER">alias</replaceable> <type>text</type>, OUT <replaceable class="PARAMETER">description</replaceable> <type>text</type>)</function></literal></entry>
        <entry><type>setof record</type></entry>
        <entry>ottiene i tipi di token definiti dal parser</entry>
        <entry><literal>ts_token_type(3722)</literal></entry>
        <entry><literal>(1,asciiword,"Word, all ASCII") ...</literal></entry>
       </row>
       <row>
        <entry><literal><function>ts_stat(<replaceable class="PARAMETER">sqlquery</replaceable> <type>text</type>, <optional> <replaceable class="PARAMETER">weights</replaceable> <type>text</type>, </optional> OUT <replaceable class="PARAMETER">word</replaceable> <type>text</type>, OUT <replaceable class="PARAMETER">ndoc</replaceable> <type>integer</type>, OUT <replaceable class="PARAMETER">nentry</replaceable> <type>integer</type>)</function></literal></entry>
        <entry><type>setof record</type></entry>
        <entry>ottiene le statistiche di una colonna <type>tsvector</type></entry>
        <entry><literal>ts_stat('SELECT vector from apod')</literal></entry>
        <entry><literal>(foo,10,15) ...</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

 </sect1>


 <sect1 id="functions-xml">
  <title>Funzioni XML</title>

  <para>
   
    Le funzioni e le espressioni descritte in questa
   sezione agiscono sui valori  di tipo <type>xml</type>. Consultare <xref
   linkend="datatype-xml" /> per informazioni circa il tipo <type>xml</type>.
   Le espressioni <function>xmlparse</function>
   e <function>xmlserialize</function> per conversioni a e da 
   <type>xml</type> non sono ripetute quì. L'utilizzo per molte
   di queste funzioni richiede che l'installazione sia stata compilata
   con <command>configure --with-libxml</command>.
  </para>

  <sect2>
   <title>Produrre contenuti XML</title>

   <para>
    Un insieme di funzioni e di espressioni sono disponibili per
    produrre contenuti XML da dati SQL. Come tali, esse sono
    particolarmente adatte per formattare i risultati delle query nei documenti
    XML per la trattazione in applicazioni client.
   </para>

   <sect3>
    <title><literal>xmlcomment</literal></title>

    <indexterm>
     <primary>xmlcomment</primary>
    </indexterm>

<synopsis>
<function>xmlcomment</function>(<replaceable>text</replaceable>)
</synopsis>

    <para>
     
    La funzione <function>xmlcomment</function> crea un valore XML
     contenente un commento XML con il testo specificato come contenuto.
     Il testo non deve contenere <literal>--</literal> o finire con un
     <literal>-</literal> in modo che il costrutto risultante sia un valido
     commento XML. Se l'argomento è null, il risultato è null.
    </para>

    <para>
     Esempio:
<screen><![CDATA[
SELECT xmlcomment('hello');

  xmlcomment
--------------
 <!--hello-->
]]></screen>
    </para>
   </sect3>

   <sect3>
    <title><literal>xmlconcat</literal></title>

    <indexterm>
     <primary>xmlconcat</primary>
    </indexterm>

<synopsis>
<function>xmlconcat</function>(<replaceable>xml</replaceable><optional>, ...</optional>)
</synopsis>

    <para>
        La funzione <function>xmlconcat</function> concatena una lista
     di valori individuali XML per creare un singolo valore contenente un
     frammento di contenuto XML. I valori null sono omessi; il risultato è
     null solo se non ci sono argomenti non-null.
    </para>

    <para>
     Esempio:
<screen><![CDATA[
SELECT xmlconcat('<abc/>', '<bar>foo</bar>');

      xmlconcat
----------------------
 <abc/><bar>foo</bar>
]]></screen>
    </para>

    <para>
     Le dichiarazioni XML, se presenti, sono combinate come segue. Se tutti i valori
     degli argomenti hanno la stessa dichiarazione di versione XML, nel risultato
     viene utilizzata quella versione, altrimenti non viene usata nessuna versione.
     Se tutti i valori degli argomenti hanno il valore autonomo di dichiarazione
     <quote>yes</quote>, allora quel valore viene utilizzato nel risultato. Se tutti
     i valori degli argomenti hanno un valore autonomo di dichiarazione e al massimo
     uno di questi è <quote>no</quote>, allora quello viene utilizzato nel risultato.
     Altrimenti il risultato non avrà una dichiarazione autonoma. Se il
     risultato è determinato per richiedere una dichiarazione autonoma  ma 
     non una dichiarazione di versione, sarà usata una dichiarazione di versione
     con la versione 1.0 in quanto XML richiede che una dichiarazione XML contenga una
     dichiarazione di versione. Le dichiarazioni di codifica in tutti i casi
     vengono ignorate e rimosse.
     
    </para>

    <para>
     Esempio:
<screen><![CDATA[
SELECT xmlconcat('<?xml version="1.1"?><foo/>', '<?xml version="1.1" standalone="no"?><bar/>');

             xmlconcat
-----------------------------------
 <?xml version="1.1"?><foo/><bar/>
]]></screen>
    </para>
   </sect3>

   <sect3>
    <title><literal>xmlelement</literal></title>

   <indexterm>
    <primary>xmlelement</primary>
   </indexterm>

<synopsis>
<function>xmlelement</function>(name <replaceable>name</replaceable> <optional>, xmlattributes(<replaceable>value</replaceable> <optional>AS <replaceable>attname</replaceable></optional> <optional>, ... </optional>)</optional> <optional><replaceable>, content, ...</replaceable></optional>)
</synopsis>

    <para>
     L'espressione <function>xmlelement</function> produce un elemento
     XML con il nome fornito, gli attributi ed il contenuto.
    </para>

    <para>
     Esempio:
<screen><![CDATA[
SELECT xmlelement(name foo);

 xmlelement
------------
 <foo/>

SELECT xmlelement(name foo, xmlattributes('xyz' as bar));

    xmlelement
------------------
 <foo bar="xyz"/>

SELECT xmlelement(name foo, xmlattributes(current_date as bar), 'cont', 'ent');

             xmlelement
-------------------------------------
 <foo bar="2007-01-26">content</foo>
]]></screen>
    </para>

    <para>
     I nomi degli elementi e degli attributi che non sono nomi validi XML
     vengono sottoposti ad escape sostituendo i caratteri non validi con la sequenza
     <literal>_x<replaceable>HHHH</replaceable>_</literal>, dove
     <replaceable>HHHH</replaceable> è il codice del carattere
     Unicode in notazione esadecimale. Per esempio:
<screen><![CDATA[
SELECT xmlelement(name "foo$bar", xmlattributes('xyz' as "a&b"));

            xmlelement
----------------------------------
 <foo_x0024_bar a_x0026_b="xyz"/>
]]></screen>
    </para>

    <para>
     Un esplicito nome di attributo non deve essere specificato se il valore
     dell'attributo è un riferimento di colonna, in questo caso deve essere
     usato il nome predefinito della colonna come attributo. In nessun altro caso,
     dovrà essere fornito un nome esplicito all'attributo. Per cui questo
     esempio è valido:
     
<screen>
CREATE TABLE test (a xml, b xml);
SELECT xmlelement(name test, xmlattributes(a, b)) FROM test;
</screen>
        Ma questi non lo sono:
<screen>
SELECT xmlelement(name test, xmlattributes('constant'), a, b) FROM test;
SELECT xmlelement(name test, xmlattributes(func(a, b))) FROM test;
</screen>
    </para>

    <para>
     Il contenuto dell'elemento, se specificato, sarà formattato in funzione del
     tipo di dato. Se il contenuto è esso stesso di tipo <type>xml</type>,
     potrà essere costruito un documento XML complesso. Per esempio:
<screen><![CDATA[
SELECT xmlelement(name foo, xmlattributes('xyz' as bar),
                            xmlelement(name abc),
                            xmlcomment('test'),
                            xmlelement(name xyz));

                  xmlelement
----------------------------------------------
 <foo bar="xyz"><abc/><!--test--><xyz/></foo>
]]></screen>

     
    Contenuti di altri tipi saranno formattati in dati carattere VALIDI
     XML. Questo significa, in particolare, che i caratteri &lt;, &gt;,
     e &amp; saranno convertiti in entità. I dati binari (tipi dati
     <type>bytea</type>) saranno rappresentati in base64 o in codifica
     esadecimale, in dipendenza dell'impostazione del parametro di configurazione
     <xref linkend="guc-xmlbinary" />. Il comportamento particolare per gli
     individuali tipi di dati si dovrebbe evolvere in modo da allineare i
     tipi di dati SQL e PostgreSQL con la specificha di XML Schema,
     a quel punto verrà visualizzata una descrizione più precisa.
    </para>
   </sect3>

   <sect3>
    <title><literal>xmlforest</literal></title>

   <indexterm>
    <primary>xmlforest</primary>
   </indexterm>

<synopsis>
<function>xmlforest</function>(<replaceable>content</replaceable> <optional>AS <replaceable>name</replaceable></optional> <optional>, ...</optional>)
</synopsis>

    <para>
     
    L'espressione <function>xmlforest</function> produce una foresta
     (sequenza) di elementi XML che utilizza nome e contenuto dati.
    </para>

    <para>
     Esempi:
<screen><![CDATA[
SELECT xmlforest('abc' AS foo, 123 AS bar);

          xmlforest
------------------------------
 <foo>abc</foo><bar>123</bar>


SELECT xmlforest(table_name, column_name)
FROM information_schema.columns
WHERE table_schema = 'pg_catalog';

                                         xmlforest
-------------------------------------------------------------------------------------------
 <table_name>pg_authid</table_name><column_name>rolname</column_name>
 <table_name>pg_authid</table_name><column_name>rolsuper</column_name>
 ...
]]></screen>

     Come si è visto nel secondo esempio, il nome di elemento può essere omesso se
     il valore del contenuto è un riferimento di colonna, in questo caso il nome della colonna
     viene usato in maniera predefinita. Altrimenti, deve essere specificato un nome.
    </para>

    <para>
     I nomi degli elementi che non sono nomi validi XML vengono sottoposti ad escape come visto
     sopra per <function>xmlelement</function>. In modo simile, il dato
     contenuto viene escaped per renderlo un contenuto valido XML, a meno che esso non sia
     già di tipo <type>xml</type>.
    </para>

    <para>
     Notare che le foreste XML non sono documenti XML validi se consistono di più
     di un elemento. Per cui  potrebbe essere utili racchiudere espressioni
     <function>xmlforest</function> dentro
     <function>xmlelement</function>.
    </para>
   </sect3>

   <sect3>
    <title><literal>xmlpi</literal></title>

   <indexterm>
    <primary>xmlpi</primary>
   </indexterm>

<synopsis>
<function>xmlpi</function>(name <replaceable>target</replaceable> <optional>, <replaceable>content</replaceable></optional>)
</synopsis>

    <para>
     L'espressione <function>xmlpi</function> crea una istruzione
     di elaborazione XML. Il contenuto, se presente, non dovrà
     contenere la sequenza di caratteri <literal>?&gt;</literal>.
    </para>

    <para>
     Esempio:
<screen><![CDATA[
SELECT xmlpi(name php, 'echo "hello world";');

            xmlpi
-----------------------------
 <?php echo "hello world";?>
]]></screen>
    </para>
   </sect3>

   <sect3>
    <title><literal>xmlroot</literal></title>

   <indexterm>
    <primary>xmlroot</primary>
   </indexterm>

<synopsis>
<function>xmlroot</function>(<replaceable>xml</replaceable>, version <replaceable>text</replaceable> | no value <optional>, standalone yes|no|no value</optional>)
</synopsis>

    <para>
     
        L'espressione <function>xmlroot</function> altera la proprietà
     del nodo radice di un valore XML. Se una versione è specificata,
     questa sostituisce il valore nella dichiarazione di versione, se è
     specificato un valore autonomo, questa sostituisce il valore nella 
     dichiarazione autonoma.
    </para>

    <para>
<screen><![CDATA[
SELECT xmlroot(xmlparse(document '<?xml version="1.1"?><content>abc</content>'),
               version '1.0', standalone yes);

                xmlroot
----------------------------------------
 <?xml version="1.0" standalone="yes"?>
 <content>abc</content>
]]></screen>
    </para>
   </sect3>

   <sect3 id="functions-xml-xmlagg">
    <title><literal>xmlagg</literal></title>

    <indexterm>
     <primary>xmlagg</primary>
    </indexterm>

<synopsis>
<function>xmlagg</function>(<replaceable>xml</replaceable>)
</synopsis>

    <para>
        La funzione <function>xmlagg</function> è, a differenza delle altre funzioni descritte qui,
        una funzione aggregata. Essa concatena i valori
        in input alla chiamata della funzione aggregata,
        come fa <function>xmlconcat</function>, ad eccezione che la concatenazione
        viene fatta attraverso le righe piuttosto che attraverso le espressioni in una singola righa.
        Vedere <xref linkend="functions-aggregate"/> per informazioni aggiuntive 
        sulle funzioni aggregate.
    </para>

    <para>
     Esempio:
<screen><![CDATA[
CREATE TABLE test (y int, x xml);
INSERT INTO test VALUES (1, '<foo>abc</foo>');
INSERT INTO test VALUES (2, '<bar/>');
SELECT xmlagg(x) FROM test;
        xmlagg
----------------------
 <foo>abc</foo><bar/>
]]></screen>
    </para>

    <para>
        Per determinare l'ordine della concatenazione, una clausola <literal>ORDER BY</literal>
        può essere aggiunta alla chiamata come descritto in 
         <xref linkend="syntax-aggregates"/>. Per esempio:

<screen><![CDATA[
SELECT xmlagg(x ORDER BY y DESC) FROM test;
        xmlagg
----------------------
 <bar/><foo>abc</foo>
]]></screen>
    </para>

    <para>
        Il seguente approccio non standard venita raccomandato nelle 
        versioni precedenti, e può ancora tornare utile in 
        specifici casi:

<screen><![CDATA[
SELECT xmlagg(x) FROM (SELECT * FROM test ORDER BY y DESC) AS tab;
        xmlagg
----------------------
 <bar/><foo>abc</foo>
]]></screen>
    </para>
   </sect3>
   </sect2>

   <sect2>
    <title>Predicati XML</title>

    <para>
        Le espressioni descritte in questa sezione controllano le proprietà
        dei valori <type>xml</type>. 
    </para>

   <sect3>
    <title>IS DOCUMENT</title>

    <indexterm>
     <primary>IS DOCUMENT</primary>
    </indexterm>

<synopsis>
<replaceable>xml</replaceable> IS DOCUMENT
</synopsis>

    <para>
     L'espressione <literal>IS DOCUMENT</literal> restituisce true se
     il valore dell'argomento XML è un documento XML corretto, false se non
     lo è (che vuol dire che si tratta di un frammento di XML),
     o null se l'argomento è null. Vedere <xref linkend="datatype-xml" />
     per la differenza tra documenti e frammenti di contenuto.
    </para>
   </sect3>

   <sect3>
    <title>XMLEXISTS</title>

    <indexterm>
     <primary>XMLEXISTS</primary>
    </indexterm>

<synopsis>
<function>XMLEXISTS</function>(<replaceable>text</replaceable> PASSING <optional>BY REF</optional> <replaceable>xml</replaceable> <optional>BY REF</optional>)
</synopsis>

    <para>
        La funzione <function>xmlexists</function> restituisce true se l'espressione
        XPath nel primo argomento restituisce qualche nodo, altrimenti false. 
        (Se o l'uno o l'altro argomento è null, il risultato sarà null.)
    </para>

    <para>
     Esempio:
     <screen><![CDATA[
SELECT xmlexists('//town[text() = ''Toronto'']' PASSING BY REF '<towns><town>Toronto</town><town>Ottawa</town></towns>');

 xmlexists
------------
 t
(1 row)
]]></screen>
    </para>

    <para>
        Le clausole <literal>BY REF</literal> non ha effetto in 
        PostgreSQL, ma sono permesse per conformità SQL e compatibilità con  
        altre implementazioni. Per lo standard SQL, la prima 
        <literal>BY REF</literal> è richiesta, la seconda è
        opzionale. Notare inoltre che lo standard SQL specifica
        il costrutto <function>xmlexists</function> possa prendere un espressione XQuery
        come primo argomento, ma PostgreSQL attualmente supporta solo XPath,
        che è un sottoinsieme di XQuery.
    </para>
   </sect3>

   <sect3>
    <title>xml_is_well_formed</title>

    <indexterm>
     <primary>xml_is_well_formed</primary>
    </indexterm>

    <indexterm>
     <primary>xml_is_well_formed_document</primary>
    </indexterm>

    <indexterm>
     <primary>xml_is_well_formed_content</primary>
    </indexterm>

<synopsis>
<function>xml_is_well_formed</function>(<replaceable>text</replaceable>)
<function>xml_is_well_formed_document</function>(<replaceable>text</replaceable>)
<function>xml_is_well_formed_content</function>(<replaceable>text</replaceable>)
</synopsis>

    <para>
        Queste funzioni controllano se una stringa <type>text</type> è XML ben formato,
        e ritornano un risultato booleano.
        <function>xml_is_well_formed_document</function> controlla se un documento è ben formato,
        mentre <function>xml_is_well_formed_content</function> controlla
        se un contenuto è ben formato. <function>xml_is_well_formed</function> esegue 
        il precedente se il parametro di configurazione <xref linkend="guc-xmloption"/> è impostato 
        a <literal>DOCUMENT</literal>, o l'ultimo se è impostata a <literal>CONTENT</literal>.
        Questo significa che 
        <function>xml_is_well_formed</function> è utile per vedere se
        una semplice conversione di tipo <type>xml</type> avrà successo, dal momento che altre due
        funzioni sono utili per vedere se le varianti corrispondenti di 
        <function>XMLPARSE</function> avranno successo.
    </para>

    <para>
     Esempi:

<screen><![CDATA[
SET xmloption TO DOCUMENT;
SELECT xml_is_well_formed('<>');
 xml_is_well_formed 
--------------------
 f
(1 row)

SELECT xml_is_well_formed('<abc/>');
 xml_is_well_formed 
--------------------
 t
(1 row)

SET xmloption TO CONTENT;
SELECT xml_is_well_formed('abc');
 xml_is_well_formed 
--------------------
 t
(1 row)

SELECT xml_is_well_formed_document('<pg:foo xmlns:pg="http://postgresql.org/stuff">bar</pg:foo>');
 xml_is_well_formed_document 
-----------------------------
 t
(1 row)

SELECT xml_is_well_formed_document('<pg:foo xmlns:pg="http://postgresql.org/stuff">bar</my:foo>');
 xml_is_well_formed_document 
-----------------------------
 f
(1 row)
]]></screen>

     The last example shows that the checks include whether
     namespaces are correctly matched.
    </para>
   </sect3>
  </sect2>

  <sect2 id="functions-xml-processing">
   <title>Elaborazione XML</title>

   <indexterm>
    <primary>XPath</primary>
   </indexterm>

   <para>
    Per elaborare valori di tipo dato <type>xml</type>, PostgreSQL offre
    le funzioni <function>xpath</function> e <function>xpath_exists</function>, 
    la quale valuta le espressioni
    XPath 1.0.
   </para>

<synopsis>
<function>xpath</function>(<replaceable>xpath</replaceable>, <replaceable>xml</replaceable> <optional>, <replaceable>nsarray</replaceable></optional>)
</synopsis>

   <para>
    
    La funzione <function>xpath</function> valuta le espressioni XPath
    <replaceable>xpath</replaceable> (un valore <type>text</type>) in confronto al valore XML
    <replaceable>xml</replaceable>. Essa restituisce un array di valori XML
    corrispondenti all'insieme di nodi prodotto dall'espressione XPath.
   </para>

  <para>
        Il secondo argomento dev'essere un documento XML ben formato. In particolare,
        deve avere un singolo elemento radice.
  </para>

   <para>
        Il terzo, opzionale, argomento della funzione è un array di mappature
        di namespace. Questo array dovrebbe essere un array di <type>text</type> bi-dimensionale con 
        la lunghezza del secondo asse  uguale a 2 (per es., dovrebbe essere 
        un array di array, ognuno dei quali consiste di esattamente 2 elementi).
        Il primo elemento di ogni elemento array è il nome del namespace (alias), 
        il secondo è l'URI del namespace. Non è richiesto che gli alias forniti in  
        questo array siano gli stessi usati nel documento XML stesso (in altre
        parole, sia nel documento XML sia nel contesto della funzione
        <function>xpath</function>, gli alias sono <emphasis>locali</emphasis>).
   </para>

   <para>
    Esempio:
<screen><![CDATA[
SELECT xpath('/my:a/text()', '<my:a xmlns:my="http://example.com">test</my:a>',
             ARRAY[ARRAY['my', 'http://example.com']]);

 xpath  
--------
 {test}
(1 row)
]]></screen>
   </para>

   <para>
       Per lavorare con il namespace di default (anonimo), fare qualcosa tipo questo:
<screen><![CDATA[
SELECT xpath('//mydefns:b/text()', '<a xmlns="http://example.com"><b>test</b></a>',
             ARRAY[ARRAY['mydefns', 'http://example.com']]);

 xpath
--------
 {test}
(1 row)
]]></screen>
   </para>

   <indexterm>
    <primary>xpath_exists</primary>
   </indexterm>

<synopsis>
<function>xpath_exists</function>(<replaceable>xpath</replaceable>, <replaceable>xml</replaceable> <optional>, <replaceable>nsarray</replaceable></optional>)
</synopsis>

   <para>
        La funzione <function>xpath_exists</function> è una forma specializzata 
        della funzione <function>xpath</function>. Invece di ritornare 
        i valori XML individuali che soddisfano XPath, questa funzione ritorna un
        booleano che indica se la query è soddisfatta o meno. Questa
        funzione è equivalente al predicato standard  <literal>XMLEXISTS</literal>,
        ad eccezione che offre anche supporto per un argomento di mappatura di namespace.
   </para>

   <para>
    Esempio:
<screen><![CDATA[
SELECT xpath_exists('/my:a/text()', '<my:a xmlns:my="http://example.com">test</my:a>',
                     ARRAY[ARRAY['my', 'http://example.com']]);

 xpath_exists  
--------------
 t
(1 row)
]]></screen>
   </para>
  </sect2>

  <sect2 id="functions-xml-mapping">
   <title>Tabelle di mappatura a XML</title>

   <indexterm zone="functions-xml-mapping">
    <primary>export XML</primary>
   </indexterm>

   <para>
    Le seguenti funzioni mappano il contenuto di tabelle relazionali a
    valori XML. Esse possono essere pensate come funzionalità di esportazione di XML:
<synopsis>
table_to_xml(tbl regclass, nulls boolean, tableforest boolean, targetns text)
query_to_xml(query text, nulls boolean, tableforest boolean, targetns text)
cursor_to_xml(cursor refcursor, count int, nulls boolean, 
              tableforest boolean, targetns text)
</synopsis>
        Il tipo di ritorno di ogni funzione è <type>xml</type>.
   </para>

   <para>
    La funzione <function>table_to_xml</function> mappa il contenuto della tabella
    nominata, passata come parametro <parameter>tbl</parameter>. Il
    tipo <type>regclass</type> accetta le stringhe che identificano tabelle usando
    la notazione normale, compresa la qualificazione con schema opzionale ed i
    doppi apici. La funzione <function>query_to_xml</function> eseque la
    query il cui testo viene passato come parametro
    <parameter>query</parameter> e mappa l'insieme risultato.
    La funzione <function>cursor_to_xml</function> ottiene il numero di righe indicato
    dal cursore specificato con il parametro
    <parameter>cursor</parameter>. Questa variabile è raccomandate se si devono
    mappare grandi tabelle, in quanto il risultato è accumulato
    in memoria da ogni funzione.
   </para>

   <para>
    Se <parameter>tableforest</parameter> è false, allora il documento
    XML risultante sarà simile a questo:
<screen><![CDATA[
<tablename>
  <row>
    <columnname1>data</columnname1>
    <columnname2>data</columnname2>
  </row>

  <row>
    ...
  </row>

  ...
</tablename>
]]></screen>

    Se <parameter>tableforest</parameter> è true, il risultato è un
    frammento di contenuto XML che sarà simile a questo:
<screen><![CDATA[
<tablename>
  <columnname1>data</columnname1>
  <columnname2>data</columnname2>
</tablename>

<tablename>
  ...
</tablename>

...
]]></screen>

    Se il nome della tabella non è disponibile,
    mappando una query o un cursore, è stata usata le stringa <literal>table</literal>
    nel primo formato, la stringa <literal>row</literal> nel secondo formato.
   </para>

   <para>
    
    La scelta tra questi formati dipende dall'utente. Il primo formato
    è un documento XML corretto, che sarà importante in
    molte applicazioni. Il secondo tende ad essere più utile nella
    funzione <function>cursor_to_xml</function> se i valori risultanti
    devono essere in seguito riassemblati in un documento. Le funzioni
    per produrre i contenuti XML discussi sopra, in particolare
    <function>xmlelement</function>, possono essere usate per provare
    ad alterare i risultati.
   </para>

   <para>
    I valori dei dati vengono mappati nella stessa maniera descritta sopra
    per la funzione <function>xmlelement</function>.
   </para>

   <para>
    Il parametro <parameter>nulls</parameter> determina se i valori
    null devono essere inclusi in output. Se è true, i valori
    null nelle colonne sono rappresentati come:
<screen><![CDATA[
<columnname xsi:nil="true"/>
]]></screen>
    dove <literal>xsi</literal> è il prefisso del namespace per XML
    Schema Instance. Una adeguata dichiarazione del nomespace  deve essere
    aggiunta al valore del risultato. Se è falso, le colonne contenenti
    valori null sono semplicemente omesse dall'output.
   </para>

   <para>
    
    Il parametro <parameter>targetns</parameter> specifica il namespace
    del risultato XML desirato. Se nessun particolare namespace
    è voluto, verrà passata una stringa vuota.
   </para>

   <para>
    Le seguenti funzioni restituiscono il documento XML Schema che descrive
    le mappature prodotte dalle
    corrispondenti funzioni viste sopra:
<synopsis>
table_to_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text)
query_to_xmlschema(query text, nulls boolean, tableforest boolean, targetns text)
cursor_to_xmlschema(cursor refcursor, nulls boolean, tableforest boolean, targetns text)
</synopsis>
    È essenziale che gli stessi parametri  siano passati in modo da
    ottenere corrispondenza tra la mappatura dati XML e il documento XML Schema.
   </para>

   <para>
    Le seguenti funzioni producono la mappatura dei dati XML ed il
    corrispondente  XML Schema, uniti insieme,  in un documento
    (o foresta). Possono essere utili dove si desiderano risultati
    auto-contenuti ed auto-descritti:
<synopsis>
table_to_xml_and_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text)
query_to_xml_and_xmlschema(query text, nulls boolean, tableforest boolean, targetns text)
</synopsis>
   </para>

   <para>
    Inoltre, sono disponibili le seguenti funzioni per produrre
    analoghe mappature di un intero schema o l'intero datatbase
    corrente:
<synopsis>
schema_to_xml(schema name, nulls boolean, tableforest boolean, targetns text)
schema_to_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text)
schema_to_xml_and_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text)

database_to_xml(nulls boolean, tableforest boolean, targetns text)
database_to_xmlschema(nulls boolean, tableforest boolean, targetns text)
database_to_xml_and_xmlschema(nulls boolean, tableforest boolean, targetns text)
</synopsis>

    Notare che queste potenzialmente producono una grande quantità di dati, che devono
    essere costruiti in memoria. Quando è richiesto la mappatura di grandi schemi o
    database, può essere utile considerare la possibilità di mappare, invece,
    le tabelle separatamente, eventualmente anche tramite un cursore.
   </para>

   <para>
    Il risultato contenuto in uno schema di mappatura sarà simile a questo:

<screen><![CDATA[
<schemaname>

table1-mapping

table2-mapping

...

</schemaname>]]></screen>

    dove il formato di mappatura di una tabella dipende dal parametro
    <parameter>tableforest</parameter> come spiegato sopra.
   </para>

   <para>
    Il risultato contenuto in uno schema di mappatura sarà simile a questo:

<screen><![CDATA[
<dbname>

<schema1name>
  ...
</schema1name>

<schema2name>
  ...
</schema2name>

...

</dbname>]]></screen>

    dove lo schema di mappatura è come quello visto sopra.
   </para>

   <para>
    Come esempio per l'utilizzo dell'output prodotto da queste funzioni,
    la <xref linkend="xslt-xml-html" /> mostra un foglio di stile XSLT che
    converte l'uscita di 
    <function>table_to_xml_and_xmlschema</function> in un documento HTML
    contenente una rappresentazione tabulare dei dati di tabella. In modo
    simile, i dati risultanti di queste funzioni possono essere
    convertiti in altri formati  basati-XML.
   </para>

   <figure id="xslt-xml-html">
    <title>Foglio di stile XSLT per convertire l'uscita SQL/XML in HTML</title>
<programlisting><![CDATA[
<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="http://www.w3.org/1999/xhtml"
>

  <xsl:output method="xml"
      doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"
      doctype-public="-//W3C/DTD XHTML 1.0 Strict//EN"
      indent="yes"/>

  <xsl:template match="/*">
    <xsl:variable name="schema" select="//xsd:schema"/>
    <xsl:variable name="tabletypename"
                  select="$schema/xsd:element[@name=name(current())]/@type"/>
    <xsl:variable name="rowtypename"
                  select="$schema/xsd:complexType[@name=$tabletypename]/xsd:sequence/xsd:element[@name='row']/@type"/>

    <html>
      <head>
        <title><xsl:value-of select="name(current())"/></title>
      </head>
      <body>
        <table>
          <tr>
            <xsl:for-each select="$schema/xsd:complexType[@name=$rowtypename]/xsd:sequence/xsd:element/@name">
              <th><xsl:value-of select="."/></th>
            </xsl:for-each>
          </tr>

          <xsl:for-each select="row">
            <tr>
              <xsl:for-each select="*">
                <td><xsl:value-of select="."/></td>
              </xsl:for-each>
            </tr>
          </xsl:for-each>
        </table>
      </body>
    </html>
  </xsl:template>

</xsl:stylesheet>
]]></programlisting>
   </figure>
  </sect2>
 </sect1>


 <sect1 id="functions-sequence">
  <title>Funzioni di manipolazione sequenze</title>

  <indexterm>
   <primary>sequence</primary>
  </indexterm>
  <indexterm>
   <primary>nextval</primary>
  </indexterm>
  <indexterm>
   <primary>currval</primary>
  </indexterm>
  <indexterm>
   <primary>lastval</primary>
  </indexterm>
  <indexterm>
   <primary>setval</primary>
  </indexterm>

  <para>
   Questa sezione descrive le funzioni <productname>PostgreSQL</productname>
   per operare sulle <firstterm>oggetti di sequenza</firstterm>.
   Gli oggetti di sequenza (chiamati anche generatori di sequenza o soltanto
   sequenze) sono speciali tabelle a riga singola create con <xref
   linkend="sql-createsequence" endterm="sql-createsequence-title" />.
   Un oggetto di sequenza è normalmente usato per generare identificatori unique
   per le righe di una tabella. Le funzioni di sequenza, elencate nella <xref
   linkend="functions-sequence-table" />, forniscono metodi semplici, sicuri e
   multiutente per ottenere successivi valori di sequenza dagli oggetti di
   sequenza.
  </para>

   <table id="functions-sequence-table">
    <title>Funzioni di sequenza</title>
    <tgroup cols="3">
     <thead>
      <row> <entry>Funzione</entry> 
            <entry>Tipo di ritorno</entry> 
            <entry>Descrizione</entry></row>
     </thead>

     <tbody>
      <row>
        <entry><literal><function>currval(<type>regclass</type>)</function></literal></entry>
        <entry><type>bigint</type></entry>
        <entry>Il valore di ritorno ottenuto più recentemente con <function>nextval</function> per la specifica sequenza</entry>
      </row>
      <row>
        <entry><literal><function>lastval()</function></literal></entry>
        <entry><type>bigint</type></entry>
        <entry>Il valore di ritorno ottenuto più recentemente con
        <function>nextval</function> per ogni sequenza</entry>
      </row>
      <row>
        <entry><literal><function>nextval(<type>regclass</type>)</function></literal></entry>
        <entry><type>bigint</type></entry>
        <entry>Avanza nella sequenza e restituisce il nuovo valore</entry>
      </row>
      <row>
        <entry><literal><function>setval(<type>regclass</type>, <type>bigint</type>)</function></literal></entry>
        <entry><type>bigint</type></entry>
        <entry>Impsta il valore corrente della sequenza</entry>
      </row>
      <row>
        <entry><literal><function>setval(<type>regclass</type>, <type>bigint</type>, <type>boolean</type>)</function></literal></entry>
        <entry><type>bigint</type></entry>
        <entry>Imposta il valore corrente della sequenza e la flag <literal>is_called</literal>
        </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
        La sequenza su cui operare è specificata da
        un argomento <type>regclass</type>, che è semplicemente l'OID della sequenza nel
        catalogo di sistema <structname>pg_class</structname>. Non si deve cercare l'OID 
        a mano, comunque, dato che <type>regclass</type> lo farà per te.
        Basta scrivere il nome della sequenza racchiuso in singoli apici così che assomigli
        a una costante letterale. Per 
        compatibilità con la gestione dei nomi comuni 
         <acronym>SQL</acronym>, la stringa sarà convertita a minuscolo
        a meno che contenga doppi apici attorno al nome della sequenza. Così:
<programlisting>
nextval('foo')      <lineannotation>operates on sequence <literal>foo</literal></lineannotation>
nextval('FOO')      <lineannotation>operates on sequence <literal>foo</literal></lineannotation>
nextval('"Foo"')    <lineannotation>operates on sequence <literal>Foo</literal></lineannotation>
</programlisting>
        Il nome della sequenza può essere qualificato da uno schema, se necessario:
<programlisting>
nextval('myschema.foo')     <lineannotation>operates on <literal>myschema.foo</literal></lineannotation>
nextval('"myschema".foo')   <lineannotation>same as above</lineannotation>
nextval('foo')              <lineannotation>searches search path for <literal>foo</literal></lineannotation>
</programlisting>
        Vedere <xref linkend="datatype-oid"/> per maggiori informazioni circa
        <type>regclass</type>.
  </para>

  <note>
   <para>
    Prima di <productname>PostgreSQL</productname> 8.1, gli argomenti delle funzioni di
    sequenza erano di tipo <type>text</type>, non <type>regclass</type>, e la conversione
    descritta sopra da una stringa di testo ad un valore OID doveva essere effettuata
    in fase di esecuzione durante ogni chiamata. Per la compatibilità all'indietro,
    questo strumento esiste ancora, ma internamente esso è ora gestito come una
    implicita coercizione da <type>text</type> a <type>regclass</type> prima che la funzione venga
    chiamata.
   </para>

   <para>
    
    Quando si scrive l'argomento di una funzione di sequenza come una disadorna stringa
    letterale, essa diventa una costante di tipo <type>regclass</type>. Dato che è
    realmente proprio un OID, essa seguirà la sequenza originariamente identificata
    malgrado successivamente cambierà il nome, riassegnerà lo schema, ecc. 
    Questo comportamento <quote>early binding</quote> è normalmente desiderabile per
    riferimenti a sequenze in colonne e viste predefinite. Ma a volte si potrà volere
    il <quote>late binding</quote> dove il riferimento alla sequenza viene risolto in fase 
    di esecuzione. Per ottenere il comportamento late-binding, forzare la costante in modo che sia
    memorizzata come una costante <type>text</type> invece di <type>regclass</type>:
<programlisting>
nextval('foo'::text)      <lineannotation><literal>foo</literal> is looked up at runtime</lineannotation>
</programlisting>
    
    Notare che late binding era il solo comportamento supportato nei rilasci di
    <productname>PostgreSQL</productname> precedenti alla versione 8.1, per cui avrete
    bisogno di fare ciò per preservare la semantica nelle vecchie applicazioni.
   </para>

   <para>
    Naturalmente, l'argomento di una funzione di sequenza può essere sia un'espressione 
    che una costante. Se è una espressione di testo allora una
    coercizone implicita dovrà risultare in una ricerca in fase di esecuzione.
   </para>
  </note>

  <para>
   Le funzioni di sequenza disponibili sono:

    <variablelist>
     <varlistentry>
      <term><function>nextval</function></term>
      <listitem>
       <para>
        Avanza l'oggetto di sequenza al suo nuovo valore e restituisce quel
        valore. Ciò viene fatto automaticamente: anche se multiple sessioni di
        <function>nextval</function> saranno in esecuzione concorrentemente, ognuna
        riceverà sicuramente un distinto valore di sequenza.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><function>currval</function></term>
      <listitem>
       <para>
        Restituisce il valore più recente ottenuto da <function>nextval</function>
        per questa sequenza nella sessione corrente. (Viene segnalato un errore
        se <function>nextval</function> non è mai stato chiamato per questa
        sequenza in questa sessione). Notare che dato che questo estituisce
        un valore di sessione locale, esso dà una risposta prevedibile, indipendentemente
        dal fatto che altre sessioni hanno eseguito <function>nextval</function> quando
        lo ha fatto la sessione corrente.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><function>lastval</function></term>
      <listitem>
        <para>
        Ritorna il valore più recente restituito da
        <function>nextval</function> nella sessione corrente. Questa funzione è
        identitca a <function>currval</function>, eccetto che, invece
        di prendere come argomento il nome della sequenza, essa prende il
        valore dell'ultima sequenza che <function>nextval</function>
        ha usato nella sessione corrente. È un errore chiamare
        <function>lastval</function> se <function>nextval</function>
        non è stato ancora chiamato nella sessione corrente.
       </para>
       
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><function>setval</function></term>
      <listitem>
       <para>
        
        Resetta il valore del contatore dell'oggetto sequenza. La forma dei due
        parametri imposta il campo <literal>last_value</literal> della sequenza al
        valore specificato e imposta il suo campo <literal>is_called</literal> a
        <literal>true</literal>, significando che il successivo 
        <function>nextval</function> deve avanzare la sequenza prima di
        restituire un valore. Il valore riportato da <function>currval</function> è
        anch'esso impostato al valore specificato. Nella forma a tre parametri,
        <literal>is_called</literal> può essere impostato sia a <literal>true</literal>
        che a <literal>false</literal>.  Se impostato a <literal>true</literal> ha lo stesso effetto
        come nella forma a due parametri. Se è impostato a <literal>false</literal>, il
        successivo <function>nextval</function> restituirà esattamente il valore 
        specificato e la sequenza avanzerà a partire dal successivo
        <function>nextval</function>. Inoltre, il valore riportato da
        <function>currval</function> in questo caso non viene cambiato (questo è stato cambiato
        rispetto al comportamento pre-8.3). Per esempio,


<screen>
SELECT setval('foo', 42);           <lineannotation>Next <function>nextval</function> will return 43</lineannotation>
SELECT setval('foo', 42, true);     <lineannotation>Same as above</lineannotation>
SELECT setval('foo', 42, false);    <lineannotation>Next <function>nextval</function> will return 42</lineannotation>
</screen>

        Il risultato restituito da <function>setval</function> è esattamente il valore del suo
        secondo argumento.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
  </para>

  <para>
   
    Se un oggetto  sequenza è stato creato con i parametri predefiniti,
   le chiamate a <function>nextval</function> ritorneranno valori successivi
   cominciando con 1. Altri comportamenti possono essere ottenuti usando
   speciali parametri nel comando <xref linkend="sql-createsequence" endterm="sql-createsequence-title" />;
   per maggiori informazioni vedere le pagine di riferimento relative al comando.
  </para>

  <important>
   <para>
    Per evitare il bloccaggio delle transazioni correnti che ottengono numeri dalla
    stessa sequenza, una operazione <function>nextval</function> non deve mai essere rolled back;
    in quanto, dopo che un valore è stato assegnato esso viene considerato usato, anche se la
    transazione che ha usato <function>nextval</function>, in seguito, si è abortita. Questo significa
    che le transazioni abortite possono lasciare <quote>buchi</quote> non utilizzati nella
    sequenza di valori assegnati. Neanche le operazioni <function>setval</function> dovranno mai essere
    sottoposte a rollback.
   </para>
  </important>

 </sect1>


 <sect1 id="functions-conditional">
  <title>Espressioni condizionali</title>

  <indexterm>
   <primary>CASE</primary>
  </indexterm>

  <indexterm>
   <primary>espressione condizionale</primary>
  </indexterm>

  <para>
   Questa sezione descrive le espressioni condizionali conformi a <acronym>SQL</acronym>
   disponibili in <productname>PostgreSQL</productname>.
  </para>

  <tip>
   <para>
    Se ci sono necessità che vanno oltre le possibilità offerte da queste
    espressioni condizionali si può prendere in cosiderazione la possibilità
    di scrivere una stored procedure in un linguaggio di programmazione più espressivo.
   </para>
  </tip>

  <sect2>
   <title><literal>CASE</literal></title>

  <para>
   L'espressione <acronym>SQL</acronym> <token>CASE</token> è una
   espressione condizionale generica, simile all'istruzione if/else
   contenuta in altri linguaggi:

<synopsis>
CASE WHEN <replaceable>condition</replaceable> THEN <replaceable>result</replaceable>
     <optional>WHEN ...</optional>
     <optional>ELSE <replaceable>result</replaceable></optional>
END
</synopsis>

   La clausola <token>CASE</token> può essere usata dovunque
   una espressione è valida. L'espressione <replaceable>condizione</replaceable>
   è una espressione condizionale che restituisce un risultato <type>boolean</type>.
   Se il risultato è true allora il valore dell'espressione <token>CASE</token>
   è il <replaceable>risultato</replaceable> che segue la condizione. Se il risultato
   è falso, ogni successiva clausula  <token>WHEN</token> verrà cercata nello
   stesso modo. Se nessuna  <replaceable>condition</replaceable> <token>WHEN</token>
   è vera allora il valore dell'espressione
   case è il <replaceable>risultato</replaceable> nella clausola
   <token>ELSE</token>. Se la clausola <token>ELSE</token> è
   omessa e nessuna condizione è soddisfatta, il risultato è null.
  </para>

   <para>
    Un esempio:
<screen>
SELECT * FROM test;

 a
---
 1
 2
 3


SELECT a,
       CASE WHEN a=1 THEN 'one'
            WHEN a=2 THEN 'two'
            ELSE 'other'
       END
    FROM test;

 a | case
---+-------
 1 | one
 2 | two
 3 | other
</screen>
   </para>

  <para>
   I tipi dato di tutti le espressioni <replaceable>risultato</replaceable>
   devono essere convertiti ad un singolo tipo di output.
   Vedere <xref linkend="typeconv-union-case" /> per ulteriori dettagli.
  </para>

  <para>
        C'è una forma <quote>semplice</quote> di espressione <token>CASE</token>
        che è una variante della forma generale espressa sopra:

<synopsis>
CASE <replaceable>expression</replaceable>
    WHEN <replaceable>value</replaceable> THEN <replaceable>result</replaceable>
    <optional>WHEN ...</optional>
    <optional>ELSE <replaceable>result</replaceable></optional>
END
</synopsis>

   
    L'<replaceable>espressione</replaceable>
   è calcolata e confrontata a
   tutte le specificazioni <replaceable>valore</replaceable> nella clausula
   <token>WHEN</token> fino a che non ne viene trovata una che è uguale. Se
   non viene trovata nessuna uguaglianza, viene restituito il <replaceable>risultato</replaceable>
   nella clausula <token>ELSE</token> (o un valore null). Questo è simile all'istruzione
   <function>switch</function> nel linguaggio C.
  </para>

   <para>
    L'esempio sopra può essere scritta usando la semplice
    sintassi <token>CASE</token>:
<screen>
SELECT a,
       CASE a WHEN 1 THEN 'one'
              WHEN 2 THEN 'two'
              ELSE 'other'
       END
    FROM test;

 a | case
---+-------
 1 | one
 2 | two
 3 | other
</screen>
   </para>

   <para>
    Una espressione <token>CASE</token> non valuta nessuna sottoespressione
    che non sia necessaria per determinare il risultato. Per esempio, questo è un
    possibile modo di evitare il fallimento di divisione per zero:
<programlisting>
SELECT ... WHERE CASE WHEN x &lt;&gt; 0 THEN y/x &gt; 1.5 ELSE false END;
</programlisting>
   </para>
  </sect2>

  <sect2>
   <title><literal>COALESCE</literal></title>

  <indexterm>
   <primary>COALESCE</primary>
  </indexterm>

  <indexterm>
   <primary>NVL</primary>
  </indexterm>

  <indexterm>
   <primary>IFNULL</primary>
  </indexterm>

<synopsis>
<function>COALESCE</function>(<replaceable>value</replaceable> <optional>, ...</optional>)
</synopsis>

  <para>
   La funzione <function>COALESCE</function> restituisce il primo dei suoi
   argomenti che non è null. Viene restituito null solo se tutti gli argomenti
   sono null. Essa è usata spesso per sostituire un valore predefinito con un
   valore null quando i dati vengono richiamati per visualizzazioni, per esempio:
<programlisting>
SELECT COALESCE(description, short_description, '(none)') ...
</programlisting>
  </para>

   <para>
    In modo simile all'epressione <token>CASE</token>, <function>COALESCE</function> non
    valuta gli argomenti che non sono necessari per determinare il risultato;
    cioè, gli argomenti alla destra del primo argomento non-null non vengono
    valutati. Questa funzione standard-SQL fornisce possibilità simili
    alle funzioni <function>NVL</function> e <function>IFNULL</function>, che vengono usate in alcuni altri
    sistemi di database.
   </para>
  </sect2>

  <sect2>
   <title><literal>NULLIF</literal></title>

  <indexterm>
   <primary>NULLIF</primary>
  </indexterm>

<synopsis>
<function>NULLIF</function>(<replaceable>value1</replaceable>, <replaceable>value2</replaceable>)
</synopsis>

  <para>
   La funzione <function>NULLIF</function> restituisce un valore null se
   <replaceable>valore1</replaceable> e <replaceable>valore2</replaceable>
   sono uguali; altrimenti esso restituisce <replaceable>valore1</replaceable>.
   Essa può essere usata per effettuare l'operazione inversa dell'esempio
   <function>COALESCE</function> visto sopra:
<programlisting>
SELECT NULLIF(value, '(none)') ...
</programlisting>
  </para>
  <para>
    In questo esempio, se <literal>value</literal> è <literal>(none)</literal>,
    viene restituito null, altrimenti viene restituito il valore di  <literal>value</literal>.
  </para>

  </sect2>

  <sect2>
   <title><literal>GREATEST</literal> e <literal>LEAST</literal></title>

  <indexterm>
   <primary>GREATEST</primary>
  </indexterm>
  <indexterm>
   <primary>LEAST</primary>
  </indexterm>

<synopsis>
<function>GREATEST</function>(<replaceable>value</replaceable> <optional>, ...</optional>)
</synopsis>
<synopsis>
<function>LEAST</function>(<replaceable>value</replaceable> <optional>, ...</optional>)
</synopsis>

   <para>
    
    Le funzioni <function>GREATEST</function> e <function>LEAST</function> selezionano il
    più grande o il più piccolo valore da una lista di qualsiasi numero di espressioni.
    Le espressioni devono essere convertibili ad un tipo dato comune, che
    sarà il tipo dato del risultato
    (consultare <xref linkend="typeconv-union-case" /> per dettagli). I valori NULL
    nella lista sono ignorati. Il risultato sarà NULL solo se tutte le
    espressioni valutano un NULL.
   </para>

   <para>
    Notare che <function>GREATEST</function> e <function>LEAST</function> non sono
    standard SQL, ma sono una estensione comune. Alcuni altri database
    fanno restituire NULL se qualche argomento è NULL, invece che solo quando
    tutti sono NULL.
   </para>
  </sect2>
 </sect1>

 <sect1 id="functions-array">
  <title>Funzioni ed operatori per array</title>

  <para>
   La <xref linkend="array-operators-table" /> mostra gli operatori
   disponibili per i tipi <type>array</type>.
  </para>

    <table id="array-operators-table">
     <title>Operatori per <type>array</type></title>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>Operatore</entry>
        <entry>Descrizione</entry>
        <entry>Esempio</entry>
        <entry>Risultato</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry> <literal>=</literal> </entry>
        <entry>uguale</entry>
        <entry><literal>ARRAY[1.1,2.1,3.1]::int[] = ARRAY[1,2,3]</literal></entry>
        <entry><literal>t</literal></entry>
       </row>

       <row>
        <entry> <literal>&lt;&gt;</literal> </entry>
        <entry>non uguale</entry>
        <entry><literal>ARRAY[1,2,3] &lt;&gt; ARRAY[1,2,4]</literal></entry>
        <entry><literal>t</literal></entry>
       </row>

       <row>
        <entry> <literal>&lt;</literal> </entry>
        <entry>minore di</entry>
        <entry><literal>ARRAY[1,2,3] &lt; ARRAY[1,2,4]</literal></entry>
        <entry><literal>t</literal></entry>
       </row>

       <row>
        <entry> <literal>&gt;</literal> </entry>
        <entry>maggiore di</entry>
        <entry><literal>ARRAY[1,4,3] &gt; ARRAY[1,2,4]</literal></entry>
        <entry><literal>t</literal></entry>
       </row>

       <row>
        <entry> <literal>&lt;=</literal> </entry>
        <entry>minore di o uguale</entry>
        <entry><literal>ARRAY[1,2,3] &lt;= ARRAY[1,2,3]</literal></entry>
        <entry><literal>t</literal></entry>
       </row>

       <row>
        <entry> <literal>&gt;=</literal> </entry>
        <entry>maggiore di o uguale</entry>
        <entry><literal>ARRAY[1,4,3] &gt;= ARRAY[1,4,3]</literal></entry>
        <entry><literal>t</literal></entry>
       </row>

       <row>
        <entry> <literal>@&gt;</literal> </entry>
        <entry>contiene</entry>
        <entry><literal>ARRAY[1,4,3] @&gt; ARRAY[3,1]</literal></entry>
        <entry><literal>t</literal></entry>
       </row>

       <row>
        <entry> <literal>&lt;@</literal> </entry>
        <entry>è contenuto da</entry>
        <entry><literal>ARRAY[2,7] &lt;@ ARRAY[1,7,4,2,6]</literal></entry>
        <entry><literal>t</literal></entry>
       </row>

       <row>
        <entry> <literal>&amp;&amp;</literal> </entry>
        <entry>si sovvrappone (ha elementi in comune)</entry>
        <entry><literal>ARRAY[1,4,3] &amp;&amp; ARRAY[2,1]</literal></entry>
        <entry><literal>t</literal></entry>
       </row>

       <row>
        <entry> <literal>||</literal> </entry>
        <entry>concatenazione array-to-array</entry>
        <entry><literal>ARRAY[1,2,3] || ARRAY[4,5,6]</literal></entry>
        <entry><literal>{1,2,3,4,5,6}</literal></entry>
       </row>

       <row>
        <entry> <literal>||</literal> </entry>
        <entry>concatenazione array-to-array</entry>
        <entry><literal>ARRAY[1,2,3] || ARRAY[[4,5,6],[7,8,9]]</literal></entry>
        <entry><literal>{{1,2,3},{4,5,6},{7,8,9}}</literal></entry>
       </row>

       <row>
        <entry> <literal>||</literal> </entry>
        <entry>concatenazione element-to-array </entry>
        <entry><literal>3 || ARRAY[4,5,6]</literal></entry>
        <entry><literal>{3,4,5,6}</literal></entry>
       </row>

       <row>
        <entry> <literal>||</literal> </entry>
        <entry>concatenazione array-to-element</entry>
        <entry><literal>ARRAY[4,5,6] || 7</literal></entry>
        <entry><literal>{4,5,6,7}</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  <para>
   
    I confronti tra gli array operano sul contenuto degli array elemento-per-elemento,
   usando la funzione di confronto B-Tree predefinita per il tipo dato dell'elemento.
   Negli array multidimensionali gli elementi sono esaminati nell'ordine row-major
   (l'ultimo subscritto varia più rapidamente).
   Se il contenuto di due array è uguale ma la dimensionalità è
   differente, la prima differenza nell'informazione di dimensionalità
   determina il tipo di ordinamento. (Questa è una modifica rispetto alle versioni di
   <productname>PostgreSQL</productname> precedenti alla 8.2: le versioni più vecchie affermavano
   che due array con lo stesso contenuto erano uguali, anche se
   il numero di dimensioni o l'estensione dei subscritti erano diversi).
  </para>

  <para>
   Vedere <xref linkend="arrays" /> per ulteriori dettagli circa il comportamento degli
   operatori per array.
  </para>

  <para>
   La <xref linkend="array-functions-table" /> mostra le funzioni
   disponibili per l'uso con i tipi array. Vedere <xref linkend="arrays" />
   per ulteriori discussioni ed esempi sull'uso di queste funzioni.
  </para>

  <indexterm>
    <primary>array_append</primary>
  </indexterm>
  <indexterm>
    <primary>array_cat</primary>
  </indexterm>
  <indexterm>
    <primary>array_ndims</primary>
  </indexterm>
  <indexterm>
    <primary>array_dims</primary>
  </indexterm>
  <indexterm>
    <primary>array_fill</primary>
  </indexterm>
  <indexterm>
    <primary>array_length</primary>
  </indexterm>
  <indexterm>
    <primary>array_lower</primary>
  </indexterm>
  <indexterm>
    <primary>array_prepend</primary>
  </indexterm>
  <indexterm>
    <primary>array_to_string</primary>
  </indexterm>
 <indexterm>
    <primary>array_upper</primary>
  </indexterm>
  <indexterm>
    <primary>string_to_array</primary>
  </indexterm>
  <indexterm>
    <primary>unnest</primary>
  </indexterm>

    <table id="array-functions-table">
     <title>Funzioni per <type>array</type></title>
     <tgroup cols="5">
      <thead>
       <row>
        <entry>Funzione</entry>
        <entry>Tipo restituito</entry>
        <entry>Descrizione</entry>
        <entry>Esempio</entry>
        <entry>Risultato</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <literal>
          <function>array_append</function>(<type>anyarray</type>, <type>anyelement</type>)
         </literal>
        </entry>
        <entry><type>anyarray</type></entry>
        <entry>appende un elemento alla fine di un array</entry>
        <entry><literal>array_append(ARRAY[1,2], 3)</literal></entry>
        <entry><literal>{1,2,3}</literal></entry>
       </row>
       <row>
        <entry>
         <literal>
          <function>array_cat</function>(<type>anyarray</type>, <type>anyarray</type>)
         </literal>
        </entry>
        <entry><type>anyarray</type></entry>
        <entry>concatena due array</entry>
        <entry><literal>array_cat(ARRAY[1,2,3], ARRAY[4,5])</literal></entry>
        <entry><literal>{1,2,3,4,5}</literal></entry>
       </row>
       <row>
        <entry>
         <literal>
          <function>array_ndims</function>(<type>anyarray</type>)
         </literal>
        </entry>
        <entry><type>int</type></entry>
        <entry>restituisce il numero di dimensioni dell'array</entry>
        <entry><literal>array_ndims(ARRAY[[1,2,3], [4,5,6]])</literal></entry>
        <entry><literal>2</literal></entry>
       </row>
       <row>
        <entry>
         <literal>
          <function>array_dims</function>(<type>anyarray</type>)
         </literal>
        </entry>
        <entry><type>text</type></entry>
        <entry>restituisce una rappresentazione in testo delle dimensioni di un array</entry>
        <entry><literal>array_dims(ARRAY[[1,2,3], [4,5,6]])</literal></entry>
        <entry><literal>[1:2][1:3]</literal></entry>
       </row>
       <row>
        <entry>
         <literal>
          <function>array_fill</function>(<type>anyelement</type>, <type>int[]</type>,
          <optional>, <type>int[]</type></optional>)
         </literal>
        </entry>
        <entry><type>anyarray</type></entry>
        <entry>
            restituisce un array inizializzato con valori e dimensioni forniti, 
            opzionalmente con limiti inferiori diversi da 1</entry>
        <entry><literal>array_fill(7, ARRAY[3], ARRAY[2])</literal></entry>
        <entry><literal>[2:4]={7,7,7}</literal></entry>
       </row>
       <row>
        <entry>
         <literal>
          <function>array_length</function>(<type>anyarray</type>, <type>int</type>)
         </literal>
        </entry>
        <entry><type>int</type></entry>
        <entry>restituisce la lunghezza della dimensione dell'array richiesto</entry>
        <entry><literal>array_length(array[1,2,3], 1)</literal></entry>
        <entry><literal>3</literal></entry>
       </row>
       <row>
        <entry>
         <literal>
          <function>array_lower</function>(<type>anyarray</type>, <type>int</type>)
         </literal>
        </entry>
        <entry><type>int</type></entry>
        <entry>restituisce il limite inferiore della dimensione dell'array richiesto</entry>
        <entry><literal>array_lower('[0:2]={1,2,3}'::int[], 1)</literal></entry>
        <entry><literal>0</literal></entry>
       </row>
       <row>
        <entry>
         <literal>
          <function>array_prepend</function>(<type>anyelement</type>, <type>anyarray</type>)
         </literal>
        </entry>
        <entry><type>anyarray</type></entry>
        <entry>appende un elemento all'inizio di un array</entry>
        <entry><literal>array_prepend(1, ARRAY[2,3])</literal></entry>
        <entry><literal>{1,2,3}</literal></entry>
       </row>
       <row>
        <entry>
         <literal>
            <function>array_to_string</function>(<type>anyarray</type>, 
            <type>text</type> <optional>, <type>text</type></optional>)
         </literal>
        </entry>
        <entry><type>text</type></entry>
        <entry>
            concatena elementi di array usando i delimitatori forniti e 
            opzionalmente stringe null
        </entry>
        <entry><literal>array_to_string(ARRAY[1, 2, 3, NULL, 5], ',', '*')</literal></entry>
        <entry><literal>1,2,3,*,5</literal></entry>
       </row>
       <row>
        <entry>
         <literal>
          <function>array_upper</function>(<type>anyarray</type>, <type>int</type>)
         </literal>
        </entry>
        <entry><type>int</type></entry>
        <entry>restituisce il limite superiore della dimensione dell'array richiesto</entry>
        <entry><literal>array_upper(ARRAY[1,2,3,4], 1)</literal></entry>
        <entry><literal>4</literal></entry>
       </row>
       <row>
        <entry>
         <literal>
          <function>string_to_array</function>(<type>text</type>, <type>text</type> <optional>, <type>text</type></optional>)
         </literal>
        </entry>
        <entry><type>text[]</type></entry>
        <entry>
            scinde la stringa in elementi di array usando i 
            delimitatori forniti e opzionalmente stringhe null</entry>
        <entry><literal>string_to_array('xx~^~yy~^~zz', '~^~', 'yy')</literal></entry>
        <entry><literal>{xx,NULL,zz}</literal></entry>
       </row>
       <row>
        <entry>
         <literal>
          <function>unnest</function>(<type>anyarray</type>)
         </literal>
        </entry>
        <entry><type>setof anyelement</type></entry>
        <entry>espande un array in un insieme di righe</entry>
        <entry><literal>unnest(ARRAY[1,2])</literal></entry>
        <entry><literal>1</literal><para><literal>2</literal></para> (2 rows)</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>
        In <function>string_to_array</function>, se il parametro delimitatore è
        NULL, ogni carattere nella stringa di input diventerà un elemento separato nell'array
        risultante. Se il delimitatore è una stringa vuota, allora l'intera stringa di input 
        viene restituita come un array da un elemento. Altrimenti la stringa di input 
        viene divisa ad ogni occorrenza della stringa delimitatrice.
   </para>

   <para>
        In <function>string_to_array</function>, se il parametro null-string è omesso
        o NULL, nessuna delle sottostringhe dell'input sarà sostituita da NULL.
        In <function>array_to_string</function>, se il parametro null-string è omesso
        o NULL, ogni elemento null nell'array è semplicemente saltato e
        non rappresentato nella stringa di output.
   </para>

   <note>
    <para>
        Ci sono due differenze nel comportamento di <function>string_to_array</function>
        dalle versioni precedenti la 9.1 di <productname>PostgreSQL</productname>.
        Primo, essa restituirà un array vuoto (zero elementi) piuttosto che NULL, quando
        la stringa di input è di lunghezza zero. Secondo, se la stringa delimitatrice è 
        NULL, la funzione divide l'input in caratteri individuali, 
        piuttosto che ritornare NULL come prima.
    </para>
   </note>

   <para>
        Vedere anche <xref linkend="functions-aggregate"/> circa la funzione aggregata
        <function>array_agg</function> per l'uso con gli array.
   </para>
  </sect1>




 <sect1 id="functions-aggregate">
  <title>Funzioni aggregate</title>

  <indexterm zone="functions-aggregate">
   <primary>funzione aggregata</primary>
   <secondary>incorporata</secondary>
  </indexterm>

  <para>
   
    Le <firstterm>funzioni aggregate</firstterm> calcolano un singolo 
   risultato da un insieme di valori di input. Le funzioni aggregate incorporate
   sono elencate nella
   <xref linkend="functions-aggregate-table" /> e nella
   <xref linkend="functions-aggregate-statistics-table" />. 
   Speciali considerazioni sulla sintassi delle le funzioni
   aggregate sono spiegate in <xref linkend="syntax-aggregates" />.
   Consultare <xref linkend="tutorial-agg" /> per ulteriori informazioni
   introduttive.
  </para>

  <table id="functions-aggregate-table">
   <title>Funzioni aggregate di uso generale</title>

   <tgroup cols="4">
    <thead>
     <row>
      <entry>Funzione</entry>
      <entry>Tipo argomento</entry>
      <entry>Tipo restituito</entry>
      <entry>Descrizione</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry>
       <indexterm>
        <primary>array_agg</primary>
       </indexterm>
       <function>array_agg(<replaceable class="parameter">expression</replaceable>)</function>
      </entry>
      <entry>
       qualsiasi
      </entry>
      <entry>
       array del tipo dell'argomento
      </entry>
      <entry>valori in input, inclusi valori null, concatenati in un array</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>average</primary>
       </indexterm>
       <function>avg(<replaceable class="parameter">expression</replaceable>)</function>
      </entry>
      <entry>
       <type>smallint</type>, <type>int</type>,
       <type>bigint</type>, <type>real</type>, <type>double
       precision</type>, <type>numeric</type>, o <type>interval</type>
      </entry>
      <entry>
       <type>numeric</type> per ogni argomento di tipo intero,
       <type>double precision</type> per argomenti a virgola mobile,
        altrimenti lo stesso tipo di dato dell'argomento
      </entry>
      <entry>la media (aritmetica) di tutti i valori in input</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>bit_and</primary>
       </indexterm>
       <function>bit_and(<replaceable class="parameter">expression</replaceable>)</function>
      </entry>
      <entry>
       <type>smallint</type>, <type>int</type>, <type>bigint</type>, o
       <type>bit</type>
      </entry>
      <entry>
        stesso tipo di dato dell'argomento
      </entry>
      <entry>l'AND di bit di tutti i valori non-null in input, null se assenti</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>bit_or</primary>
       </indexterm>
       <function>bit_or(<replaceable class="parameter">expression</replaceable>)</function>
      </entry>
      <entry>
       <type>smallint</type>, <type>int</type>, <type>bigint</type>, o
       <type>bit</type>
      </entry>
      <entry>
        stesso tipo di dato dell'argomento
      </entry>
      <entry>l'OR di bit di tutti i valori non-null in input, null se assenti</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>bool_and</primary>
       </indexterm>
       <function>bool_and(<replaceable class="parameter">expression</replaceable>)</function>
      </entry>
      <entry>
       <type>bool</type>
      </entry>
      <entry>
       <type>bool</type>
      </entry>
      <entry>true se tutti i valori in input sono true, altrimenti false</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>bool_or</primary>
       </indexterm>
       <function>bool_or(<replaceable class="parameter">expression</replaceable>)</function>
      </entry>
      <entry>
       <type>bool</type>
      </entry>
      <entry>
       <type>bool</type>
      </entry>
      <entry>true se almeno un valore in input è true, altrimenti false</entry>
     </row>

     <row>
      <entry><function>count(*)</function></entry>
      <entry></entry>
      <entry><type>bigint</type></entry>
      <entry>numero di righe in input</entry>
     </row>

     <row>
      <entry>
        <function>count(<replaceable class="parameter">expression</replaceable>)</function></entry>
      <entry>any</entry>
      <entry><type>bigint</type></entry>
      <entry>
            numero di righe per le quali il valore di <replaceable
             class="parameter">expression</replaceable> non è null
      </entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>every</primary>
       </indexterm>
       <function>every(<replaceable class="parameter">expression</replaceable>)</function>
      </entry>
      <entry>
       <type>bool</type>
      </entry>
      <entry>
       <type>bool</type>
      </entry>
      <entry>equivalente a <function>bool_and</function></entry>
     </row>

     <row>
      <entry>
    <function>max(<replaceable class="parameter">expression</replaceable>)</function></entry>
      <entry>qualsiasi tipo  array, numerico, stringa o data/orario</entry>
      <entry>stesso tipo dell'argomento</entry>
      <entry>
       il massimo valore di <replaceable
       class="parameter">expression</replaceable> attraverso tutti i valori in input
      </entry>
     </row>

     <row>
      <entry>
<function>min(<replaceable class="parameter">expression</replaceable>)</function></entry>
      <entry>qualsiasi tipo  array, numerico, stringa o data/orario</entry>
      <entry>stesso tipo dell'argomento</entry>
      <entry>
       il minimo valore di <replaceable
       class="parameter">expression</replaceable> attraverso tutti i valori in input
      </entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>string_agg</primary>
       </indexterm>
       <function>
         string_agg(<replaceable class="parameter">expression</replaceable>,
                    <replaceable class="parameter">delimiter</replaceable>)
       </function>
      </entry>
      <entry>
       <type>text</type>, <type>text</type>
      </entry>
      <entry>
       <type>text</type>
      </entry>
      <entry>i valori in input concatenati in una stringa, separati da un delimitatore</entry>
     </row>

     <row>
      <entry><function>sum(<replaceable class="parameter">expression</replaceable>)</function></entry>
      <entry>
       <type>smallint</type>, <type>int</type>,
       <type>bigint</type>, <type>real</type>, <type>double
       precision</type>, <type>numeric</type> o
       <type>interval</type>
      </entry>
      <entry>
       <type>bigint</type> per argomenti <type>smallint</type> o
       <type>int</type>, <type>numeric</type> per argomenti
       <type>bigint</type>, <type>double precision</type>
       per argomenti floating-point, altrimenti lo stesso tipo di dato
        dell'argomento
      </entry>
      <entry>la somma di <replaceable class="parameter">expression</replaceable> attraverso tutti i valori in input</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>xmlagg</primary>
       </indexterm>
       <function>xmlagg(<replaceable class="parameter">expression</replaceable>)</function>
      </entry>
      <entry>
       <type>xml</type>
      </entry>
      <entry>
       <type>xml</type>
      </entry>
      <entry>concatenazione di valori XML (vedere anche <xref linkend="functions-xml-xmlagg"/>)</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   Prendere nota che eccetto <function>count</function>, queste
   funzioni restituiscono un valore null quando non ci sono righe selezionate. In
   particolare, <function>sum</function> senza nessuna riga restituisce null, non
   zero come ci si potrebbe aspettare. La funzione <function>coalesce</function>
   può essere usata per sostituire zero a null quando necesario.
  </para>

  <note>
    <indexterm>
      <primary>ANY</primary>
    </indexterm>
    <indexterm>
      <primary>SOME</primary>
    </indexterm>
    <para>
      
    Le aggregate booleane <function>bool_and</function> e 
      <function>bool_or</function> corrispondono alle aggregate standard SQL
      <function>every</function> e <function>any</function> o
      <function>some</function>. 
      Per quanto riguarda <function>any</function> e <function>some</function>, 
<programlisting>
SELECT b1 = ANY((SELECT b2 FROM t2 ...)) FROM t1 ...;
</programlisting>
      Dove <function>ANY</function> può essere considerata o come intriduzione di una
      sottoquery oppure come una aggregata se l'espressione selezionata restituisce 1 riga con un valore booleano.
      Pertanto il nome standard non può essere fornito a queste aggregate.
    </para>
  </note>

  <note>
   <para>
    
    Gli utenti abituati a lavorare con altri sistemi di gestione di database
    SQL possono rimanere delusi  dalle prestazioni dell'aggregata
    <function>count</function> quando è applicata alla tabella 
    intera. Una simile query:
<programlisting>
SELECT count(*) FROM sometable;
</programlisting>
    sarà eseguita da <productname>PostgreSQL</productname> usando una
    scansione sequenziale dell'intera tabella.
   </para>
  </note>

  <para>
        Le funzioni aggregate <function>array_agg</function>,
        <function>string_agg</function>,
        e <function>xmlagg</function>, cos' come funzioni aggregate simili 
        definite dall'utente, producono  risultati molto differenti che dipendendono 
        dall'ordine dai valori in input. Questo ordinamento non è
        specificato di default, ma può essere controllato scrivendo una clausola
        <literal>ORDER BY</literal> all'interno della chiamata alla funzione aggregata,
        come mostrato in <xref linkend="syntax-aggregates"/>.
        Alternativamente, fornire valori in input da una sottoquery ordinata
        di solito funzionerà. Per esempio:

<screen><![CDATA[
SELECT xmlagg(x) FROM (SELECT x FROM test ORDER BY y DESC) AS tab;
]]></screen>

        Ma questa sintassi non è permessa nello standard SQL, e non
        è portabile ad altri sistemi di database.
  </para>

  <para>
   
    La <xref linkend="functions-aggregate-statistics-table" /> mostra
   le funzioni aggregate normalmente utilizzate nelle analisi statistiche.
   (Esse sono  trattate separatamente per evitare di ingombrare la lista
   deglle funzioni aggregate usate più comunemente). Dove la descrizione menziona
   la <replaceable class="parameter">N</replaceable>,  si intende il
   numero di righe in input nelle quali tutte le espressioni in input sono non-null.
   In tutti i casi, se il calcolo è senza senso viene restituito null,
   per esempio quando <replaceable class="parameter">N</replaceable> è zero.
  </para>

  <indexterm>
   <primary>statistiche</primary>
  </indexterm>
  <indexterm>
   <primary>regressione lineare</primary>
  </indexterm>

  <table id="functions-aggregate-statistics-table">
   <title>Funzioni aggregate per statistiche</title>

   <tgroup cols="4">
    <thead>
     <row>
      <entry>Funzione</entry>
      <entry>Tipo argomento</entry>
      <entry>Tipo restituito</entry>
      <entry>Descrizione</entry>
     </row>
    </thead>

    <tbody>

     <row>
      <entry>
       <indexterm>
        <primary>correlazione</primary>
       </indexterm>
       <function>corr(<replaceable class="parameter">Y</replaceable>, <replaceable class="parameter">X</replaceable>)</function>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>coefficiente di correlazione</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>covarianza</primary>
        <secondary>popolazione</secondary>
       </indexterm>
       <function>covar_pop(<replaceable class="parameter">Y</replaceable>, <replaceable class="parameter">X</replaceable>)</function>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>covarianza di popolazione</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>covarianza</primary>
        <secondary>campione</secondary>
       </indexterm>
       <function>covar_samp(<replaceable class="parameter">Y</replaceable>, <replaceable class="parameter">X</replaceable>)</function>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>covarianza di campione</entry>
     </row>

     <row>
      <entry>
       <function>regr_avgx(<replaceable class="parameter">Y</replaceable>, <replaceable class="parameter">X</replaceable>)</function>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>media di variabile indipendente
      (<literal>sum(<replaceable class="parameter">X</replaceable>)/<replaceable class="parameter">N</replaceable></literal>)</entry>
     </row>

     <row>
      <entry>
       <function>regr_avgy(<replaceable class="parameter">Y</replaceable>, 
        <replaceable class="parameter">X</replaceable>)</function>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>media di variabile dipendente
      (<literal>sum(<replaceable class="parameter">Y</replaceable>)/<replaceable class="parameter">N</replaceable></literal>)</entry>
     </row>

     <row>
      <entry>
        <function>regr_count(<replaceable class="parameter">Y</replaceable>, 
        <replaceable class="parameter">X</replaceable>)</function>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>
       <type>bigint</type>
      </entry>
      <entry>numero di righe in input nelle quali ambedue le espressioni sono non-null</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>regression intercept</primary>
       </indexterm>
        <function>regr_intercept(<replaceable class="parameter">Y</replaceable>, 
        <replaceable class="parameter">X</replaceable>)</function>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry><note><para>Nota per il revisore: Whaaaaaaaat?</para></note>
        y-intercept of the least-squares-fit linear equation
        determined by the (<replaceable
        class="parameter">X</replaceable>, <replaceable
        class="parameter">Y</replaceable>) pairs</entry>
     </row>

     <row>
      <entry>
       <function>regr_r2(<replaceable class="parameter">Y</replaceable>, <replaceable class="parameter">X</replaceable>)</function>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>quadrato del coefficiente di correlazione</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>pendenza di regressione</primary>
       </indexterm>
        <function>regr_slope(<replaceable class="parameter">Y</replaceable>, 
        <replaceable class="parameter">X</replaceable>)</function>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry><note><para>Nota per il revisore: Sei tu lo statista.... </para></note> 
        slope of the least-squares-fit linear equation determined
      by the (<replaceable class="parameter">X</replaceable>,
      <replaceable class="parameter">Y</replaceable>) pairs</entry>
     </row>

     <row>
      <entry>
       <function>regr_sxx(<replaceable class="parameter">Y</replaceable>, <replaceable class="parameter">X</replaceable>)</function>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry><literal>sum(<replaceable
      class="parameter">X</replaceable>^2) - sum(<replaceable
      class="parameter">X</replaceable>)^2/<replaceable
      class="parameter">N</replaceable></literal> (<quote>sum of
      squares</quote> of the independent variable)</entry>
     </row>

     <row>
      <entry>
       <function>regr_sxy(<replaceable class="parameter">Y</replaceable>, <replaceable class="parameter">X</replaceable>)</function>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry><literal>sum(<replaceable
      class="parameter">X</replaceable>*<replaceable
      class="parameter">Y</replaceable>) - sum(<replaceable
      class="parameter">X</replaceable>) * sum(<replaceable
      class="parameter">Y</replaceable>)/<replaceable
      class="parameter">N</replaceable></literal> (<quote>sum of
      products</quote> of independent times dependent
      variable)</entry>
     </row>

     <row>
      <entry>
       <function>regr_syy(<replaceable class="parameter">Y</replaceable>, <replaceable class="parameter">X</replaceable>)</function>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry><literal>sum(<replaceable
      class="parameter">Y</replaceable>^2) - sum(<replaceable
      class="parameter">Y</replaceable>)^2/<replaceable
      class="parameter">N</replaceable></literal> (<quote>sum of
      squares</quote> of the dependent variable)</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>standard deviation</primary>
       </indexterm>
       <function>stddev(<replaceable class="parameter">expression</replaceable>)</function>
      </entry>
      <entry>
       <type>smallint</type>, <type>int</type>,
       <type>bigint</type>, <type>real</type>, <type>double
       precision</type>, or <type>numeric</type>
      </entry>
      <entry>
       <type>double precision</type> per asrgomenti in virgola mobile,
       altrimenti <type>numeric</type>
      </entry>
      <entry>alias storico per di <function>stddev_samp</function></entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>deviazione standard</primary>
        <secondary>popolazione</secondary>
       </indexterm>
       <function>stddev_pop(<replaceable class="parameter">expression</replaceable>)</function>
      </entry>
      <entry>
       <type>smallint</type>, <type>int</type>,
       <type>bigint</type>, <type>real</type>, <type>double
       precision</type>, or <type>numeric</type>
      </entry>
      <entry>
       <type>double precision</type> per argomenti a virgola mobile,
       altrimenti <type>numeric</type>
      </entry>
      <entry>deviazione standard della popolazione dei valori in input</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>standard deviation</primary>
        <secondary>sample</secondary>
       </indexterm>
       <function>stddev_samp(<replaceable class="parameter">expression</replaceable>)</function>
      </entry>
      <entry>
       <type>smallint</type>, <type>int</type>,
       <type>bigint</type>, <type>real</type>, <type>double
       precision</type> o <type>numeric</type>
      </entry>
      <entry>
       <type>double precision</type> per argomenti a vorgola mobile,
       altrimenti <type>numeric</type>
      </entry>
      <entry>deviazione standard di campione dei valori di input</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>varianza</primary>
       </indexterm>
       <function>variance</function>(<replaceable class="parameter">expression</replaceable>)
      </entry>
      <entry>
       <type>smallint</type>, <type>int</type>,
       <type>bigint</type>, <type>real</type>, <type>double
       precision</type> o <type>numeric</type>
      </entry>
      <entry>
       <type>double precision</type> per argomenti a virgola mobile,
       altrimenti <type>numeric</type>
      </entry>
      <entry>alias storico di <function>var_samp</function></entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>varianza</primary>
        <secondary>popolazione</secondary>
       </indexterm>
       <function>var_pop</function>(<replaceable class="parameter">expression</replaceable>)
      </entry>
      <entry>
       <type>smallint</type>, <type>int</type>,
       <type>bigint</type>, <type>real</type>, <type>double
       precision</type> o <type>numeric</type>
      </entry>
      <entry>
       <type>double precision</type> per argomenti a virgola mobile,
       altrimenti <type>numeric</type>
      </entry>
        <entry>varianza di popolazione dei valori in input  
        (quadrato della deviazione standard della popolazione)</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>variance</primary>
        <secondary>sample</secondary>
       </indexterm>
       <function>var_samp</function>(<replaceable class="parameter">expression</replaceable>)
      </entry>
      <entry>
       <type>smallint</type>, <type>int</type>,
       <type>bigint</type>, <type>real</type>, <type>double
       precision</type>, o <type>numeric</type>
      </entry>
      <entry>
       <type>double precision</type> per argomenti a virgola mobile,
       altrimenti <type>numeric</type>
      </entry>
        <entry>varianza di campione dei valori in input 
        (quadrato della varianza standard della popolazione)</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="functions-window">
  <title>Funzioni finestra</title>

  <indexterm zone="functions-window">
   <primary>funzione finestra</primary>
   <secondary>incorporata</secondary>
  </indexterm>

  <para>
        Le <firstterm>funzioni finestra</firstterm> hanno l'abilità di eseguire
        calcoli su insiemi di righe che sono correlate alla riga interrogata correntement.
        Vedere  <xref linkend="tutorial-window"/> per un'introduzione a questa caratteristica.
  </para>

  <para>
        Le funzioni finestra incorporate sono elencate in 
        <xref linkend="functions-window-table"/>. Notare che queste funzioni
        <emphasis>devono</emphasis> essere invocate usando la sintassi 
        della funzione finestra; Dove cioè
        è richiesta una clausola <literal>OVER</literal>.
  </para>

  <para>
        In aggiunta a queste funzioni, qualsiasi funzione aggregata 
        incorporata o definita dall'utente
        può essere usata come una funzione finestra (vedere
        <xref linkend="functions-aggregate"/> per un elenco delle aggretate incorporate).
        Le funzioni aggregate agiscono come funzioni finestra 
        solo quando una clausola <literal>OVER</literal>
        segue la chiamata; Altrimenti si comportano come funzioni aggregate normali.
  </para>

  <table id="functions-window-table">
   <title>Funzioni finestra di utilizzo generale</title>

   <tgroup cols="3">
    <thead>
     <row>
      <entry>Funzione</entry>
      <entry>Tipo di ritorno</entry>
      <entry>Descrizione</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry>
       <indexterm>
        <primary>row_number</primary>
       </indexterm>
       <function>row_number()</function>
      </entry>
      <entry>
       <type>bigint</type>
      </entry>
      <entry>
        numero della riga corrente all'interno della sua partizione, 
        partendo da 1</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>rank</primary>
       </indexterm>
       <function>rank()</function>
      </entry>
      <entry>
       <type>bigint</type>
      </entry>
      <entry><note><para>Nota per il revisore: non capisco</para></note> rank of the current row with gaps; same as <function>row_number</function> of its first peer</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>dense_rank</primary>
       </indexterm>
       <function>dense_rank()</function>
      </entry>
      <entry>
       <type>bigint</type>
      </entry>
      <entry>rank of the current row without gaps; this function counts peer groups</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>percent_rank</primary>
       </indexterm>
       <function>percent_rank()</function>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>relative rank of the current row: (<function>rank</function> - 1) / (total rows - 1)</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>cume_dist</primary>
       </indexterm>
       <function>cume_dist()</function>
      </entry>
      <entry>
       <type>double precision</type>
      </entry>
      <entry>grado relativo della riga corrente: (numero di righe che precedono la riga corrente) / (righe totali)</entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>ntile</primary>
       </indexterm>
       <function>ntile(<replaceable class="parameter">num_buckets</replaceable> <type>integer</type>)</function>
      </entry>
      <entry>
       <type>integer</type>
      </entry>
      <entry>integer ranging from 1 to the argument value, dividing the
       partition as equally as possible</entry>
     </row>



     <row>
      <entry>
       <indexterm>
        <primary>lag</primary>
       </indexterm>
       <function>
         lag(<replaceable class="parameter">value</replaceable> <type>any</type>
             [, <replaceable class="parameter">offset</replaceable> <type>integer</type>
             [, <replaceable class="parameter">default</replaceable> <type>any</type> ]])
       </function>
      </entry>
      <entry>
       <type>stesso tipo di <replaceable class="parameter">value</replaceable></type>
      </entry>
      <entry>
            ritorna <replaceable class="parameter">value</replaceable> valutato 
            alla riga che è scostato di <replaceable class="parameter">offset</replaceable>
            righe prima la riga corrente all'interno della partizione; Se non c'è quella 
            riga, invece di restituire <replaceable class="parameter">default</replaceable>.
            Sia <replaceable class="parameter">offset</replaceable> che
            <replaceable class="parameter">default</replaceable> sono valutati
            con rispetto alla riga corrente. Se omesso,
            <replaceable class="parameter">offset</replaceable> diventa 1 e  
            <replaceable class="parameter">default</replaceable> diventa null.
      </entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>lead</primary>
       </indexterm>
       <function>
         lead(<replaceable class="parameter">value</replaceable> <type>any</type>
              [, <replaceable class="parameter">offset</replaceable> <type>integer</type>
              [, <replaceable class="parameter">default</replaceable> <type>any</type> ]])
       </function>
      </entry>
      <entry>
       <type>stesso tipo di <replaceable class="parameter">value</replaceable></type>
      </entry>
      <entry>
            ritorna <replaceable class="parameter">value</replaceable> valutato 
            alla riga che è scostato di <replaceable class="parameter">offset</replaceable>
            righe dopo la riga corrente all'interno della partizione; Se non c'è quella 
            riga, invece di restituire <replaceable class="parameter">default</replaceable>.
            Sia <replaceable class="parameter">offset</replaceable> che
            <replaceable class="parameter">default</replaceable> sono valutati
            con rispetto alla riga corrente. Se omesso,
            <replaceable class="parameter">offset</replaceable> diventa 1 e  
            <replaceable class="parameter">default</replaceable> diventa null.
      </entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>first_value</primary>
       </indexterm>
       <function>first_value(<replaceable class="parameter">value</replaceable> <type>any</type>)</function>
      </entry>
      <entry>
       <type>stesso tipo di <replaceable class="parameter">value</replaceable></type>
      </entry>
      <entry>
       ritorna  <replaceable class="parameter">value</replaceable> valutato
        alla riga che è la prima
        della cornice di finestra
      </entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>last_value</primary>
       </indexterm>
       <function>last_value(<replaceable class="parameter">value</replaceable> <type>any</type>)</function>
      </entry>
      <entry>
       <type>stesso tipo di <replaceable class="parameter">value</replaceable></type>
      </entry>
      <entry>
       ritorna  <replaceable class="parameter">value</replaceable> valutato
        alla riga che è l'ultima
        della cornice di finestra
       
      </entry>
     </row>

     <row>
      <entry>
       <indexterm>
        <primary>nth_value</primary>
       </indexterm>
       <function>
         nth_value(<replaceable class="parameter">value</replaceable> 
        <type>any</type>, <replaceable class="parameter">nth</replaceable> 
        <type>integer</type>)
       </function>
      </entry>
      <entry>
       <type>stesso tipo di <replaceable class="parameter">value</replaceable></type>
      </entry>
      <entry>
        ritorna <replaceable class="parameter">value</replaceable> valutato
        alla riga che è la <replaceable class="parameter">nth</replaceable>-sima
        della cornice di finestra (contando da 1); null se non esiste
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
        Tutte le funzioni elencate in 
        <xref linkend="functions-window-table"/> dipendono dal tipo di ordinamento
        specificato dalla clausola <literal>ORDER BY</literal> della definizione di finestra associata.
        Righe che non sono distinte nell'ordinamento <literal>ORDER BY</literal>
        sono chiamate <firstterm>peer</firstterm>; Le quattro funzioni di classificazione
        sono definite per dare la stessa risposta per ogni due righe peer.
  </para>

  <para>
        Notare che <function>first_value</function>, <function>last_value</function> e
        <function>nth_value</function> considerano solo le righe all'interno della <quote>cornice di
        finestra</quote>, che per default contiene le righe dall'inizio della partizione
        all'ultimo peer della riga corrente. Queso, probabilmente,
        darà risultati non autili per <function>last_value</function> e
        a volte anche <function>nth_value</function>. È possibile ridefinire la cornice
        aggiungendo una specificazione di finestra adatta (<literal>RANGE</literal> o 
        <literal>ROWS</literal>) alla clausola  <literal>OVER</literal>.
        Vedere <xref linkend="syntax-window-functions"/> per maggiori informazioni 
        sulle specificazioni di cornice.
  </para>

  <para>
        Quando una funziona aggregata è usata come una funzione finestra, essa aggrega
        le righe all'interno la cornice di finestra corrente.
        Un'aggregata usata con <literal>ORDER BY</literal> e la definizione di cornice di finestra predefinita,
        produce un tipo di comportamento "<quote>running sum</quote>", che potrebbe essere voluto 
        o no. Per ottenere aggregazione sull'intera partizione, omettere <literal>ORDER BY</literal> o usare
        <literal>ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING</literal>.
        Altre specificazioni di cornice possono essere usate per ottenere altri effetti.
  </para>

  <note>
   <para>
        Lo standard SQL definisce un'opzione <literal>RESPECT NULLS</literal> o 
        <literal>IGNORE NULLS</literal> per <function>lead</function>, <function>lag</function>,
        <function>first_value</function>, <function>last_value</function> e
        <function>nth_value</function>.  Questo non è implementato in 
        <productname>PostgreSQL</productname>: il comportamento è sempre lo
        stesso di quello predefinito dello standard, cioè <literal>RESPECT NULLS</literal>.
        Ugualmente, l'opzione standard <literal>FROM FIRST</literal> o <literal>FROM LAST</literal>
        per <function>nth_value</function> non è implementata: solo il comportamento
        <literal>FROM FIRST</literal> è supportato. (Puoi ottenere il risultato
        di <literal>FROM LAST</literal> invertendo l'ordine con <literal>ORDER BY</literal>.)
   </para>
  </note>


 </sect1>

 <sect1 id="functions-subquery">
  <title>Espressioni sottoquery</title>

  <indexterm>
   <primary>EXISTS</primary>
  </indexterm>

  <indexterm>
   <primary>IN</primary>
  </indexterm>

  <indexterm>
   <primary>NOT IN</primary>
  </indexterm>

  <indexterm>
   <primary>ANY</primary>
  </indexterm>

  <indexterm>
   <primary>ALL</primary>
  </indexterm>

  <indexterm>
   <primary>SOME</primary>
  </indexterm>

  <indexterm>
   <primary>sottoquery</primary>
  </indexterm>

  <para>
   Questa sezione descrive le espressioni sottoquery conformi-<acronym>SQL</acronym>
   disponibili in <productname>PostgreSQL</productname>.
   Tutte le forme delle espressioni documentate in questa sezione restituiscono
   risultati booleani (true/false).
  </para>

  <sect2>
   <title><literal>EXISTS</literal></title>

<synopsis>
EXISTS (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
   
    L'argomento di <token>EXISTS</token> è una arbitraria istruzione <command>SELECT</command>
   o una <firstterm>sottoquery</firstterm>. La
   sottoquery viene valutata per determinare se essa restituisce qualche riga.
   Se restituisce almeno una riga, il risultato di <token>EXISTS</token> è
   <quote>true</quote>; se la sottoquery non restituisce righe, il risultato di <token>EXISTS</token> 
   è <quote>false</quote>.
  </para>

  <para>
   La sottoquery può fare riferimento alle variabili della query circostante,
   che fungeranno da costanti durante qualsiasi valutazione della subquery.
  </para>

  <para>
   La sottoquery viene generalmente eseguita solo quanto basta per determinare
   se viene restituita almeno una riga, non fino al suo completamento.
   È sconsigliabile scrivere una sottoquery che ha effetti secondari (come chiamare
   funzioni di sequenza); se si verificano effetti secondari o no
   potrebbe essere difficile da prevedere.
  </para>

  <para>
   
    Dato che il risultato dipende solo dalle presenza o no di qualche riga restituita,
   e non dal contenuto di queste righe, l'elenco di output della sottoquery
   non è normalmente interessante. Una convenzione di codifica comune è
   di scrivere i controlli <literal>EXISTS</literal> nella forma
   <literal>EXISTS(SELECT 1 WHERE ...)</literal>. Tuttavia ci sono eccezioni a
   questa regola, tipo le sottoquery che usano <token>INTERSECT</token>.
  </para>

  <para>
   
    Questo semplice esempio è simile ad un inner join sulla <literal>col2</literal>, ma
   esso produce al massimo una riga d'uscita per ogni riga di <literal>tab1</literal>,
   anche se ci sono corrispondenze multiple con le righe di <literal>tab2</literal>:
<screen>
SELECT col1
FROM tab1
WHERE EXISTS (SELECT 1 FROM tab2 WHERE col2 = tab1.col2);
</screen>
  </para>
  </sect2>

  <sect2>
   <title><literal>IN</literal></title>

<synopsis>
<replaceable>expression</replaceable> IN (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
   
    La parte a destra è una sottoquery tra parentesi, che deve restituire
   esattamente una colonna. L'espressione a sinistra viene valutata e confrontata
   con ogni riga del risultato della sottoquery. Il risultato di <token>IN</token>
   è <quote>true</quote> se qualche riga uguale viene trovata nella sottoquery. Il
   risultato è <quote>false</quote> se non viene trovata nessuna riga uguale
   (compreso il caso speciale in cui la sottoquery non restituisca nessuna riga).
  </para>

  <para>
Notare che se l'espressione a sinistra produce null, o se ci sono
valori a destra non uguali e almeno una riga a destra produce null,
il risultato del costrutto <token>IN</token> sarà null, non false.
Questo è in accordo alle normali regole SQL per le combinazioni booleane 
dei valori null.
  </para>

  <para>
   Come con <token>EXISTS</token>, è sconsigliabile presumere che la sottoquery sarà
   valutata completamente.
  </para>

<synopsis>
<replaceable>row_constructor</replaceable> IN (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
   La parte sinistra di questa forma di <token>IN</token> è un costruttore di riga,
   come descritto in <xref linkend="sql-syntax-row-constructors" />.
   La parte destra è una subquery tra parentesi,
   che deve restituire esattamente tante colonne per quante ce ne sono
   nella riga contenuta nell'espressione della parte sinistra. L'espressione della parte sinistra viene
   valutata e confrontata con ogni riga risultante dalla sottoquery.
   Il risultato di <token>IN</token> è <quote>true</quote> se qualche riga uguale viene trovata nella sottoquery.
   Il risultato è <quote>false</quote> se nessuna riga uguale viene trovata (compreso il caso speciale
   dove la sottoquery non restituisca nessuna riga).
  </para>
  
  <para>
   
    Come al solito, i valori null nelle righe vengono combinati con
   le normali regole delle espressioni SQL booleane. Due righe sono considerate
   uquali se tutti i loro corrispondenti membri sono non-null e uguali; le righe
   sono non uguali se uno qualsiasi dei corrispondenti membri è non-null e non uguale;
   altrimenti il risultato di quel confronto di riga è sconosciuto (null).
   Se tutti i risultati per riga sono o non uguali oppure null, con almeno un
   null, allora il risultato di <token>IN</token> è null.
  </para>
  </sect2>

  <sect2>
   <title><literal>NOT IN</literal></title>

<synopsis>
<replaceable>espressione</replaceable> NOT IN (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
   
    La parte destra è una sottoquery tra parentesi,
   che restituisce esattamente una colonna. L'espressione della parte sinistra
   viene valutata e confrontata ad ogni riga del risultato della subquery.
   Il risultato di <token>NOT IN</token> è <quote>true</quote> se solo righe non uguali
   sono trovate nella subquery (compreso il caso speciale in cui la subquery non restituisce nessuna riga).
   Il risultato è <quote>false</quote> se viene trovata qualche riga uguale.
  </para>

  <para>
   
    Notare che se l'espressione della parte sinistra rende null, o se non ci sono
   valori uguali nella parte destra e almeno una riga della parte destra rende
   null, il risultato del costrutto <token>NOT IN</token> sarà null, non true.
   Questo è conforme con le normali regole SQL per le combinazioni booleane
   di valori null.
  </para>

  <para>
   
    Come con <token>EXISTS</token>, è sconsigliabile presumere che la sottoquery sarà
   valutata completamente.
  </para>

<synopsis>
<replaceable>row_constructor</replaceable> NOT IN (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
    La parte sinistra di questa forma di <token>NOT IN</token> è un costruttore di riga,
   come descritto dentro <xref linkend="sql-syntax-row-constructors" />.
   La parte destra è una sottoquery tra parenthesi
   che deve restituire esattamente tante colonne per quante ce ne sono
   nella riga contenuta nell'espressione della parte sinistra. L'espressione nella parte sinistra viene
   valutata e confrontata row-wise con ogni riga risultante dalla subquery.
   Il risultato di <token>NOT IN</token> è <quote>true</quote> se solo righe non uguali vengono trovate
   nella subquery (compreso il caso speciale in cui la subquery non restituisce nessuna riga).
   Il risultato è <quote>false</quote> se viene trovata qualche riga uguale.
  </para>

  <para>
   
    Come al solito, i valori null nelle righe vengono combinati con
   le normali regole SQL per le espressioni booleane. Due righe sono considerate
   uquali se tutti i loro corrispondenti membri sono non-null e uguali; le righe
   sono non uguali se uno qualsiasi dei corrispondenti membri è non-null e non uguale;
   altrimenti il risultato di quel confronto di riga è sconosciuto (null).
   Se tutti i risultati per riga sono o non uguali oppure null, con almeno un
   null, allora il risultato di <token>NOT IN</token> è null.
  </para>
  </sect2>

  <sect2>
   <title><literal>ANY</literal>/<literal>SOME</literal></title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>operator</replaceable> ANY (<replaceable>subquery</replaceable>)
<replaceable>expression</replaceable> <replaceable>operator</replaceable> SOME (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
   
    La parte destra è una sottoquery tra parentesi,
   che deve restituire esattamente una colonna. L'espressione della parte sinistra
   viene valutata e confrontata con ogni riga risultante della sottoquery usando
   l'<replaceable>operator</replaceable> fornito, che dovrà rendere un risultato
   booleano.
   Il risultato di <token>ANY</token> è <quote>true</quote> se è ottenuto un risultato vero.
   Il risultato è <quote>false</quote> se non è stato trovato un risultato vero (compreso il
   caso speciale in cui la subquery non restituisca nessuna riga).
  </para>

  <para>
   <token>SOME</token> è un sinonimo per <token>ANY</token>.
   <token>IN</token> è equivalente a <literal>= ANY</literal>.
  </para>

  <para>
   Notare che se non ci sono successi ed almeno una riga della parte destra rende
   null come risultato dell'operatore, il risultato del costrutto <token>ANY</token>
   sarà null, non falso.
   Questo è conforme con le normali regole SQL per le combinazioni booleane
   di valori null.
  </para>

  <para>
    Come con <token>EXISTS</token>, è sconsigliabile presumere che la sottoquery sarà
    valutata completamente.
  </para>

<synopsis>
<replaceable>row_constructor</replaceable> <replaceable>operator</replaceable> ANY (<replaceable>subquery</replaceable>)
<replaceable>row_constructor</replaceable> <replaceable>operator</replaceable> SOME (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
   
    La parte sinistra di questa forma di <token>ANY</token> è un costruttore di riga,
   come descritto dentro <xref linkend="sql-syntax-row-constructors" />.
   La parte destra è una sottoquery tra parentesi
   che deve restituire esattamente tante colonne per quante ce ne sono
   nella riga contenuta nell'espressione della parte sinistra. 
    L'espressione nella parte sinistra viene
   valutata e confrontata "row-wise" con ogni riga risultante dalla sottoquery,
   usando l'<replaceable>operatore</replaceable> fornito.
   Il risultato di <token>ANY</token> è <quote>true</quote> se il confronto
   restituisce true per qualsiasi riga della sottoquery.
   Il risultato è <quote>false</quote> se il confronto restituisce false per ogni
   riga della sottoquery 
    (compreso il caso speciale in cui la subquery non restituisce nessuna
   riga).
   IL risultato è NULL se il confronto non restituisce true per ogni riga,
   e restituisce NULL per almeno una riga.
  </para>

  <para>
   Vedere <xref linkend="row-wise-comparison" /> per dettagli sul significato 
   di  confronto "row-wise".
  </para>
  </sect2>

  <sect2>
   <title><literal>ALL</literal></title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>operator</replaceable> ALL (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
   
    La parte destra è una sottoquery tra parentesi,
   che deve restituire esattamente una colonna. L'espressione della parte sinistra
   viene valutata e confrontata con ogni riga risultante della sottoquery usando
   l'<replaceable>operatore</replaceable> fornito, che dovrà rendere un risultato
   booleano.
   Il risultato di <token>ALL</token> è <quote>true</quote> se tutte le righe rendono true
   (compreso il caso speciale in cui la subquery non restituisca nessuna riga).
   Il risultato è <quote>false</quote> se viene trovato qualche risultato false.
   Il risultato è NULL se il confronto non restituisce false per ogni riga,
   e restituisce NULL per almeno una riga.
  </para>

  <para>
   <token>NOT IN</token> è equivalente a <literal>&lt;&gt; ALL</literal>.
  </para>

  <para>
   Come con <token>EXISTS</token>, sconsigliabile presumere che la sottoquery sarà
   valutata completamente.
  </para>

<synopsis>
    <replaceable>row_constructor</replaceable> 
    <replaceable>operator</replaceable> 
    ALL (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
        Il lato sinistro di questa forma di <token>ALL</token> è un costruttore di riga,
        come descritto in <xref linkend="sql-syntax-row-constructors"/>.
        Il lato destro è una sottoquery tra parentesi,
        che deve restituire esattamente tante colonne quante espressioni 
        ci sono nella riga sulla sinistra. Le espressioni sulla sinistra sono
        valutate e confrontate in modo row-wise ad ogni riga del risultato della sottoquery,
        usando l'<replaceable>operatore</replaceable> dato.
        Il risultato di <token>ALL</token> è <quote>true</quote> se il confronto
        restituisce true per tutte le righe della sottoquery (incluso il
        caso in cui la sottoquery non restituisce righe).
        Il risultato è <quote>false</quote> se il confronto ritorna false per ogni
        riga della sottoquery.
        Il risultato è NULL se il confronto non restituisce false per ogni
        riga della sottoquey, e ritorna NULL per almeno una riga.
  </para>

  <para>
        vedere <xref linkend="row-wise-comparison"/> per dettagli sul significato 
        di un confronto row-wise.
  </para>
  </sect2>

  <sect2>
   <title>Confronto row-wise</title>

   <indexterm zone="functions-subquery">
    <primary>comparison</primary>
    <secondary>subquery result row</secondary>
   </indexterm>

<synopsis>
    <replaceable>row_constructor</replaceable> 
    <replaceable>operator</replaceable> (<replaceable>subquery</replaceable>)
</synopsis>

  <para>
        Il lato sinistro è un costruttore di riga,
        come descritto in <xref linkend="sql-syntax-row-constructors"/>.
        Il lato destro è una sottoquery tra parentesi, che restituisce esattamente
        quante colonne quante espressioni ci sono nella riga sulla sinistra. Inoltre,
        la sottoquery non può ritornare più di una riga. (Se restituisce zero righe,
        il risultato è considerato essere null.) Il lato sinistro è valutato 
        e confrontato in modo row-wise alla singola riga risultante dalla sottoquery.
  </para>

  <para>
        Vedere <xref linkend="row-wise-comparison"/> per dettagli sul significato
        di un confronto "row-wise".
  </para>
  </sect2>
 </sect1>


 <sect1 id="functions-comparisons">
  <title>Confronti di array e righe</title>

  <indexterm>
   <primary>IN</primary>
  </indexterm>

  <indexterm>
   <primary>NOT IN</primary>
  </indexterm>

  <indexterm>
   <primary>ANY</primary>
  </indexterm>

  <indexterm>
   <primary>ALL</primary>
  </indexterm>

  <indexterm>
   <primary>SOME</primary>
  </indexterm>

  <indexterm>
   <primary>confronto row-wise</primary>
  </indexterm>

  <indexterm>
   <primary>confronto</primary>
   <secondary>row-wise</secondary>
  </indexterm>

  <indexterm>
   <primary>IS DISTINCT FROM</primary>
  </indexterm>

  <indexterm>
   <primary>IS NOT DISTINCT FROM</primary>
  </indexterm>

  <para>
   
    Questa sezione descrive diversi costrutti specializzati per fare
   confronti multipli tra gruppi di valori. Queste forme sono
   riferite sintatticamente alle forme di sottoquery della sezione precedente,
   ma non coinvolgono le subquery.
   Le forme che coinvolgono subespressioni array sono
   estensioni di <productname>PostgreSQL</productname>; le restanti sono
   conformi-<acronym>SQL</acronym>.
   Tutte le forme di espressioni documentate in questa sezione restituiscono
   risultati Booleani (true/false).
  </para>

  <sect2>
   <title><literal>IN</literal></title>

<synopsis>
    <replaceable>expression</replaceable> 
    IN (<replaceable>value</replaceable> <optional>, ...</optional>)
</synopsis>

  <para>
   La parte destra è una lista di espressioni scalari tra parentesi.
   Il risultato è <quote>vero</quote> se il risultato dell'espressione nella parte sinistra
   è uguale a qualcuna delle righe nell'espressione della parte destra. Questa è
   una notazione abbreviata per

<synopsis>
<replaceable>expression</replaceable> = <replaceable>value1</replaceable>
OR
<replaceable>expression</replaceable> = <replaceable>value2</replaceable>
OR
...
</synopsis>
  </para>

  <para>
   Notare che se l'espressione a sinistra rende null, o se non ci sono
   valori uguali nella parte destra e almeno una espressione nella parte destra rende
   null, il risultato del costrutto <token>IN</token> sarà null, non falso.
   Questo è conforme con le normali regole SQL per le combinazioni Booleane
   di valori null.
  </para>
  </sect2>

  <sect2>
   <title><literal>NOT IN</literal></title>

<synopsis>
    <replaceable>expression</replaceable> 
    NOT IN (<replaceable>value</replaceable> <optional>, ...</optional>)
</synopsis>

  <para>
   
    La parte destra è un elenco di espressioni scalari tra parentesi. Il risultato
   è <quote>vero</quote> se il risultato dell'espressione della parte sinistra
   è non uguale a tutte le espressioni della parte destra. Questa è una
   notazione abbreviata per

<synopsis>
<replaceable>expression</replaceable> &lt;&gt; <replaceable>value1</replaceable>
AND
<replaceable>expression</replaceable> &lt;&gt; <replaceable>value2</replaceable>
AND
...
</synopsis>
  </para>

  <para>
    Notare che se l'espressione nella parte sinistra rende null, o se non ci sono
   valori uguali nella parte destra e almeno una espressione nella parte destra rende
   null, il risultato del costrutto <token>NOT IN</token> sarà null, non vero
   come ci si potrebbe ingenuamente aspettare.
   Questo è conforme alle normali regole SQL per le combinazioni Booleane
   di valori null.
  </para>

  <tip>
  <para>
    La forma <literal>x NOT IN y</literal> è equivalente a 
    <literal>NOT (x IN y)</literal> in tutti
    i casi. Tuttavia, è molto più probabile inciampare in valori null
    quando si lavora con <token>NOT IN</token>, che quando si lavora con <token>IN</token>.
    Se possibile, è meglio esprimere le condizioni positivamente.
  </para>
  </tip>
  </sect2>

  <sect2>
   <title><literal>ANY</literal>/<literal>SOME</literal> (array)</title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>operator</replaceable> 
ANY (<replaceable>array expression</replaceable>)
<replaceable>expression</replaceable> <replaceable>operator</replaceable> 
SOME (<replaceable>array expression</replaceable>)
</synopsis>

  <para>
   
    La parte destra è una espressione tra parentesi, che rende un
   valore array.
   L'espressione a sinistra
   viene valutata e confrontata con ogni elemento dell'array utilizzando
   l'<replaceable>operatore</replaceable> fornito, che deve rendere un risultato
   Booleano.
   Il risultato di <token>ANY</token> è <quote>true</quote> 
    se viene ottenuto qualche risultato vero.
   Il risultato è <quote>false</quote> se non viene ottenuto 
    nessun risultato vero (compreso il caso
   speciale in cui l'array ha zero elementi).
  </para>

  <para>
    Se l'espressione array rende un array null, il risultato di
   <token>ANY</token> sarà null. Se l'espressione della parte sinistra rende null,
   il risultato di <token>ANY</token> è normalmente null (sebbene un operatore di
   confronto non-rigoroso potrebbe dare un risultato diverso).
   Inoltre, se l'array nella parte destra contiene alcuni elementi null e non viene
   ottenuto nessun risultato di confronto vero, il risultato di <token>ANY</token>
   sarà null, non falso (ancora, presumendo un operatore di confronto rigoroso).
   Questo è conforme alle normali regole SQL per le combinazioni Booleane
   di valori null.
  </para>

  <para>
   <token>SOME</token> è un sinonimo di <token>ANY</token>.
  </para>
  </sect2>

  <sect2>
   <title><literal>ALL</literal> (array)</title>

<synopsis>
<replaceable>expression</replaceable> <replaceable>operator</replaceable> ALL (<replaceable>array expression</replaceable>)
</synopsis>

  <para>
   
    La parte destra è una espressione tra parentesi, che deve rendere un
   valore array.
   L'espressione a sinistra
   viene valutata e confrontata con ogni elemento dell'array usando
   l'<replaceable>operatore</replaceable> fornito, che deve rendere un risultato
   Booleano.
   Il risultato di <token>ALL</token> è <quote>true</quote> se tutti i confronti rendono vero
   (compreso il caso speciale in cui l'array ha zero elementi).
   Il risultato è <quote>false</quote> se viene trovato qualche risultato falso.
  </para>

  <para>
   Se l'espressione array rende un array null, il risultato di
   <token>ALL</token> sarà null. Se l'espressione nella parte sinistra rende null,
   il risultato di <token>ALL</token> è normalmente null (sebbene un operatore
   di confronto non-rigoroso potrebbe dare un risultato diverso).
   Inoltre, se l'array a destra contiene qualche elemento null nessun risultato falso
   viene ottenuto dal confronto, il risultato di <token>ALL</token>
   sarà null, non vero (ancora, presumendo un operatore di confronto rigoroso).
   Questo è conforme alle normali regole SQL per le combinazioni Booleane
   di valori null.
  </para>
  </sect2>

  <sect2 id="row-wise-comparison">
   <title>Confronto Row-wise</title>

<synopsis>
<replaceable>row_constructor</replaceable> <replaceable>operator</replaceable> <replaceable>row_constructor</replaceable>
</synopsis>

  <para>
   
    Ambedue le parti destra e sinistra sono costruttori di riga,
   come descritto dentro <xref linkend="sql-syntax-row-constructors" />.
   I due valori di riga devono avere lo stesso numero di campi.
   Ogni parte viene valutata e quindi confrontata row-wise.  I confronti di riga
   sono consentiti quando l'<replaceable>operatore</replaceable> è
   <literal>=</literal>,
   <literal>&lt;&gt;</literal>,
   <literal>&lt;</literal>,
   <literal>&lt;=</literal>,
   <literal>&gt;</literal> o
   <literal>&gt;=</literal>,
   o ha una semantica simile ad uno di questi. (Per chiarire, un operatore
   può essere un operatore di confronto di riga se è un membro di una classe di
   operatori B-Tree, oppure è la negazione del membro <literal>=</literal> di una classe di operatori
   B-Tree).
  </para>

  <para>
   
    I casi <literal>=</literal> e <literal>&lt;&gt;</literal> lavorano in modo leggermente diverso
   dagli altri. Due righe vengono considerate
   uguali se tutti i loro membri corrispondenti sono non-null ed uguali; le righe
   sono non uguali se alcuni membri corrispondenti sono non-null e non-uguali;
   altrimenti il risultato del confronto di riga è sconosciuto (null).
  </para>

  <para>
   Per i casi <literal>&lt;</literal>, <literal>&lt;=</literal>, <literal>&gt;</literal> e
   <literal>&gt;=</literal>, gli elementi di riga sono confrontati da sinistra a destra,
   fermandosi non appene viene trovata una coppia di elementi non uguali o null.
   Se ognuno degli elementi della coppia è null, il risultato del confronto
   di riga è sconosciuto (null); altrimenti il confronto di questa coppia
   di elementi determina il risultato. Per esempio,
   <literal>ROW(1,2,NULL) &lt; ROW(1,3,0)</literal>
   rende vero, non null, perchè il terzo paio di elementi non viene
   considerato.
  </para>

  <note>
   <para>
    Prima di <productname>PostgreSQL</productname> 8.2, i casi
    <literal>&lt;</literal>, <literal>&lt;=</literal>, 
    <literal>&gt;</literal> e <literal>&gt;=</literal>
    non erano gestiti per le specifiche SQL. Un confronto tipo
    <literal>ROW(a,b) &lt; ROW(c,d)</literal>
    era implementato come
    <literal>a &lt; c AND b &lt; d</literal>
    mentre il comportamento corretto è equivalente a
    <literal>a &lt; c OR (a = c AND b &lt; d)</literal>.
   </para>
  </note>

<synopsis>
<replaceable>row_constructor</replaceable> IS DISTINCT FROM <replaceable>row_constructor</replaceable>
</synopsis>

  <para>
   Questo costrutto è simile al confronto di riga <literal>&lt;&gt;</literal>,
   ma esso non rende null per valori di input null. Invece, qualsiasi valore null viene
   considerato non uguale a (distinct from) ogni valore non-null, e ogni due
   null sono considerati uguali (not distinct). Per cui, il risultato sarà
   sempre true o false, mai null.
  </para>

<synopsis>
<replaceable>row_constructor</replaceable> IS NOT DISTINCT FROM <replaceable>row_constructor</replaceable>
</synopsis>

  <para>

   Questo costrutto è simile al confronto di riga <literal>=</literal>,
   ma esso non rende null per ingressi null. Invece ogni valore null viene considerato
   non uguale a (distinct from) ogni valore non null, e due valori 
   null sono considerati uguali (not distinct). Per cui il risultato sarà sempre
   vero o falso, mai null.
  </para>

  <note>
   <para>
        La specifica SQL richiede che il confronto row-wise renda NULL se 
        il risultato dipende dal confronto di valori NULL o di un NULL e un non-NULL.
       <productname>PostgreSQL</productname> fa questo solo quando si confrontano i risultati
        di 2 costruttori di riga o si confronta un costruttore di riga con l'output
        di una sottoquery (come in <xref linkend="functions-subquery"/>).
        In altri contesti dove due valori di tipi-composti sono comparati, due
        valori NULL sono considerati uguali, ue un NULL è considerato più grande 
        di un non-NULL. 
        Questo è necessario per avere comportamenti di ordinamento e 
        indicizzazione consistenti per i tipi composti.
   </para>
  </note>

  </sect2>
 </sect1>

 <sect1 id="functions-srf">
  <title>Funzioni che ritornano insiemi</title>

  <indexterm zone="functions-srf">
   <primary>funzioni che ritornano insiemi</primary>
   <secondary>funzioni</secondary>
  </indexterm>

  <indexterm>
   <primary>generate_series</primary>
  </indexterm>

  <para>
   Questa sezione descrive le funzioni che possono restituire più di una riga.
   Attualmente le sole funzioni in questa classe sono le funzioni di generazione serie,
   come specificato dettagliatamente in <xref linkend="functions-srf-series" /> 
    e <xref linkend="functions-srf-subscripts"/>.
  </para>

  <table id="functions-srf-series">
   <title>Funzioni di generazione serie</title>
   <tgroup cols="4">
    <thead>
     <row>
      <entry>Funzione</entry>
      <entry>Tipo argomento</entry>
      <entry>Tipo restituito</entry>
      <entry>Descrizione</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal><function>generate_series(<parameter>start</parameter>, <parameter>stop</parameter>)</function></literal></entry>
      <entry><type>int</type> o <type>bigint</type></entry>
      <entry><type>setof int</type> o <type>setof bigint</type> (stesso tipo dell'argomento)</entry>
      <entry>
       Genera una serie di valori , da <parameter>start</parameter> 
        a <parameter>stop</parameter>
        con dimensione del passo di uno
      </entry>
     </row>

     <row>
      <entry><literal><function>generate_series(<parameter>start</parameter>, 
    <parameter>stop</parameter>, <parameter>step</parameter>)</function></literal></entry>
      <entry><type>int</type> o <type>bigint</type></entry>
      <entry><type>setof int</type> o <type>setof bigint</type> 
        (stesso tipo dell'argomento)</entry>
      <entry>
        Genera una serie di valori, 
        da <parameter>start</parameter> a <parameter>stop</parameter>
        con dimensione del passo <parameter>step</parameter>
      </entry>
     </row>

     <row>
      <entry><literal><function>generate_series(<parameter>start</parameter>, 
        <parameter>stop</parameter>, <parameter>step</parameter> 
        <type>interval</type>)</function></literal></entry>
        <entry><type>timestamp</type> o <type>timestamp with time zone</type></entry>
        <entry><type>setof timestamp</type> o <type>setof timestamp with 
        time zone</type> (tesso tipo dell'argomento</entry>
      <entry>
       Genera una serie di valori, 
        da <parameter>start</parameter> a <parameter>stop</parameter>
        con dimensione del passo <parameter>step</parameter>
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
   
    Quando <parameter>step</parameter> è positivo, vengono restituite zero righe se
    <parameter>start</parameter> è maggiore di <parameter>stop</parameter>.
    Al contrario, quando <parameter>step</parameter> è negativo, zero righe sono
    restituite se <parameter>start</parameter> è minore di <parameter>stop</parameter>.
    Vengono restituite zero righe anche per input <literal>NULL</literal>. Un valore zero
    per <parameter>step</parameter> è considerato errore. Seguono alcuni esempi:
<programlisting>
SELECT * FROM generate_series(2,4);
 generate_series
-----------------
               2
               3
               4
(3 rows)

SELECT * FROM generate_series(5,1,-2);
 generate_series
-----------------
               5
               3
               1
(3 rows)

SELECT * FROM generate_series(4,3);
 generate_series
-----------------
(0 rows)

-- questo esempip fa uso dell'operatore data-più-intero 
SELECT current_date + s.a AS dates FROM generate_series(0,14,7) AS s(a);
   dates
------------
 2004-02-05
 2004-02-12
 2004-02-19
(3 rows)

SELECT * FROM generate_series('2008-03-01 00:00'::timestamp,
                              '2008-03-04 12:00', '10 hours');
   generate_series   
---------------------
 2008-03-01 00:00:00
 2008-03-01 10:00:00
 2008-03-01 20:00:00
 2008-03-02 06:00:00
 2008-03-02 16:00:00
 2008-03-03 02:00:00
 2008-03-03 12:00:00
 2008-03-03 22:00:00
 2008-03-04 08:00:00
(9 rows)
</programlisting>
  </para>

  <table id="functions-srf-subscripts">
   <title>Subscript Generating Functions</title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>Funzione</entry>
      <entry>Tipo di ritorno</entry>
      <entry>Descrizione</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal><function>generate_subscripts(<parameter>array anyarray</parameter>, 
        <parameter>dim int</parameter>)</function></literal></entry>
        <entry><type>setof int</type></entry>
      <entry>
            Genera una serie comprendente i sottoscript dell'array fornito.
      </entry>
     </row>

     <row>
      <entry><literal><function>generate_subscripts(<parameter>array anyarray</parameter>, 
        <parameter>dim int</parameter>, 
        <parameter>reverse boolean</parameter>)</function></literal></entry>
      <entry><type>setof int</type></entry>
      <entry>
            Genera una serie contenente i sottoscript dell'array fornito. Quando 
            <parameter>reverse</parameter> è true, la serie viene restituita con
            ordine invertito.
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <indexterm>
   <primary>generate_subscripts</primary>
  </indexterm>

  <para>
        <function>generate_subscripts</function> è una funzione utile che genera
        l'insieme di sottoscript validi per la dimensione specificata dell'array
        fornito.
        Per gli array che non hanno la dimensione richiesta o per array NULL, 
        sono ritornate zero righe
        (ma per array NULL sono ritornati i sottoscript validi per gli elementi).
        Seguono alcuni esempi:
<programlisting>
-- uso di base
SELECT generate_subscripts('{NULL,1,NULL,2}'::int[], 1) AS s;
 s 
---
 1
 2
 3
 4
(4 rows)

-- presenting an array, the subscript and the subscripted
-- value requires a subquery
SELECT * FROM arrays;
         a          
--------------------
 {-1,-2}
 {100,200,300}
(2 rows)

SELECT a AS array, s AS subscript, a[s] AS value
FROM (SELECT generate_subscripts(a, 1) AS s, a FROM arrays) foo;
     array     | subscript | value
---------------+-----------+-------
 {-1,-2}       |         1 |    -1
 {-1,-2}       |         2 |    -2
 {100,200,300} |         1 |   100
 {100,200,300} |         2 |   200
 {100,200,300} |         3 |   300
(5 rows)

-- unnest a 2D array
CREATE OR REPLACE FUNCTION unnest2(anyarray)
RETURNS SETOF anyelement AS $$
select $1[i][j] 
   from generate_subscripts($1,1) g1(i),
        generate_subscripts($1,2) g2(j);
$$ LANGUAGE sql IMMUTABLE;
CREATE FUNCTION
postgres=# SELECT * FROM unnest2(ARRAY[[1,2],[3,4]]);
 unnest2 
---------
       1
       2
       3
       4
(4 rows)
</programlisting>
  </para>

 </sect1>


 <sect1 id="functions-info">
  <title>Funzioni per informazioni di sistema</title>

  <para>
   La <xref linkend="functions-info-session-table" /> mostra diverse
   funzioni che estraggono informazioni di sessione e di sistema.
  </para>

  <para>
   In aggiunta alle funzioni elencate in questa sezione, ci sono un certo numero di
   funzioni relative alle statistiche di sistema che forniscono informazioni di
   sistema. Vedere <xref linkend="monitoring-stats-views" /> per ulteriori
   informazioni.
  </para>

   <table id="functions-info-session-table">
  <title>Funzioni per informazioni di sessione</title>
    <tgroup cols="3">
     <thead>
      <row><entry>Nome</entry> <entry>Tipo di ritorno</entry> <entry>Descrizione</entry></row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>current_catalog</function></literal></entry>
       <entry><type>name</type></entry>
       <entry>nome del database corrente 
        (chiamato <quote>catalog</quote> nello standard SQL)</entry>
      </row>

      <row>
       <entry><literal><function>current_database()</function></literal></entry>
       <entry><type>name</type></entry>
       <entry>nome del database corrente</entry>
      </row>

      <row>
       <entry><literal><function>current_schema</function>[()]</literal></entry>
       <entry><type>name</type></entry>
       <entry>nome dello schema corrente</entry>
      </row>

      <row>
       <entry><literal><function>current_schemas(<type>boolean</type>)</function></literal></entry>
       <entry><type>name[]</type></entry>
       <entry>nomi degli schemi nel percorso di ricerca, includendo opzionalmente includendo schemi</entry>
      </row>

      <row>
       <entry><literal><function>current_user</function></literal></entry>
       <entry><type>name</type></entry>
       <entry>nome utente dell'attuale contesto in esecuzione</entry>
      </row>

      <row>
       <entry><literal><function>current_query()</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>testo della query attualmente in esecuzione, come inviata dal client,
        (potrebbe contenere più di una istruzione)</entry>
      </row>

      <row>
       <!-- See also the entry for this in monitoring.sgml -->
       <entry><literal><function>pg_backend_pid()</function></literal></entry>
       <entry><type>int</type></entry>
       <entry>
            ID di processo del server per la sessione corrente
       </entry>
      </row>

      <row>
       <entry><literal><function>pg_listening_channels()</function></literal></entry>
       <entry><type>setof text</type></entry>
       <entry>nomi dei canali sui quali la sessione corrente sta ascoltando</entry>
      </row>

      <row>
       <entry><literal><function>inet_client_addr()</function></literal></entry>
       <entry><type>inet</type></entry>
       <entry>indirizzo della connessione remote</entry>
      </row>

      <row>
       <entry><literal><function>inet_client_port()</function></literal></entry>
       <entry><type>int</type></entry>
       <entry>porta della connessione remota</entry>
      </row>

      <row>
       <entry><literal><function>inet_server_addr()</function></literal></entry>
       <entry><type>inet</type></entry>
       <entry>indirizzo della connessione locale</entry>
      </row>

      <row>
       <entry><literal><function>inet_server_port()</function></literal></entry>
       <entry><type>int</type></entry>
       <entry>porta della connessione locale</entry>
      </row>

      <row>
       <entry><literal><function>pg_my_temp_schema()</function></literal></entry>
       <entry><type>oid</type></entry>
       <entry>OID dello schema temporaneo della sessione, o 0 se non presente</entry>
      </row>

      <row>
       <entry><literal><function>pg_is_other_temp_schema(<type>oid</type>)</function></literal></entry>
       <entry><type>boolean</type></entry>
       <entry>lo schema è lo schema temporaneo di un'altra sessione?</entry>
      </row>

      <row>
       <entry><literal><function>pg_postmaster_start_time()</function></literal></entry>
       <entry><type>timestamp with time zone</type></entry>
       <entry>orario di avvio del server</entry>
      </row>

      <row>
       <entry><literal><function>pg_conf_load_time()</function></literal></entry>
       <entry><type>timestamp with time zone</type></entry>
       <entry>tempo di caricamento della configurazione</entry>
      </row>

      <row>
       <entry><literal><function>session_user</function></literal></entry>
       <entry><type>name</type></entry>
       <entry>nome utente della sessione</entry>
      </row>

      <row>
       <entry><literal><function>user</function></literal></entry>
       <entry><type>name</type></entry>
       <entry>equivalente a <function>current_user</function></entry>
      </row>

      <row>
       <entry><literal><function>version()</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>informazioni sulla versione di <productname>PostgreSQL</productname></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <note>
    <para>
     <function>current_catalog</function>, <function>current_schema</function>,
     <function>current_user</function>, <function>session_user</function>,
     e <function>user</function> hanno stati sintattici speciali 
     in <acronym>SQL</acronym>: devono essere chiamati senza parentesi in fondo.
     (In PostgreSQL, le parentesi possono essere usati opzionalmente con
     <function>current_schema</function>, ma non con le altre.)
    </para>
   </note>

   <indexterm>
    <primary>utente</primary>
    <secondary>corrente</secondary>
   </indexterm>

   <indexterm>
    <primary>schema</primary>
    <secondary>corrente</secondary>
   </indexterm>

   <indexterm>
    <primary>percorso di ricerca</primary>
    <secondary>corrente</secondary>
   </indexterm>

   <indexterm>
    <primary>current_catalog</primary>
   </indexterm>

   <indexterm>
    <primary>current_database</primary>
   </indexterm>

   <indexterm>
    <primary>current_schema</primary>
   </indexterm>

   <indexterm>
    <primary>current_user</primary>
   </indexterm>

   <para>
    Il <function>session_user</function> è normalmente l'utente che ha iniziato
    la connessione corrente di database; ma il superuser può cambiare questa impostazione
    con <xref linkend="sql-set-session-authorization" endterm="sql-set-session-authorization-title" />.
    Il <function>current_user</function> è l'identificatore dell'utente
    che è applicabile per il controllo dei permessi. Normalmente, esso è uguale
    all'utente di sessione,ma può essere cambiato con
    <xref linkend="sql-set-role" endterm="sql-set-role-title" />.
    Esso può anche essere cambiato durante l'esecuzione di
    funzioni con l'attributo <literal>SECURITY DEFINER</literal>.
    Nel gergo Unix, l'utente di sessione è identificato come <quote>real user</quote> e
    l'utente corrente è identificato come <quote>effective user</quote>.
   </para>

   <para>
    
    La funzione <function>current_schema</function> restituisce il nome dello schema che è
    in testa al percorso di ricerca (o un valore null se il percorso di ricerca è
    vuoto). Questo è lo schema che sarà usato per ogni tabella o ogni altro
    oggetto chiamato che è stato creato senza specificare uno schema.
    La funzione <function>current_schemas(booleana)</function> 
    restituirà un array dei nomi di tutti
    gli schemi al momento presenti nel percorso di ricerca. 
    L'opzione Booleana determina se gli
    schemi di sistema implicitamente inclusi quale 
    <literal>pg_catalog</literal> sono inclusi nel percorso di
    ricerca restituito oppure no.
   </para>

   <note>
    <para>
     Il percorso di ricerca può essere alterato in fase di esecuzione. Il comando è:
<programlisting>
SET search_path TO <replaceable>schema</replaceable> <optional>, <replaceable>schema</replaceable>, ...</optional>
</programlisting>
    </para>
   </note>

   <indexterm>
    <primary>pg_listening_channels</primary>
   </indexterm>

   <para>
        <function>pg_listening_channels</function> restituisce un insieme di nomi di canali
        sui quali la sessione corrente sta ascoltando. Vedere <xref
        linkend="sql-listen"/> per maggiori informazioni.
   </para>

   <indexterm>
    <primary>inet_client_addr</primary>
   </indexterm>

   <indexterm>
    <primary>inet_client_port</primary>
   </indexterm>

   <indexterm>
    <primary>inet_server_addr</primary>
   </indexterm>

   <indexterm>
    <primary>inet_server_port</primary>
   </indexterm>

   <para>
     La funzione <function>inet_client_addr</function> restituisce l'indirizzo IP del
     client corrente, e <function>inet_client_port</function> restituisce il
     numero della porta.
     La funzione <function>inet_server_addr</function> restituisce l'indirizzo IP col quale
     il server ha accettato la connessione corrente, e
     <function>inet_server_port</function> restituisce il numero della porta.
     Tutte queste funzioni restituiscono null se la connessione corrente avviene tramite un
     socket di dominio Unix.
   </para>

   <indexterm>
    <primary>pg_my_temp_schema</primary>
   </indexterm>

   <indexterm>
    <primary>pg_is_other_temp_schema</primary>
   </indexterm>

   <para>
    La funzione <function>pg_my_temp_schema</function> restituisce l'OID dello
    schema temporaneo della sessione corrente, oppure 0 se non non c'è (perchè esso non ha
    creato una tabella temporanea).
    La funzione <function>pg_is_other_temp_schema</function> restituisce vero se
    l'OID fornito è l'OID di un altro schema temporaneo di sessione.
    (Questo può essere utile, per esempio, per escludere altre tabelle temporanee di sessione
    da un catalogo visualizzato).
   </para>

   <indexterm>
    <primary>pg_postmaster_start_time</primary>
   </indexterm>

   <para>
     La funzione <function>pg_postmaster_start_time</function> restituisce il
     <type>timestamp with time zone</type> quando il server
     viene è stato avviato.
   </para>

   <indexterm>
    <primary>pg_conf_load_time</primary>
   </indexterm>

   <para>
        <function>pg_conf_load_time</function> restituisce il
        <type>timestamp with time zone</type> di quando sono stati
        caricati i file di configurazione del server.
        (Se la sessione corrente era in vita a quel tempo, questo è l'orario
        in cui la sessione stessa ha ri-letto i file di configurazione, così
        la lettura cambierà un poco in differenti sessioni. Altrimenti 
        è l'orario in cui il processo postmaster ha ri-letto i file di configurazione.)
   </para>

   <indexterm>
    <primary>version</primary>
   </indexterm>

   <para>
    La funzione <function>version</function> restituisce una stringa che descrive
    la versione del server di <productname>PostgreSQL</productname>.
   </para>

  <indexterm>
   <primary>privilegio</primary>
   <secondary>interrogazione</secondary>
  </indexterm>

  <para>
   La <xref linkend="functions-info-access-table" /> elenca le funzioni che consentono
   all'utente di interrogare programmaticamente i privilegi di accesso degli oggetti.
   Vedere <xref linkend="ddl-priv" /> per ulteriori informazioni circa i
   privilegi.
  </para>

   <table id="functions-info-access-table">
    <title>Funzioni di interrogazione privilegi di accesso</title>
    <tgroup cols="3">
     <thead>
      <row><entry>Nome</entry> <entry>Tipo di ritorno</entry> <entry>Descrizione</entry></row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>has_any_column_privilege</function>(<parameter>user</parameter>,
                    <parameter>table</parameter>,
                    <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente abbia il privilegio per qualsiasi colonna della tabella</entry>
      </row>
      <row>
       <entry><literal><function>has_any_column_privilege</function>(<parameter>table</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente corrente abbia il privilegio per qualsiasi colonna della tabella</entry>
      </row>
      <row>
       <entry><literal><function>has_column_privilege</function>(<parameter>user</parameter>,
                                  <parameter>table</parameter>,
                                  <parameter>column</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente abbia privilegio sulla colonna</entry>
      </row>
      <row>
       <entry><literal><function>has_column_privilege</function>(<parameter>table</parameter>,
                                  <parameter>column</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente corrente abbia privilegio sulla colonna</entry>
      </row>
      <row>
       <entry><literal><function>has_database_privilege</function>(<parameter>user</parameter>,
                                  <parameter>database</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>does user have privilege for database</entry>
       <entry>verifica che l'utente abbia privilegio per il database</entry>
      </row>
      <row>
       <entry><literal><function>has_database_privilege</function>(<parameter>database</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente corrente abbia privilegio per il database</entry>
      </row>
      <row>
       <entry><literal><function>has_foreign_data_wrapper_privilege</function>(<parameter>user</parameter>,
                                  <parameter>fdw</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry><note><para>Nota per il revisore: non ho capito</para></note> does user have privilege for foreign-data wrapper</entry>
      </row>
      <row>
       <entry><literal><function>has_foreign_data_wrapper_privilege</function>(<parameter>fdw</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>does current user have privilege for foreign-data wrapper</entry>
      </row>
      <row>
       <entry><literal><function>has_function_privilege</function>(<parameter>user</parameter>,
                                  <parameter>function</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente abbia privilegio per la funzione</entry>
      </row>
      <row>
       <entry><literal><function>has_function_privilege</function>(<parameter>function</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente corrente abbia privilegio per la funzione</entry>
      </row>
      <row>
       <entry><literal><function>has_language_privilege</function>(<parameter>user</parameter>,
                                  <parameter>language</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente abbia privilegio per il linguaggio</entry>
      </row>
      <row>
       <entry><literal><function>has_language_privilege</function>(<parameter>language</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente corrente abbia privilegio per il linguaggio</entry>
      </row>
      <row>
       <entry><literal><function>has_schema_privilege</function>(<parameter>user</parameter>,
                                  <parameter>schema</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>does user have privilege for schema</entry>
      </row>
      <row>
       <entry><literal><function>has_schema_privilege</function>(<parameter>schema</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente corrente abbia privilegio per lo schema</entry>
      </row>
      <row>
       <entry><literal><function>has_server_privilege</function>(<parameter>user</parameter>,
                                  <parameter>server</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>does user have privilege for foreign server</entry>
      </row>
      <row>
       <entry><literal><function>has_server_privilege</function>(<parameter>server</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>does current user have privilege for foreign server</entry>
      </row>
      <row>
       <entry><literal><function>has_sequence_privilege</function>(<parameter>user</parameter>,
                                  <parameter>sequence</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente abbia privilegio per la sequenza</entry>
      </row>
      <row>
       <entry><literal><function>has_sequence_privilege</function>(<parameter>sequence</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente corrente abbia privilegio per la sequenza</entry>
      </row>
      <row>
       <entry><literal><function>has_table_privilege</function>(<parameter>user</parameter>,
                                  <parameter>table</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente abbia privilegio per la tabella</entry>
      </row>
      <row>
       <entry><literal><function>has_table_privilege</function>(<parameter>table</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente corrente abbia privilegio per la tabella</entry>
      </row>
      <row>
       <entry><literal><function>has_tablespace_privilege</function>(<parameter>user</parameter>,
                                  <parameter>tablespace</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente abbia privilegio per il tablespace</entry>
      </row>
      <row>
       <entry><literal><function>has_tablespace_privilege</function>(<parameter>tablespace</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente corrente abbia privilegio per il tablespace</entry>
      </row>
      <row>
       <entry><literal><function>pg_has_role</function>(<parameter>user</parameter>,
                                  <parameter>role</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente abbia il privilegio per i role</entry>
    
      </row>
      <row>
       <entry><literal><function>pg_has_role</function>(<parameter>role</parameter>,
                                  <parameter>privilege</parameter>)</literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>verifica che l'utente corrente abbia il privilegio per i role</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <indexterm>
    <primary>has_any_column_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_column_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_database_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_function_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_foreign_data_wrapper_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_language_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_schema_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_server_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_sequence_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_table_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>has_tablespace_privilege</primary>
   </indexterm>
   <indexterm>
    <primary>pg_has_role</primary>
   </indexterm>

   <para>
    La funzione <function>has_table_privilege</function> controlla se un utente
    può accedere ad una tabella in un particolare modo. L'utente può essere
    specificato dal nome o dall'OID
    (<literal>pg_authid.oid</literal>), oppure se l'argomento è
    omesso
    è assunto essere <function>current_user</function>. La tabella può essere specificata
    dal nome o dall'OID. (Per cui, ci sono attualmente sei varianti di
    <function>has_table_privilege</function>, che possono essere distinti dal
    numero e dal tipo dei loro argomenti). Quando specificato dal nome,
    il nome può essere qualificato con schema se necessario.
    Il tipo di privilegio di accesso desiderato
    è specificato da una stringa di testo, che deve valutare ad uno dei
    valori <literal>SELECT</literal>, <literal>INSERT</literal>,
    <literal>UPDATE</literal>, <literal>DELETE</literal>,
    <literal>REFERENCES</literal>, o <literal>TRIGGER</literal>.
    (Il carattere della stringa può essere indifferentemente maiuscolo o minuscolo).
    Un esempio è:
<programlisting>
SELECT has_table_privilege('myschema.mytable', 'select');
SELECT has_table_privilege('joe', 'mytable', 'INSERT, SELECT WITH GRANT OPTION');
</programlisting>
   </para>

   <para>
        La funzione <function>has_sequence_privilege</function> controlla se un utente 
        può accedere ad una sequenza in un modo particolare. Le possibilità per i suoi
        argomenti sono analoghe a <function>has_table_privilege</function>.
        Il tipo di privilegio d'accesso desiderato deve essere uno tra
        <literal>USAGE</literal>,
        <literal>SELECT</literal>, o
        <literal>UPDATE</literal>.
   </para>

   <para>
        <function>has_any_column_privilege</function> controlla se un utente può
        accedere una qualsiasi colonna in un modo particolare.
        I suoi argomenti sono analoghi alla <function>has_table_privilege</function>,
        ad eccezione che il tipo di accesso desiderato deve essere una combinazione di
        <literal>SELECT</literal>,
        <literal>INSERT</literal>,
        <literal>UPDATE</literal>, o
        <literal>REFERENCES</literal>.  
        Notare che avere qualcuno di questi privilegi
        a livello di tabella implicitamente lo garantisce per ogni colonna della tabella,
        così <function>has_any_column_privilege</function> restituirà sempre 
        <literal>true</literal> se lo fa <function>has_table_privilege</function> per gli stessi
        argomenti. Ma <function>has_any_column_privilege</function> ha successo anche se 
        c'è una concessione di privilegio a livello colonna per almeno una colonna.
   </para>

   <para>
        <function>has_column_privilege</function> controlla se un utente
        poò accedere a una colonna in un modo particolare.
        I suoi argomenti sono analoghi alla <function>has_table_privilege</function>,
        con l'aggiunta che la colonna può essere specificata sia dal nome
        che dal numero dell'attributo.

            Il tipo di privilegio di accesso desiderato deve essere una qualche combinazione di
    <literal>SELECT</literal>,
    <literal>INSERT</literal>,
    <literal>UPDATE</literal>, or
    <literal>REFERENCES</literal>.  
        Notare che avere qualcuno di questi privilegi
        a livello di tabella implicitamente lo garantisce per ogni colonna della tabella.
   </para>

   <para>
    La <function>has_database_privilege</function> controlla se l'utente può
    accedere al database in un particolare modo. Le possibilità per i suoi
    argomenti sono analoghe a quelle della funzione <function>has_table_privilege</function>.
    Il tipo di privilegio di accesso desiderato deve essere
    <literal>CREATE</literal>,
    <literal>CONNECT</literal>,
    <literal>TEMPORARY</literal>, o
    <literal>TEMP</literal> (che è equivalente a
    <literal>TEMPORARY</literal>).
   </para>

   <para>
    La funzione <function>has_function_privilege</function> controlla se un utente
    può accedere ad una funzione in un particolare modo. Le possibilità per i suoi
    argomenti sono analoghe a quelle della funzione <function>has_table_privilege</function>.
    Quando si specifica una funzione da una stringa di accesso anzichè da un OID,
    l'input consentito è lo stesso di quello per il tipo dato <type>regprocedure</type>
    (consultare <xref linkend="datatype-oid" />).
    IL tipo di privilegio di accesso desiderato deve valutare
    <literal>EXECUTE</literal>.
    Un esempio è:
<programlisting>
SELECT has_function_privilege('joeuser', 'myfunc(int, text)', 'execute');
</programlisting>
   </para>

   <para>
    <function>has_foreign_data_wrapper_privilege</function> checks whether a user
    can access a foreign-data wrapper in a particular way.
    Its argument possibilities
    are analogous to <function>has_table_privilege</function>.
    The desired access privilege type must evaluate to
    <literal>USAGE</literal>.
   </para>

   <para>
    La funzione <function>has_language_privilege</function> controlla se un utente
    può accedere ad un linguaggio procedurale in un particolare modo. Le possibilità
    per i suoi argomenti sono analoghe a quelle della funzione <function>has_table_privilege</function>.
    Il tipo di privilegio di accesso desiderato deve valutare
    <literal>USAGE</literal>.
   </para>

   <para>
    La funzione <function>has_schema_privilege</function> controlla se un utente
    può accedere ad uno schema in un particolare modo. Le possibilità per
    i suoi argomenti sono analoghe a quelle della funzione <function>has_table_privilege</function>.
     Il tipo di privilegio di accesso desiderato deve valutare
    <literal>CREATE</literal> o
    <literal>USAGE</literal>.
   </para>

   <para>
        <function>has_server_privilege</function> controlla se un utente 
        può accedere un server esterno in un particolare modo.
        I suoi argomenti sono
        analoghi a quelli di <function>has_table_privilege</function>.
        Il tipo di privilegio di accesso desiderato deve valutare
    <literal>USAGE</literal>.
   </para>

   <para>
    La funzione <function>has_tablespace_privilege</function> controlla se un utente
    può accedere ad un tablespace in un particolare modo. Le possibilità per i suoi
    argomenti sono analoghe a quelle della funzione <function>has_table_privilege</function>.
    Il tipo di privilegio di accesso desiderato deve valutare
    <literal>CREATE</literal>.
   </para>

   <para>
    La funzione <function>pg_has_role</function> controlla se un utente
    può accedere ad un role in un particolare modo. Le possibilità per i suoi
    argomenti sono analoghe a quelle della funzione <function>has_table_privilege</function>.
    Il tipo di privilegio di accesso desiderato deve valutare
    <literal>MEMBER</literal> o
    <literal>USAGE</literal>.
    <literal>MEMBER</literal> denota l'appartenenza diretta o indiretta
    nel ruolo (ovvero, il diritto di fare <command>SET ROLE</command>), mentre
    <literal>USAGE</literal> denota se i privilegi del ruolo sono
    immediatamente disponibile senza fare <command>SET ROLE</command>.
   </para>

  <para>
   La <xref linkend="functions-info-schema-table" /> mostra le funzioni che
   determinano se un certo oggetto è <firstterm>visibile</firstterm> nel
   percorso di ricerca del corrente schema.
   Per esempio, una tabella è detta essere visibile se lo schema che
   la contiene è nel percorso di ricerca e nessuna tabella con lo stesso
   nome compare nel percorso di ricerca. Questo è equivalente all'asserzione
   che la tabella può essere referenziata dal nome senza una esplicita
   qualificazione di schema. Per elencare i nomi di tutte le tabelle visibili:
<programlisting>
SELECT relname FROM pg_class WHERE pg_table_is_visible(oid);
</programlisting>
  </para>

   <table id="functions-info-schema-table">
    <title>Funzioni di richiesta informazioni sulla visibilità dello schema</title>
    <tgroup cols="3">
     <thead>
      <row><entry>Nome</entry> <entry>Tipo restituito</entry> <entry>Descrizione</entry></row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>pg_conversion_is_visible(<parameter>conversion_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>è una conversione visibile nel percorso di ricerca</entry>
      </row>
      <row>
       <entry><literal><function>pg_function_is_visible(<parameter>function_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>è una funzione visibile nel percorso di ricerca</entry>
      </row>
      <row>
       <entry><literal><function>pg_operator_is_visible(<parameter>operator_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>è un operatore visibile nel percorso di ricerca</entry>
      </row>
      <row>
       <entry><literal><function>pg_opclass_is_visible(<parameter>opclass_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>è una classe operatore visibile nel percorso di ricerca</entry>
      </row>
      <row>
       <entry><literal><function>pg_table_is_visible(<parameter>table_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>è una tabella visibile nel percorso di ricerca</entry>
      </row>
      <row>
       <entry><literal><function>pg_ts_config_is_visible(<parameter>config_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>è una configurazione di ricerca di testo visibile nel percorso di ricerca</entry>
      </row>
      <row>
       <entry><literal><function>pg_ts_dict_is_visible(<parameter>dict_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>è un dizionario di ricerca di testo visibile nel percorso di ricerca</entry>
      </row>
      <row>
       <entry><literal><function>pg_ts_parser_is_visible(<parameter>parser_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>è un parse di ricerca teso visible nel percorso di ricerca</entry>
      </row>
      <row>
       <entry><literal><function>pg_ts_template_is_visible(<parameter>template_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>è un modello di ricerca di testo visibile nel percorso di ricerca</entry>
      </row>
      <row>
       <entry><literal><function>pg_type_is_visible(<parameter>type_oid</parameter>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>è un tipo (o dominio) visibile nel percorso di ricerca</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <indexterm>
    <primary>pg_conversion_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_function_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_operator_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_opclass_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_table_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_ts_config_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_ts_dict_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_ts_parser_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_ts_template_is_visible</primary>
   </indexterm>
   <indexterm>
    <primary>pg_type_is_visible</primary>
   </indexterm>

   <para>
    Ogni funzione compie il controllo di visibilità per un tipo di oggetto di
    database. Notare che <function>pg_table_is_visible</function> può anche essere
    usata con le viste, gli indici e le sequenze; <function>pg_type_is_visible</function>
    può anche essere usata con i domini. Per le funzioni e gli operatori, un oggetto nel
    percorso di ricerca è visibile se non c'è un oggetto con lo stesso nome
    <emphasis>e tipo dato dell'argomento/i</emphasis> in precedenza nel percorso. 
    Per le classi di
    operatore, vengono considerati sia i nomi che i metodi di accesso collegati all'indice.
   </para>

   <para>
    
    Tutte queste funzioni richiedono l'OID dell'oggetto per identificare gli oggetti da
    controllare. Se si vuole controllare un oggetto dal nome, conviene usare
    i tipi alias per l'OID (<type>regclass</type>, <type>regtype</type>,
    <type>regprocedure</type>, <type>regoperator</type>, <type>regconfig</type>,
    o <type>regdictionary</type>),
    per esempio:
<programlisting>
SELECT pg_type_is_visible('myschema.widget'::regtype);
</programlisting>
    Notare che non avrebbe alcun senso controllare un nome non qualificato in
    questo modo &mdash; Se il nome non può essere riconosciuto per niente, 
    deve essere visibile.
   </para>

   <indexterm>
    <primary>format_type</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_keywords</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_viewdef</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_ruledef</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_functiondef</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_function_arguments</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_function_identity_arguments</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_function_result</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_indexdef</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_triggerdef</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_constraintdef</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_expr</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_userbyid</primary>
   </indexterm>

   <indexterm>
    <primary>pg_get_serial_sequence</primary>
   </indexterm>

   <indexterm>
    <primary>pg_tablespace_databases</primary>
   </indexterm>

   <indexterm>
    <primary>pg_typeof</primary>
   </indexterm>





  <para>
   <xref linkend="functions-info-catalog-table"/> elenca funzioni che
        estraggono informazioni dai cataloghi di sistema.
  </para>

   <table id="functions-info-catalog-table">
    <title>Funzioni di informazione su cataloghi di sistema</title>
    <tgroup cols="3">
     <thead>
      <row><entry>Nome</entry> <entry>Tipo di ritorno</entry> <entry>Descrizione</entry></row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>format_type(<parameter>type_oid</parameter>, <parameter>typemod</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>ottiene il nome SQL di un tipo di dato</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_keywords()</function></literal></entry>
       <entry><type>setof record</type></entry>
       <entry>ottiene l'elenco di parole chiave SQL e le loro categorie</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_constraintdef(<parameter>constraint_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>ottiene la definizione di un vincolo</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_constraintdef(<parameter>constraint_oid</parameter>, <parameter>pretty_bool</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>ottiene la definizione di un vincolo</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_expr(<parameter>pg_node_tree</parameter>, <parameter>relation_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>decompile internal form of an expression, assuming that any Vars
       in it refer to the relation indicated by the second parameter</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_expr(<parameter>pg_node_tree</parameter>, <parameter>relation_oid</parameter>, <parameter>pretty_bool</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>decompile internal form of an expression, assuming that any Vars
       in it refer to the relation indicated by the second parameter</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_functiondef(<parameter>func_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>ottiene la definizione di una funzione</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_function_arguments(<parameter>func_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>ottiene l'elenco degli argomenti di una funzione (con valori di default)</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_function_identity_arguments(<parameter>func_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>ottiene l'elenco degli argomenti per identificare una funzione (senza valori di default)</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_function_result(<parameter>func_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>ottiene la clausola <literal>RETURNS</literal> per la funzione</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_indexdef(<parameter>index_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>ottiene il comando <command>CREATE INDEX</command> per l'indice</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_indexdef(<parameter>index_oid</parameter>, <parameter>column_no</parameter>, <parameter>pretty_bool</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>get <command>CREATE INDEX</command> command for index,
       or definition of just one index column when
       <parameter>column_no</parameter> is not zero</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_ruledef(<parameter>rule_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>get <command>CREATE RULE</command> command for rule</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_ruledef(<parameter>rule_oid</parameter>, <parameter>pretty_bool</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>get <command>CREATE RULE</command> command for rule</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_serial_sequence(<parameter>table_name</parameter>, <parameter>column_name</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>get name of the sequence that a <type>serial</type> or <type>bigserial</type> column
       uses</entry>
      </row>
      <row>
       <entry><function>pg_get_triggerdef</function>(<parameter>trigger_oid</parameter>)</entry>
       <entry><type>text</type></entry>
       <entry>get <command>CREATE [ CONSTRAINT ] TRIGGER</command> command for trigger</entry>
      </row>
      <row>
       <entry><function>pg_get_triggerdef</function>(<parameter>trigger_oid</parameter>, <parameter>pretty_bool</parameter>)</entry>
       <entry><type>text</type></entry>
       <entry>ottiene un comando <command>CREATE [ CONSTRAINT ] TRIGGER</command> per il trigger</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_userbyid(<parameter>role_oid</parameter>)</function></literal></entry>
       <entry><type>name</type></entry>
       <entry>ottiene il nome di un ruolo dato l'OID</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_viewdef(<parameter>view_name</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>get underlying <command>SELECT</command> command for view (<emphasis>deprecated</emphasis>)</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_viewdef(<parameter>view_name</parameter>, <parameter>pretty_bool</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>get underlying <command>SELECT</command> command for view (<emphasis>deprecated</emphasis>)</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_viewdef(<parameter>view_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>get underlying <command>SELECT</command> command for view</entry>
      </row>
      <row>
       <entry><literal><function>pg_get_viewdef(<parameter>view_oid</parameter>, <parameter>pretty_bool</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>get underlying <command>SELECT</command> command for view</entry>
      </row>
      <row>
       <entry><literal><function>pg_tablespace_databases(<parameter>tablespace_oid</parameter>)</function></literal></entry>
       <entry><type>setof oid</type></entry>
       <entry>ottiene l'insieme degli OID che hanno oggetti nel tablespace</entry>
      </row>
      <row>
       <entry><literal><function>pg_typeof(<parameter>any</parameter>)</function></literal></entry>
       <entry><type>regtype</type></entry>
       <entry>ottiene il tipo di dato di qualsiasi valore</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
   La funzione <function>format_type</function> restituisce il nome SQL di un tipo dato che
   viene identificato tramite il suo OID di tipo e possibilmente un modificatore di tipo. Immettere NULL
   per il modificatore di tipo se non è conosciuto nessuno specifico modificatore.
  </para>

  <para>
        <function>pg_get_keywords</function> restituisce un insieme di record che descrivono
        le parole chiave SQL riconosciute dal server. La colonna <structfield>word</structfield>
        contiene la parola chiave. La colonna <structfield>catcode</structfield> contiene un 
        codice di categoria: <literal>U</literal> per non riservato, <literal>C</literal> per il nome della colonna,
        <literal>T</literal> per il nome del tipo o della funzione, o <literal>R</literal> per riservato.
        La colonna <structfield>catdesc</structfield> contiene una stringa possibilmente localizzata 
        che descrive la categoria.
  </para>

  <para>
   
    Le funzioni <function>pg_get_constraintdef</function>,
   <function>pg_get_indexdef</function>, <function>pg_get_ruledef</function>,
   e <function>pg_get_triggerdef</function>, ricostruiscono rispettivamente il
   comando di creazione per un vincolo, un indice, una regola, o un trigger. (Notare che questo
   è una ricostruzione decompilata, non il testo originale del comando).
   La funzione <function>pg_get_expr</function> decompila la forma interna di una
   espressione individuale, quale il valore preimpostato di una colonna. Essa può
   usata per esaminare il contenuto dei cataloghi di sistema.
   La funzione <function>pg_get_viewdef</function> ricostruisce la query <command>SELECT</command>
   che definisce una vista. Molte di queste funzioni hanno due varianti, una delle quali
   può opzionalmente può fornire il risultato in <quote>pretty-print</quote>
   (bella copia). Il formato stampato in pretty-print è più leggibile,
   ma il formato predefinito è più adatto ad essere interpretato nello stesso
   modo dalle future versioni di <productname>PostgreSQL</productname>; 
    Evitare di usare l'uscita pretty-print
   per scopi di dump. Passare <literal>false</literal> 
    come parametro per pretty-print produce
   lo stesso risultato della variante senza il parametro.
  </para>

  <para>
        <function>pg_get_functiondef</function> restituisce un'istruzione completa 
        <command>CREATE OR REPLACE FUNCTION</command> per una funzione.
        <function>pg_get_function_arguments</function> ritorna l'elenco degli argomenti
        di una funzione, nella forma in cui dovrebbe apparire all'interno di 
        <command>CREATE FUNCTION</command>.
        <function>pg_get_function_result</function> similmente restiruisce 
        la clausola <literal>RETURNS</literal>  appropriata per la funzione.
        <function>pg_get_function_identity_arguments</function> ritorna l'elenco di 
        argomenti necessaria identificare una funzione, nella forma
        in cui dovrebbe apparire all'interno di <command>ALTER FUNCTION</command>,
        per esempio. Questa forma omette valori di default.
  </para>

  <para>
   
    La funzione <function>pg_get_serial_sequence</function> restituisce il nome della
   sequenza associata con una colonna, o NULL se nessuna sequenza è associata
   con la colonna. Il primo parametro in input è una tabella nominata con lo
   schema facoltativo, e il secondo parametro è un nome di colonna. Poichè
   il primo parametro è potenzialmente uno schema e una tabella, esso non viene
   trattato come un identificatore tra doppi apici, il che significa che è minuscolo
   per impostazione predefinita, mentre il secondo parametro, che è un nome di colonna,
   viene trattato come tra doppi apici e conserva il suo formato maiuscolo o minuscolo. La
   funzione restituisce un valore formattato adeguatamente per passarlo alla funzione di
   manipolazione sequenze (consultare <xref linkend="functions-sequence"/>). 
    Questa associazione
    può essere modificata o rimossa con 
    <command>ALTER SEQUENCE OWNED BY</command>. (La funzione
    probabilmente dovrebbe essere chiamata
    <function>pg_get_owned_sequence</function>; il suo nome riflette il fatto
   che essa viene principalmente usata con colonne <type>serial</type> o
   <type>bigserial</type>).
  </para>


  <para>
   La funzione <function>pg_get_userbyid</function> estrae il nome del ruolo dato 
   il suo OID.
  </para>





  <para>
    <function>pg_tablespace_databases</function> permette a un tablespace di
    essere esaminato. Restituisce l'insieme di OID dei database che hanno oggetti
    immagazzinati nel tablespace. Se questa funzione restituisce qualunque riga, 
    il tablespace non è
    vuoto e non può essere eliminato. Per mostrare gli oggetti specifici che popolano
    il tablespace, sarà necessario connettersi al database identificato da
    <function>pg_tablespace_databases</function> ed eseguire una query sui suoi catalogi
    <structname>pg_class</structname>.
  </para>

  <para>
        <function>pg_typeof</function> ritorna l'OID del tipo di dato del 
        valore che gli viene passato. Questo può essere utile per risolvere i problemi o 
        costruire dinamicamente query SQL. La funzione dichiarata 
        ritorna <type>regtype</type>, che è un tipo alias di OID (vedere
        <xref linkend="datatype-oid"/>); Questo significa che è lo stesso di
        OID per scopi di comparazione ma visualizzato come un nome di tipo. Per esempio:
<programlisting>
SELECT pg_typeof(33);

 pg_typeof 
-----------
 integer
(1 row)

SELECT typlen FROM pg_type WHERE oid = pg_typeof(33);
 typlen 
--------
      4
(1 row)
</programlisting>
  </para>

   <indexterm>
    <primary>col_description</primary>
   </indexterm>

   <indexterm>
    <primary>obj_description</primary>
   </indexterm>

   <indexterm>
    <primary>shobj_description</primary>
   </indexterm>

   <indexterm>
    <primary>commento</primary>
    <secondary sortas="database objects">sugli oggetti del database</secondary>
   </indexterm>

   <para>
La funzione mostrata in <xref linkend="functions-info-comment-table"/>
estrae commenti immagazzinati precedentemente con il comando <xref linkend="sql-comment"/>.
Un valore null viene restituito se nessun
commento può essere trovato per i parametri specificati.
   </para>

   <table id="functions-info-comment-table">
    <title>Comment Information Functions</title>
    <title>Funzioni su commenti d'informazione</title>
    <tgroup cols="3">
     <thead>
    <row>
        <entry>Nome</entry> 
        <entry>Tipo di ritorno</entry> 
        <entry>Descrizione</entry>
    </row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>col_description(<parameter>table_oid</parameter>, <parameter>column_number</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>ottiene il commento per una colonna di tabella</entry>
      </row>
      <row>
       <entry><literal><function>obj_description(<parameter>object_oid</parameter>, <parameter>catalog_name</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>ottiene il commento per un oggetto di database</entry>
      </row>
      <row>
       <entry><literal><function>obj_description(<parameter>object_oid</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>ottiene il commento per un oggetto di database (<emphasis>deprecato</emphasis>)</entry>
      </row>
      <row>
       <entry><literal><function>shobj_description(<parameter>object_oid</parameter>, <parameter>catalog_name</parameter>)</function></literal></entry>
       <entry><type>text</type></entry>
       <entry>ottiene il commento per un oggetto di database condiviso</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<function>col_description</function>  ritorna il commento per una colonna di tabella,
che è specificata dall'OID della sua tabella e il suo numero di colonna.
<function>obj_description</function> non può  essere usata per colonne di tabella dato che
le colonne non hanno OID propri.
   </para>

   <para>
La forma a due parametri di <function>obj_description</function> ritorna il
per un oggetto di database specificato dal suo OID e il nome del catalogo
di sistema che lo contiene. Per esempio,
<literal>obj_description(123456,'pg_class')</literal>
recupererebbe il commento per la tabella con OID 123456.
La forma a un parametro di <function>obj_description</function> richiede solo
l'OID dell'oggetto. È deprecato dato che non c'è garanzia che 
gli OID siano unici in cataloghi di sistema differenti; Perciò, potrebbe
essere restituito il commento  sbagliato.
   </para>

   <para>
<function>shobj_description</function> viene usata esattamente come
<function>obj_description</function> ad eccezione che essa fornisce 
commenti su oggetti condivisi. Alcuni cataloghi di sistema sono globali a tutti i
database all'interno di ogni cluster e le loro descrizioni sono immagazzinate 
anch'esse globalmente.
   </para>

   <indexterm>
    <primary>txid_current</primary>
   </indexterm>

   <indexterm>
    <primary>txid_current_snapshot</primary>
   </indexterm>

   <indexterm>
    <primary>txid_snapshot_xmin</primary>
   </indexterm>

   <indexterm>
    <primary>txid_snapshot_xmax</primary>
   </indexterm>

   <indexterm>
    <primary>txid_snapshot_xip</primary>
   </indexterm>

   <indexterm>
    <primary>txid_visible_in_snapshot</primary>
   </indexterm>

   <para>
Le funzioni viste in <xref linkend="functions-txid-snapshot"/>
forniscono informazioni sulle transazioni del server in una forma esportabile. L'uso
principale di queste funzioni è determinare quali transazioni sono state eseguite
tra due istanti.
   </para>

   <table id="functions-txid-snapshot">
    <title>Transaction IDs and snapshots</title>
    <title>ID si transazione e snapshot</title>
    <tgroup cols="3">
     <thead>
        <row><entry>Nome</entry> 
        <entry>Tipo di ritorno</entry> 
        <entry>Descrizione</entry></row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>txid_current()</function></literal></entry>
       <entry><type>bigint</type></entry>
       <entry>ottiene l'ID di transazione corrente</entry>
      </row>
      <row>
       <entry><literal><function>txid_current_snapshot()</function></literal></entry>
       <entry><type>txid_snapshot</type></entry>
       <entry>ottiene lo snapshot corrente</entry>
      </row>
      <row>
       <entry><literal><function>txid_snapshot_xmin(<parameter>txid_snapshot</parameter>)</function></literal></entry>
       <entry><type>bigint</type></entry>
       <entry>ottiene l'xmin dello snapshot</entry>
      </row>
      <row>
       <entry><literal><function>txid_snapshot_xmax(<parameter>txid_snapshot</parameter>)</function></literal></entry>
       <entry><type>bigint</type></entry>
       <entry>ottiene l'xmax dello snapshot</entry>
      </row>
      <row>
       <entry><literal><function>txid_snapshot_xip(<parameter>txid_snapshot</parameter>)</function></literal></entry>
       <entry><type>setof bigint</type></entry>
       <entry>ottiene l'ID di transazione in corso nello snapshot</entry>
      </row>
      <row>
       <entry><literal><function>txid_visible_in_snapshot(<parameter>bigint</parameter>, <parameter>txid_snapshot</parameter>)</function></literal></entry>
       <entry><type>boolean</type></entry>
       <entry>l'ID di transazione è visibile nello snapshot? (non usare con ID di sottotransazione)</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
Il tipo interno ID di transazione (<type>xid</type>) è a 32 bit e 
gestisce 4 bilioni di transazioni. Comunque, queste funzioni
esportano un formato a 64 bit esteso con un contatore di <quote>epoch</quote>
così che non si incarti durante la vita di un'installazione.
Il tipo di dato usato da queste funzioni,  <type>txid_snapshot</type>,
immagazzina informazioni sulla visibilità dell'ID di transzione
in un particolare momento. Le sue componenti sono
descritte in <xref linkend="functions-txid-snapshot-parts"/>.
   </para>

   <table id="functions-txid-snapshot-parts">
    <title>Snapshot components</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Nome</entry>
       <entry>Descrizione</entry>
      </row>
     </thead>

     <tbody>

      <row>
       <entry><type>xmin</type></entry>
       <entry>
Il più vecchio ID di transazione (txid) che è ancora attivo. Tutte le transazioni
più vecchie saranno o state completate e visibili, o saranno state revertite 
e morte.
       </entry>
      </row>

      <row>
       <entry><type>xmax</type></entry>
       <entry>
Il primo dei txid non ancora assegnati. Tutti i txid maggiori di, o uguali, a questo,
non sono ancora partiti al tempo dello snapshot, è sono perciò invisibili.
       </entry>
      </row>

      <row>
       <entry><type>xip_list</type></entry>
       <entry>
I txid attivi al tempo dello snapshot. L'elenco include
solo quelli attivi compresi tra <literal>xmin</literal> e
<literal>xmax</literal>; ci potrebbero essere txid attivi più alti
di <literal>xmax</literal>. Un txid che è <literal>xmin &lt;= txid &lt;
xmax</literal> e non in questo elenco è stato già completato 
al tempo dello snapshot, e così sarà visibile o 
morto a seconda del suo stato di commit. L'elenco non
include txid di sottotransazioni.
       </entry>
      </row>

     </tbody>
    </tgroup>
   </table>

   <para>
    <type>txid_snapshot</type>'s textual representation is
    <literal><replaceable>xmin</replaceable>:<replaceable>xmax</replaceable>:<replaceable>xip_list</replaceable></literal>.
    Per esempio <literal>10:20:10,14,15</literal> significa
    <literal>xmin=10, xmax=20, xip_list=10, 14, 15</literal>.
   </para>
  </sect1>

  <sect1 id="functions-admin">
   <title>Funzioni di amministrazione di sistema</title>

   <para>
<xref linkend="functions-admin-set-table"/> mostra le funzioni
disponibili per interrogare e modificare parametri di configurazione durante l'esecuzione. 
   </para>

   <table id="functions-admin-set-table">
    <title>Funzioni per impostazioni di configurazione</title>
    <tgroup cols="3">
     <thead>
      <row><entry>Nome</entry> 
            <entry>Tipo di ritorno</entry> 
            <entry>Descrizione</entry></row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>current_setting(<parameter>setting_name</parameter>)</function></literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>ottiene il valore corrente dell'impostazione</entry>
      </row>
      <row>
       <entry>
        <literal><function>set_config(<parameter>setting_name</parameter>,
                             <parameter>new_value</parameter>,
                             <parameter>is_local</parameter>)</function></literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>imposta il parametro e ritorna il nuovo valore</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <indexterm>
    <primary>SET</primary>
   </indexterm>

   <indexterm>
    <primary>SHOW</primary>
   </indexterm>

   <indexterm>
    <primary>configurazione</primary>
    <secondary sortas="server">del server</secondary>
    <tertiary>funzioni</tertiary>
   </indexterm>

   <para>
La funzione  <function>current_setting</function> fornisce il 
valore corrente dell'impostazione <parameter>setting_name</parameter>.
Essa corrisponde al comando <acronym>SQL</acronym> 
<command>SHOW</command>. Un esempio:
<programlisting>
SELECT current_setting('datestyle');

 current_setting
-----------------
 ISO, MDY
(1 row)
</programlisting>
   </para>

   <para>
<function>set_config</function> imposta il parametro
<parameter>setting_name</parameter> a 
<parameter>new_value</parameter>. Se 
<parameter>is_local</parameter> è <literal>true</literal>, il
nuovo valore sarà applicato solo alla transazione corrente. Se si vuole
il nuovo valore da applicare per la sessione corrente, usare invece
<literal>false</literal>. La funzione corrisponde al comando SQL
<command>SET</command>. Un esempio:
<programlisting>
SELECT set_config('log_statement_stats', 'off', false);

 set_config
------------
 off
(1 row)
</programlisting>
   </para>

   <indexterm>
    <primary>pg_cancel_backend</primary>
   </indexterm>
   <indexterm>
    <primary>pg_terminate_backend</primary>
   </indexterm>
   <indexterm>
    <primary>pg_reload_conf</primary>
   </indexterm>
   <indexterm>
    <primary>pg_rotate_logfile</primary>
   </indexterm>

   <indexterm>
    <primary>segnale</primary>
    <secondary sortas="backend">processi di backend</secondary>
   </indexterm>

   <para>
La funzione mostrata in <xref 
linkend="functions-admin-signal-table"/> manda segnali di controllo agli
altri processi del server. L'uso di queste funzioni è limitato
ai speruser.
   </para>

   <table id="functions-admin-signal-table">
    <title>Server Signalling Functions</title>
    <title>Funzioni di segnalazione al server</title>
    <tgroup cols="3">
     <thead>
      <row><entry>Nome</entry> 
        <entry>Tipo di ritorno</entry> 
        <entry>Descrizione</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>pg_cancel_backend(<parameter>pid</parameter> <type>int</type>)</function></literal>
        </entry>
       <entry><type>boolean</type></entry>
       <entry>Cancella la query di backend corrente</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_terminate_backend(<parameter>pid</parameter> <type>int</type>)</function></literal>
        </entry>
       <entry><type>boolean</type></entry>
       <entry>Termina un backend</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_reload_conf()</function></literal>
        </entry>
       <entry><type>boolean</type></entry>
       <entry>Fa si che i processi del server ricarichino i loro file di configurazione</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_rotate_logfile()</function></literal>
        </entry>
       <entry><type>boolean</type></entry>
       <entry>Ruota il file di log del server</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
Ognuna di queste funzioni ritorna <literal>true</literal> se
ha successo e <literal>false</literal> altrimenti.
   </para>

   <para>
<function>pg_cancel_backend</function> e <function>pg_terminate_backend</function>
mandano segnali (<systemitem>SIginT</systemitem> o <systemitem>SIGTERM</systemitem>
rispettivamente) sui processi di backend identificati dall'ID di processo.
L'ID di processo di un backend attivo può essere trovato con
la colonna <structfield>procpid</structfield> della vista
<structname>pg_stat_activity</structname>, o elencando i processi
<command>postgres</command> sul server (usando
<application>ps</application> su Unix o il <application>Task
Manager</application> su <productname>Windows</productname>).
   </para>

   <para>
<function>pg_reload_conf</function> invia un segnale <systemitem>SIGHUP</systemitem>
al server, facendo si che i file di configurazione siano ricaricati
da tutti i processi del server.
   </para>

   <para>
<function>pg_rotate_logfile</function> segnala al gestore del file di log di cambiare
file di output immediatamente. Questo funziona solo quando il log collector incorporato
sta viaggiando, dato che altrimenti non c'è nessun sottoprocesso di gestione 
del file di log.
   </para>

   <indexterm>
    <primary>pg_start_backup</primary>
   </indexterm>
   <indexterm>
    <primary>pg_stop_backup</primary>
   </indexterm>
   <indexterm>
    <primary>pg_switch_xlog</primary>
   </indexterm>
   <indexterm>
    <primary>pg_current_xlog_location</primary>
   </indexterm>
   <indexterm>
    <primary>pg_current_xlog_insert_location</primary>
   </indexterm>
   <indexterm>
    <primary>pg_xlogfile_name_offset</primary>
   </indexterm>
   <indexterm>
    <primary>pg_xlogfile_name</primary>
   </indexterm>
   <indexterm>
    <primary>backup</primary>
   </indexterm>

   <para>
Le funzioni mostrate in <xref
linkend="functions-admin-backup-table"/> aiutano a fare backup on-line.
Queste funzioni non possono essere eseguite durante un recovery.
L'uso di queste tre funzioni è limitato ai superuser.
   </para>




   <table id="functions-admin-backup-table">
    <title>Funzioni di controllo del backup</title>
    <tgroup cols="3">
     <thead>
      <row><entry>Nome</entry> <entry>Tipo di ritorno</entry> <entry>Descrizione</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>pg_start_backup(<parameter>label</parameter> <type>text</type> <optional>, <parameter>fast</parameter> <type>boolean</type> </optional>)</function></literal>
        </entry>
       <entry><type>text</type></entry>
       <entry>
            Predispone per il backup on-line
        </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_stop_backup()</function></literal>
        </entry>
       <entry><type>text</type></entry>
       <entry>
            Termina il backup on-line
        </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_switch_xlog()</function></literal>
        </entry>
       <entry><type>text</type></entry>
       <entry>Forza il passaggio a un file di log di transazione nuovo</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_current_xlog_location()</function></literal>
        </entry>
       <entry><type>text</type></entry>
       <entry>
            Rende la locazione di scritture del log di transazione corrente
        </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_current_xlog_insert_location()</function></literal>
        </entry>
       <entry><type>text</type></entry>
       <entry>
            Rende la locazione di inserimento del log di transazione corrente
        </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_xlogfile_name_offset(<parameter>location</parameter> <type>text</type>)</function></literal>
        </entry>
       <entry><type>text</type>, <type>integer</type></entry>
       <entry>
            Converte la stringa di locazione del log di transazione in un nome di file e 
            lo scostamento decimale di byte all'interno del file
        </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_xlogfile_name(<parameter>location</parameter> <type>text</type>)</function></literal>
        </entry>
       <entry><type>text</type></entry>
       <entry>
            Converte la stringa di locazione del log in un nome di file
        </entry>
      </row>
     </tbody>
    </tgroup>
   </table>


   <para>
<function>pg_start_backup</function> accetta un'etichetta arbitraria definita dall'utente
per il backup. (Tipicamente questa sarebbe 
il nome sotto il quale il file  dump di backup sarà immagazzinato.) La funzione
scrive un file etichetta di backup (<filename>backup_label</filename>) nella
directory dati del cluster di database, esegue un checkpoint,
e poi restituisce la locazione del log dell'inizio della transazione di backup come testo.
L'utente può ignorare questo valore, ma viene fornito
nel caso fosse utile.
<programlisting>
postgres=# select pg_start_backup('label_goes_here');
 pg_start_backup
-----------------
 0/D4445B8
(1 row)
</programlisting>
C'è un secondo parametro opzionale di tipo <type>boolean</type>.
Se <literal>true</literal>, esso specifica di eseguire 
<function>pg_start_backup</function>
il più velocemente possibile. Questo forza un checkpoint immediato che causerà
un blocco delle operazioni di I/O, rallentando qualsiasi query eseguita concorrentemente.
   </para>

   <para>
<function>pg_stop_backup</function> rimuove il file etichetta creato da
<function>pg_start_backup</function>, e crea un file storico per il backup nell'area
archivio del log di transazione. Il file storico include l'etichetta fornita a
<function>pg_start_backup</function>, le locazioni di inizio e fine del log di transazione
per il backup e gli orari di inizio e di fine del backup. Il valore di ritorno
è la locazione del log di fine transazione di backup (che di nuovo,
può essere ignorato). Dopo aver registrato la locazione finale, il punto 
di inserimento del log di transazione corrente viene
automaticamente avanzato al prossimo file di log di transazione, così che 
il file di log di fine transazione possa essere archiviato immediatamente 
per completare il backup.
   </para>

   <para>
<function>pg_switch_xlog</function> si muove al prossimo file di log di transazione, 
permettendo che il file corrente sia archiviato (assumendi che si stia usando archiviazione continua).
Il valore di ritorno è la locazione del log di fine transazione +1 all'interno del file
di log di transazione appena completato.
Se non c'è stat attività di log di transazione dall'ultimo cambio di log di transazione,
<function>pg_switch_xlog</function> non fa niente e restituisce la locazione di inizio
del file di log di transazione attualmente in uso.
   </para>

   <para>
<function>pg_current_xlog_location</function> mostra la locazione attuale del log di transazione
ma nello stesso formato usato della funzioni viste sopra. Similarmente,
<function>pg_current_xlog_insert_location</function> mostra il punto di inserimento
nel log della transazione corrente.
Il punto di inserimento è la fine <quote>logica</quote> del
log di transazione
in qualsiasi istante, mentre la locazione di scritture è la fine di quello che attualmente
è stato trascritto dai buffer interni del server. La locazione di scrittura
è la fine di quello che può essere esaminato dall'esterno del server, solitamente
è quello che vuoi se sei interessato nell'archiviazione di file di log di transazione 
parzialmente completi. Il punto di inserimento è reso disponibile principalmente per
scopi di debug del seerver. Queste due sono operazioni di sola lettura e non 
richiedono i permessi di superuser.
   </para>

   <para>
È possibile usare <function>pg_xlogfile_name_offset</function> per estrarre 
il nome del file di log di transazione corrispondente e lo scostamento di byte dal
risultato di una delle funzioni viste sopra. Per esempio:
<programlisting>
postgres=# SELECT * FROM pg_xlogfile_name_offset(pg_stop_backup());
        file_name         | file_offset 
--------------------------+-------------
 00000001000000000000000D |     4039624
(1 row)
</programlisting>
Similarmente, <function>pg_xlogfile_name</function> estrae solo il nome del file di log.
Quando la locazione del log di transazione fornito è esattamente al confine 
di un file di log di transazione, tutte e due le funzioni
ritornano il nome del file di log di transazione precedente.
Questo di solito è il comportamento desiderato per gestire l'archiviazione dei 
log di transazione, dato che il file precedente è l'ultimo che attualmente
ha bisogno di essere archiviato.
   </para>

   <para>
Per dettagli circa il giusto uso di queste funzioni, vedere
<xref linkend="continuous-archiving"/>.
   </para>

   <indexterm>
    <primary>pg_is_in_recovery</primary>
   </indexterm>
   <indexterm>
    <primary>pg_last_xlog_receive_location</primary>
   </indexterm>
   <indexterm>
    <primary>pg_last_xlog_replay_location</primary>
   </indexterm>

   <para>
Le funzioni mostrate in <xref
linkend="functions-recovery-info-table"/> forniscono informazioni
sullo stato corrente dello standby.
Queste funzioni possono essere eseguite sia durante il recovery che durante la normale 
esecuzione.
   </para>

<!-- ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] -->
<!-- ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] -->
<!-- ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] -->
<!-- ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] -->
   <table id="functions-recovery-info-table">
    <title>Recovery Information Functions</title>
    <tgroup cols="3">
     <thead>
      <row><entry>Name</entry> <entry>Return Type</entry> <entry>Description</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>pg_is_in_recovery()</function></literal>
        </entry>
       <entry><type>bool</type></entry>
       <entry>True if recovery is still in progress.
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_last_xlog_receive_location()</function></literal>
        </entry>
       <entry><type>text</type></entry>
       <entry>Get last transaction log location received and synced to disk by
        streaming replication. While streaming replication is in progress
        this will increase monotonically. But when streaming replication is
        restarted this will back off to the replication starting position,
        typically the beginning of the WAL file containing the current
        replay location.  If recovery has completed this will remain static at
        the value of the last WAL record received and synced to disk during
        recovery. If streaming replication is disabled, or if it has not yet
        started, the function returns NULL.
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_last_xlog_replay_location()</function></literal>
        </entry>
       <entry><type>text</type></entry>
       <entry>Get last transaction log location replayed during recovery.
        If recovery is still in progress this will increase monotonically.
        If recovery has completed then this value will remain static at
        the value of the last WAL record applied during that recovery.
        When the server has been started normally without recovery
        the function returns NULL.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
<!-- ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] -->
<!-- ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] -->
<!-- ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] -->
<!-- ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] -->

   <para>
Le funzioni mostrate in <xref linkend="functions-admin-dbsize"/> calcolano
l'uso dello sapzio del disco da parte degli oggetti del database.
   </para>

   <indexterm>
    <primary>pg_column_size</primary>
   </indexterm>
   <indexterm>
    <primary>pg_total_relation_size</primary>
   </indexterm>
   <indexterm>
    <primary>pg_table_size</primary>
   </indexterm>
   <indexterm>
    <primary>pg_indexes_size</primary>
   </indexterm>
   <indexterm>
    <primary>pg_database_size</primary>
   </indexterm>
   <indexterm>
    <primary>pg_tablespace_size</primary>
   </indexterm>
   <indexterm>
    <primary>pg_relation_size</primary>
   </indexterm>
   <indexterm>
    <primary>pg_size_pretty</primary>
   </indexterm>

   <table id="functions-admin-dbsize">
    <title>Funzioni sulla dimensione degli oggetti di database</title>
    <tgroup cols="3">
     <thead>
      <row><entry>Nome</entry> <entry>Tipo di ritorno</entry> <entry>Descrizione</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal><function>pg_column_size(<type>any</type>)</function></literal></entry>
       <entry><type>int</type></entry>
       <entry>
            Numero di byte usati per immagazzinare un valore particolare 
                (possibilmente compresso)
        </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_total_relation_size(<type>regclass</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
       <entry>
    Spazio su disco totale usato dalla tabella con OID o nome specificato, 
    inclusi tutti gli indici e dati <acronym>TOAST</acronym>
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_table_size(<type>regclass</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
       <entry>
    Spazio su disco totale usato dalla tabella con OID o nome specificato, 
    esclusi gli indici (ma inclusi <acronym>TOAST</acronym>, mappa dello spazio libero
    e mappa di visibilità)
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_indexes_size(<type>regclass</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
       <entry>
Spazio su disco totale usato dagli indici connessi alla tabella con 
OID o nome specificato
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_database_size(<type>oid</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
       <entry>
    Spazio su disco usato dal database con l'OID specificato
        </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_database_size(<type>name</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
       <entry>
            Spazio su disco usato dal databse con il nome specificato
        </entry>
        
      </row>
      <row>
       <entry>
        <literal><function>pg_tablespace_size(<type>oid</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
       <entry>
            Spazio su disco usato dal tablespace con l'OID specificato
        </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_tablespace_size(<type>name</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
       <entry>  
    Spazio su disco usato dal tablespace con il nome specificato
        </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_relation_size(<parameter>relation</parameter> <type>regclass</type>, <parameter>fork</parameter> <type>text</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
       <entry>
    Spazio su disco usato del fork specificato (<literal>'main'</literal>,
    <literal>'fsm'</literal> or <literal>'vm'</literal>)
    della tabella o dell'indice con l'OID o il nome fornito
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_relation_size(<parameter>relation</parameter> <type>regclass</type>)</function></literal>
        </entry>
       <entry><type>bigint</type></entry>
       <entry>
        Shorthand for <literal>pg_relation_size(..., 'main')</literal>
    Scorciatoia per <literal>pg_relation_size(..., 'main')</literal>
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_size_pretty(<type>bigint</type>)</function></literal>
        </entry>
       <entry><type>text</type></entry>
       <entry>
    Converte una dimensione in byte in un formato leggibile con unità di dimensione
        </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<function>pg_column_size</function> mostra lo sapzio usato per immagazzinare ogni singolo 
valore di dato.
   </para>

<note>
    <para>
        Nota per il revisore: toast tabel ?
    </para>
</note>
   <para>
<function>pg_total_relation_size</function> acceta l'OID o il nome di 
una tabella o di una toast table, e restituisce lo spazio su disco totale usato per
quella tabella, includendo tutti gli indici associati. Questa funzione è 
equivalente a <function>pg_table_size</function>
<literal>+</literal> <function>pg_indexes_size</function>.
   </para>

   <para>
<function>pg_table_size</function> accetta l'OID o il nome di una tabella e 
restituisce lo spazio su disco necessario per quella tabella, escluso gli indici.
(incluso spazio TOAST, mappa dello spazio libero e mappa di visibilità.)
   </para>

   <para>
<function>pg_indexes_size</function> accetta l'OID o il nome di una tabella e 
restituisce lo spazio su disco totale usato da tutti gli indici connessi a quella
tabella.
   </para>

   <para>
<function>pg_database_size</function> e <function>pg_tablespace_size</function>
accettano l'OID o il nome di un database o un tablespace, 
e restituiscono lo spazio su disco
usato ivi contenuto.
   </para>

<note>
    <para>
        Nota per il revisore: data fork ?
    </para>
</note>
   <para>
<function>pg_relation_size</function> accetta l'OID o il nome di una tabella, indice o
tabella toast, e restituisce lo spazio su disco in byte. Specificare
<literal>'main'</literal> o lasciare vuoto il secondo argomento restituisce la
dimensione del fork principale dei dati della relazione. Specificare
<literal>'fsm'</literal> restituisce la dimensione della 
Mappa dello spazio libero (vedere <xref linkend="storage-fsm"/>) associata alla
relazione. Specificare <literal>'vm'</literal> restituisce la dimensione della
Mappa di visibilità (vedere <xref linkend="storage-vm"/>) associata con la
relazione. Notare che questa funzione mostra la dimensione di solo un fork;
Per la mamaggior parte degli scopi è più conveniente usare le funzioni a più alto livello
<function>pg_total_relation_size</function> o <function>pg_table_size</function>.
   </para>

   <para>
<function>pg_size_pretty</function> puà essere usata per formattare il risultato di una 
delle altre funzioni in maniera leggibile dall'uomo, usando kB, MB, GB o TB come
appropriato.
   </para>

   <para>
Le funzioni mostrate in <xref linkend="functions-admin-dblocation"/> aiutano 
nell'identificare i file disco specifici associati con gli oggetti del database.
   </para>

   <indexterm>
    <primary>pg_relation_filenode</primary>
   </indexterm>
   <indexterm>
    <primary>pg_relation_filepath</primary>
   </indexterm>

   <table id="functions-admin-dblocation">
    <title>Funzioni di locazione di oggetti di database</title>
    <tgroup cols="3">
     <thead>
      <row><entry>Nome</entry> <entry>Tipo di ritorno</entry> <entry>Descrizione</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>pg_relation_filenode(<parameter>relation</parameter> <type>regclass</type>)</function></literal>
        </entry>
       <entry><type>oid</type></entry>
       <entry>
        numero filenode della relazione con l'OID o il nome specificato
       </entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_relation_filepath(<parameter>relation</parameter> <type>regclass</type>)</function></literal>
        </entry>
       <entry><type>text</type></entry>
       <entry>
        Percorso del file della relazione con il nome o l'OID specificato
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
<function>pg_relation_filenode</function> accetta l'OID o il nome di una tabella,
indice, sequenza o tabella toast, e restituisce il numero di <quote>filenode</quote>
attualmente assegnato ad esso. Il filenode è il componente base del nome del/i file
usato/i per la relazzione (vedere <xref linkend="storage-file-layout"/>
per maggiori informazioni). Per la maggior parte delle tabelle il risultato è lo stesso 
di <structname>pg_class</structname>.<structfield>relfilenode</structfield>, 
ma per certi 
cataloghi di sistema <structfield>relfilenode</structfield> è zero e questa funzione deve
essere usato per ottenete il valore corretto. La funzione restituisce NULL se viene passata
una relazione che non ha immagazzinamento, tipo una vista.
   </para>

   <para>
<function>pg_relation_filepath</function> è simile a
<function>pg_relation_filenode</function>, ma restituisce l'intero percorso del file
(relativo alla directory dati <varname>PGDATA</varname> del cluster di database) della 
relazione.
   </para>

   <para>
La funzione mostrata in <xref
linkend="functions-admin-genfile"/> fornisce accesso nativo a 
file sulla macchina che esegue l'hosting del server. Solo i file all'interno della
directory cluster di database e la <varname>log_directory</varname> possono essere
accesse. Usare un percorso relativo per i file nella directory cluster,
e un percorso che corrisponde all'impostazione di configurazione 
<varname>log_directory</varname> 
per i file di log. L'uso di queste funzioni è limitato al superuser.
   </para>

   <table id="functions-admin-genfile">
    <title>Funzioni di accesso ai file</title>
    <tgroup cols="3">
     <thead>
      <row><entry>Nome</entry> <entry>Tipo di ritorno</entry> <entry>Descrizione</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>pg_ls_dir(<parameter>dirname</parameter> <type>text</type>)</function></literal>
       </entry>
       <entry><type>setof text</type></entry>
       <entry>Lista i contenuti di una directory</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_read_file(<parameter>filename</parameter> <type>text</type>, <parameter>offset</parameter> <type>bigint</type>, <parameter>length</parameter> <type>bigint</type>)</function></literal>
       </entry>
       <entry><type>text</type></entry>
       <entry>Restituisce i contenuti di un file di testo</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_stat_file(<parameter>filename</parameter> <type>text</type>)</function></literal>
       </entry>
       <entry><type>record</type></entry>
       <entry>Restituisce informazioni su un file</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <indexterm>
    <primary>pg_ls_dir</primary>
   </indexterm>
   <para>
<function>pg_ls_dir</function> restituisce tutti i nomi nella specifica 
directory, ad eccezione delle voci speciali <quote><literal>.</literal></quote> e
<quote><literal>..</literal></quote> .
   </para>

   <indexterm>
    <primary>pg_read_file</primary>
   </indexterm>
   <para>
<function>pg_read_file</function> restituisce parte di un file di testo, cominciando
all'<parameter>offset</parameter> fornito, e ritorna al massimo <parameter>length</parameter>
byte (meno se la fine del file viene raggiunta prima). Se <parameter>offset</parameter>
è negativo, partirà dalla fine del file.
   </para>

   <indexterm>
    <primary>pg_stat_file</primary>
   </indexterm>
   <para>
<function>pg_stat_file</function> ritorna un record contenente la dimensione
del file, il timestamp dell'ultimo accesso, il timestamp dell'ultima modifica,
il timestamp dell'ultimo cambiamento di stato del file (solo su piattaforme Unix),
il timestamp della creazione del file (solo Windows), e un <type>boolean</type>
indicante se è una directory. Utilizzi tipici includono:
<programlisting>
SELECT * FROM pg_stat_file('filename');
SELECT (pg_stat_file('filename')).modification;
</programlisting>
   </para>

   <para>
Le funzioni mostrate in <xref linkend="functions-advisory-locks"/> gestiscono 
i lock consultivi. Per dettagli circa l'uso corretto di queste funzioni, vedere
<xref linkend="advisory-locks"/>.

   </para>

   <table id="functions-advisory-locks">
    <title>Funzioni di lock consultivi</title>
    <tgroup cols="3">
     <thead>
      <row><entry>Nome</entry> 
            <entry>Tipo di ritorno</entry> 
            <entry>Descrizione</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry>
        <literal><function>pg_advisory_lock(<parameter>key</parameter> <type>bigint</type>)</function></literal>
       </entry>
       <entry><type>void</type></entry>
       <entry>Ottiene un lock consultivo esclusivo</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_advisory_lock(<parameter>key1</parameter> <type>int</type>, <parameter>key2</parameter> <type>int</type>)</function></literal>
       </entry>
       <entry><type>void</type></entry>
       <entry>Ottiene un lock consultivo esclusivo</entry>
      </row>

      <row>
       <entry>
        <literal><function>pg_advisory_lock_shared(<parameter>key</parameter> <type>bigint</type>)</function></literal>
       </entry>
       <entry><type>void</type></entry>
        <entry>Ottiene un lock consultivo condiviso</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_advisory_lock_shared(<parameter>key1</parameter> <type>int</type>, <parameter>key2</parameter> <type>int</type>)</function></literal>
       </entry>
       <entry><type>void</type></entry>
        <entry>Ottiene un lock consultivo condiviso</entry>
      </row>

      <row>
       <entry>
        <literal><function>pg_try_advisory_lock(<parameter>key</parameter> <type>bigint</type>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>Ottiene un lock consultivo esclusivo se disponibile</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_try_advisory_lock(<parameter>key1</parameter> <type>int</type>, <parameter>key2</parameter> <type>int</type>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>Ottiene un lock consultivo esclusivo se disponibile</entry>
      </row>

      <row>
       <entry>
        <literal><function>pg_try_advisory_lock_shared(<parameter>key</parameter> <type>bigint</type>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>Ottiene un lock consultivo condiviso se disponibile</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_try_advisory_lock_shared(<parameter>key1</parameter> <type>int</type>, <parameter>key2</parameter> <type>int</type>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>Obtain shared advisory lock if available</entry>
       <entry>Ottiene un  lock consultivo condiviso se disponibile</entry>
      </row>

      <row>
       <entry>
        <literal><function>pg_advisory_unlock(<parameter>key</parameter> <type>bigint</type>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>Rilascia un advisory lock condiviso</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_advisory_unlock(<parameter>key1</parameter> <type>int</type>, <parameter>key2</parameter> <type>int</type>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>Rilascia un advisory lock esclusivo</entry>
      </row>

      <row>
       <entry>
        <literal><function>pg_advisory_unlock_shared(<parameter>key</parameter> <type>bigint</type>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>Rilascia un advisory lock condiviso</entry>
      </row>
      <row>
       <entry>
        <literal><function>pg_advisory_unlock_shared(<parameter>key1</parameter> <type>int</type>, <parameter>key2</parameter> <type>int</type>)</function></literal>
       </entry>
       <entry><type>boolean</type></entry>
       <entry>Release a shared advisory lock</entry>
      </row>

      <row>
       <entry>
        <literal><function>pg_advisory_unlock_all()</function></literal>
       </entry>
       <entry><type>void</type></entry>
       <entry>Rilascia tutti i lock consultivi della sessione corrente</entry>
      </row>

     </tbody>
    </tgroup>
   </table>

   <indexterm>
    <primary>pg_advisory_lock</primary>
   </indexterm>
   <para>
    La funzione <function>pg_advisory_lock</function> blocca una risorsa definita in una applicazione,
    che può essere identificata o tramite un singolo valore chiave a 64-bit oppure tramite
    due valori chiave a 32-bit (notare che questi due spazi chiave non si sovrappongono). Se
    un altra sessione è già titolare di un blocco sulla stessa risorsa, la
    funzione dovrà attendere finchè la risorsa diventa disponibile. Il blocco
    è esclusivo. Le richieste multiple di blocco vengono messe in stack, per cui se la
    stessa risorsa è stata bloccata tre volte essa dovrà essere sbloccata tre
    volte prima di essere rilasciata per l'utilizzo in altre sessioni.
   </para>

   <indexterm>
    <primary>pg_advisory_lock_shared</primary>
   </indexterm>
   <para>
    La funzione <function>pg_advisory_lock_shared</function> lavora come
    <function>pg_advisory_lock</function>,
    eccetto che il blocco può essere condiviso con altre sessioni che richiedono un blocco condiviso.
    Solo chi aspira ad un blocco esclusivo verrà escluso.
   </para>

   <indexterm>
    <primary>pg_try_advisory_lock</primary>
   </indexterm>
   <para>
    La funzione <function>pg_try_advisory_lock</function> è simile alla
    <function>pg_advisory_lock</function>, eccetto che essa non dovrà aspettare
    che il blocco diventi disponibile. Essa potrà ottenere il blocco immediatamente e
    restituire <literal>true</literal>, oppure restituire <literal>false</literal> se il blocco non può
    essere immediatamente acquisito.
   </para>

   <indexterm>
    <primary>pg_try_advisory_lock_shared</primary>
   </indexterm>
   <para>
    La funzione <function>pg_try_advisory_lock_shared</function> lavora nello stesso modo della
    <function>pg_try_advisory_lock</function>, eccetto che essa tenta di acquisire blocchi condivisi
    anziche blocchi esclusivi.
   </para>

   <indexterm>
    <primary>pg_advisory_unlock</primary>
   </indexterm>
   <para>
    La funzione <function>pg_advisory_unlock</function> rilascia un advisory lock esclusivo
    acquisito in precedenza. Essa
    restituirà <literal>true</literal> se il blocco è stato rilasciato con successo.
    Se il blocco non è di fatto tenuto, verrà restituito <literal>false</literal>,
    e in aggiunta, il server rileverà un warning SQL.
   </para>

   <indexterm>
    <primary>pg_advisory_unlock_shared</primary>
   </indexterm>
   <para>
    La funzione <function>pg_advisory_unlock_shared</function> lavora nello stesso modo della
    <function>pg_advisory_unlock</function>, 
    solo che rilascia un advisory lock condiviso.
   </para>

   <indexterm>
    <primary>pg_advisory_unlock_all</primary>
   </indexterm>
   <para>
    La funzione <function>pg_advisory_unlock_all</function> rilascia tutti gli advisory lock
    mantenuti nella sessione corrente. (Questa funzione viene implicitamente chiamata
    alla fine della sessione, anche se il client si disconnette in modo non corretto).
   </para>

  </sect1>

  <sect1 id="functions-trigger">
   <title>Funzioni trigger</title>

   <indexterm>
     <primary>suppress_redundant_updates_trigger</primary>
   </indexterm>

   <para>
      Currently <productname>PostgreSQL</productname> provides one built in trigger
      function, <function>suppress_redundant_updates_trigger</function>, 
      which will prevent any update
      that does not actually change the data in the row from taking place, in
      contrast to the normal behavior which always performs the update
      regardless of whether or not the data has changed. (This normal behavior
      makes updates run faster, since no checking is required, and is also
      useful in certain cases.)
    </para>

    <para>
Idealmente, si dovrebbero evitare aggiornamenti che di fatto non 
cambiano i dati nel record. Aggiornamenti ridondanti posso costare tempo
non necessario, specialmente se ci sono molti indici da cambiare,
e spazio in righe morte che eventualmente debba essere svuotato.
Comunque, rilevare quelle situazioni nel codice di un client non è 
sempre facile, o possibile, e scrivere espressioni per rilevarli 
può essere portatore di errori. Un'alternativa è di usare
<function>suppress_redundant_updates_trigger</function>, che salterà
aggiornamenti che non modificano i dati. Si dovrebbe usarla comunque con cura.
Il trigger usa poco e insignificante tempo per ogni record, 
così se la maggior parte dei record interessati dall'aggiornamento sono di fatto cambiati,
usare questo trigger di fatto renderà più lento l'aggiornamento.
    </para>

    <para>
      The <function>suppress_redundant_updates_trigger</function> function can be 
      added to a table like this:
<programlisting>
CREATE TRIGGER z_min_update 
BEFORE UPDATE ON tablename
FOR EACH ROW EXECUTE PROCEDURE suppress_redundant_updates_trigger();
</programlisting>
      In most cases, you would want to fire this trigger last for each row.
      Bearing in mind that triggers fire in name order, you would then
      choose a trigger name that comes after the name of any other trigger
      you might have on the table.
    </para>
    <para>
       For more information about creating triggers, see
        <xref linkend="sql-createtrigger"/>.
    </para>
  </sect1>
</chapter>
