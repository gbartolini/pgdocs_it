<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

<chapter id="runtime-config">
  <title>Configurazione del server</title>

  <indexterm>
   <primary>configurazione</primary>
   <secondary>del server</secondary>
  </indexterm>

  <para>
Ci sono molti parametri di configurazione che hanno effetto sul comportamento 
del sistema di databasei. Nella prima sezione di questo capitolo, viene descritto
come impostare i parametri di configurazione. Le sezioni successive
discutono ogni parametro in dettaglio.
  </para>

  <sect1 id="config-setting">
   <title>Parametri di impostazione</title>

   <para>
Tutti i nomi dei parametri sono insensibili al case. Ogni parametro prende
un valore di uno dei cinque tipi: Boolean, integer, floating point,
string o enum. I valori Boolean possono essere scritti come <literal>on</literal>,
<literal>off</literal>, <literal>true</literal>,
<literal>false</literal>, <literal>yes</literal>,
<literal>no</literal>, <literal>1</literal>, <literal>0</literal>
(tutti non sensibili alle maiuscole) o qualsiasi prefisso non ambiguo di questi.
   </para>

   <para>
Alcune impostazioni specificano un valore di memoria o tempo. Ognuna di queste 
ha un'unità implicita, che è uno tra kilobyte, block (tipicamente otto
kilobyte), millisecondi, secondi o minuti. Le unità predefinite possono essere
trovate facendo riferimento a <structname>pg_settings</structname>.<structfield>unit</structfield>.
Per convenienza,
un'unità diversa può anche essere specificata esplicitamente. Le unità di memoria valide
sono <literal>kB</literal> (kilobyte), <literal>MB</literal>
(megabyte) e <literal>GB</literal> (gigabyte); unità di tempo valide
sono  <literal>ms</literal> (milliseconds), <literal>s</literal>
(secondi), <literal>min</literal> (minuti), <literal>h</literal>
(ore) e <literal>d</literal> (giorni).  
Si noti che il moltiplicatore per le unità di memoria è 1024, non 1000.
   </para>

   <para>
I parametri di tipo <quote>enum</quote> sono specificati nello  stesso modo dei parametri
string, ma sono limitati a un insieme di possibili valori. I valori permessi possono essere
trovati 
con <structname>pg_settings</structname>.<structfield>enumvals</structfield>.
I valori dei parametri enumo sono insensibili alle maiuscole.
   </para>

   <para>
Un modo di impostare questi parametri è di modificare il file 
<filename>postgresql.conf</filename><indexterm><primary>postgresql.conf</primary></indexterm>,
che normalmente è tenuto nella directory dei dati. (Una copia predefinita è 
installata quando viene inizializzata la directory dei dati del cluster).
Un esempio di come potrebbe presentarsi il file è:
<programlisting>
# This is a comment
log_connections = yes
log_destination = 'syslog'
search_path = '"$user", public'
shared_buffers = 128MB
</programlisting>
Viene specificato un parametro per linea. Il segno uguale tra il nome e 
il valore è opzionale. Gli spazi bianchi sono insignificanti e le linee 
bianche sono ignorate. I segni cancelletto (<literal>#</literal>) indicano che il  
resto della linea è un commento. I valori dei parametri che non sono semplici identificatori 
o numeri devono essere tra singoli apici. Per includere un singolo apice nel valore di un parametro,
scriverlo o tra doppi due apici (preferito) o usando la barra inversa.
   </para>

   <para>
    <indexterm>
     <primary><literal>include</literal></primary>
     <secondary>nel file di configurazione</secondary>
    </indexterm>
In aggiunta alle impostazioni di un parametro, il file <filename>postgresql.conf</filename>
può contenere <firstterm>direttive include</firstterm>, che specificano 
un altro file da leggere e processare come se fosse inserito nel file di configurazione
in quel punto. Le direttive include appaiono semplicemente così:
<programlisting>
include 'filename'
</programlisting>
Se il nome del file non è un percorso assoluto, viene preso come relativo alla
directory contenente il file di configurazione di riferimento.
Le inclusioni possono essere annidate.
   </para>

   <para>
    <indexterm>
     <primary>SIGHUP</primary>
    </indexterm>
Il file di configurazione viene riletto ogni volta che il processo server principale 
riceve un segnale <systemitem>SIGHUP</systemitem> (che è facilmente mandato con
<literal>pg_ctl reload</literal>). Il processo server principale inoltre 
propaga questo segnale a tutti i processi server attualmente in esecuzione
di modo che anche i le sessioni esistenti otterranno i nuovi valori.
Alternativamente, si può mandare direttamente  il segnale a un singolo processo server. 
Alcuni parametri possono essere impostati solo all'avvio del server;
qualsiasi cambiamento alle loro voci nel file di configurazione verrà ignorato fino al 
riavvio del server.
   </para>

   <para>
Un secondo modo di impostare i parametri di configurazione è di fornirli come 
opzione a linea di comando al comando <command>postgres</command>, tipo:
<programlisting>
postgres -c log_connections=yes -c log_destination='syslog'
</programlisting>
Le opzioni a linea di comando sovrascrivono qualsiasi impostazione del 
<filename>postgresql.conf</filename>.  
Notare che questo significa che non si potrà
cambiare il valore al volo modificando 
<filename>postgresql.conf</filename>, quindi mentre il metodo della line di comando
potrebbe essere conveniente, può costare in flessibilità successivamente.
   </para>

   <para>
Occasionalmente è utile dare un opzione a linea di comando solo a 
una particolare sessione. La variabile d'ambiente 
<envar>PGOPTIONS</envar> può essere usata per questo scopo lato client:
<programlisting>
env PGOPTIONS='-c geqo=off' psql
</programlisting>
(Questo funziona per qualsiasi applicazione client basata su <application>libpq</application>,  
non solo <application>psql</application>). Si noti che questo non funzionerà 
per parametri che sono fissati quando il server è avviato 
o che devono essere specificati in <filename>postgresql.conf</filename>.
   </para>

   <para>
Inoltre, è possibile assegnare un insieme di impostazioni di parametri ad un 
utente o un database. Ogni volta che una sessione è avviata, 
vengono caricate le impostazioni predefinite 
per l'utente e il database coinvolti. I 
comandi <xref linkend="sql-alteruser"/>
e <xref linkend="sql-alterdatabase"/>,
vengono usati rispettivamente per configurare queste impostazioni. 
Le impostazioni per database sovrascrivono qualsiasi cosa 
ricevuta dalla linea di comando di <command>postgres</command> o 
dal file di configurazione, e a turno sono sovrascritte da impostazioni 
per utente; entrambre sono sovrascritte da impostazioni per sessione.
   </para>

   <para>
Alcuni parametri possono essere cambiati in sessioni <acronym>SQL</acronym>
individuali con il comando <xref linkend="sql-set"/>,
per esempio:
<screen>
SET ENABLE_SEQSCAN TO OFF;
</screen>
Se <command>SET</command> è permesso, sovrascrive tutte le altre sorgenti di valori
per il parametro. Alcuni parametri non possono essere cambiati con 
<command>SET</command>: per esempio, se controllano un comportamento che 
non può essere cambiato senza riavviare l'intero server <productname>PostgreSQL</productname>.
Inoltre, alcune modifiche di parametro con <command>SET</command> o <command>ALTER</command>
richiedono permessi di superutente.
   </para>

   <para>
Il comando <xref linkend="sql-show"/>
permette di ispezionare i valori correnti di tutti i parametri.
   </para>

   <para>
La tabella virtuale <structname>pg_settings</structname>
(descritta in <xref linkend="view-pg-settings"/>) permette anche di visualizzare
e aggiornare parametri di sessione in fase di esecuzione. È equivalente 
a <command>SHOW</command> e <command>SET</command>, ma può essere maggiormente conveniente
da usare dato che può essere sottoposto a join con altre tabella, o selezionate da usare
qualsiasi condizione di selezione desiderata. Contiene anche maggiori informazioni 
su qualsi valori sono permessi per i parametri.
   </para>
  </sect1>

   <sect1 id="runtime-config-file-locations">
    <title>Posizioni dei file</title>

     <para>
In aggiunta al file <filename>postgresql.conf</filename> già menzionato,
<productname>PostgreSQL</productname> usa altri due file
di configurazione modificati manualmente, che controllano
l'autenticazione dei client (il loro uso è discusso in <xref
linkend="client-authentication"/>).  In maniera predefinita, tutti e tre 
i file di configurazione sono salvati nella directory dei dati del cluster.
I parametri descritti in questa sezione permettono ai file di configurazione 
di essere posizionati ovunque. (Fare ciò può facilitare l'amministrazione.
In particolare spesso è più facile assicurare che i file di configurazione 
siano sottoposti a backup quando sono mantenuti separati).
     </para>

     <variablelist>
     <varlistentry id="guc-data-directory" xreflabel="data_directory">
      <term><varname>data_directory</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>parametro di configurazione <varname>data_directory</varname> </primary>
      </indexterm>
      <listitem>
       <para>
Specifica la directory da usare per l'immagazzinamento dei dati.
Questo parametro può essere impostato solo all'avvio del server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-config-file" xreflabel="config_file">
      <term><varname>config_file</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>parametro di configurazione <varname>config_file</varname> </primary>
      </indexterm>
      <listitem>
       <para>
Specifica il file di configurazione del server principale
(di norma chiamato <filename>postgresql.conf</filename>).
Questo parametro può essere impostato solo nella linea di comando di <command>postgres</command>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-hba-file" xreflabel="hba_file">
      <term><varname>hba_file</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>parametro di configurazione <varname>hba_file</varname> </primary>
      </indexterm>
      <listitem>
       <para>
Specifica il di configurazione per autenticazione basata sul host
(di norma chiamato <filename>pg_hba.conf</filename>).
Questo parametro può esssere impostato solo all'avvio del server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ident-file" xreflabel="ident_file">
      <term><varname>ident_file</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>parametro di configurazione <varname>ident_file</varname> </primary>
      </indexterm>
      <listitem>
       <para>
Specifica il file di configurazione per 
la mappatura del nome utente <xref linkend="auth-username-maps"/>
(di solito chiamato <filename>pg_ident.conf</filename>).
Questo parametro può essere impostato solo all'avvio del server. 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-external-pid-file" xreflabel="external_pid_file">
      <term><varname>external_pid_file</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>parametro di configurazione <varname>external_pid_file</varname> </primary>
      </indexterm>
      <listitem>
       <para>
Specifica il nome di un file id di processo (PID) aggiuntivo che il server dovrebbe creare 
per essere usato da programmi di amministrazione del server.
Questo parametro può essere impostato solo all'avvio del server.
       </para>
      </listitem>
     </varlistentry>
     </variablelist>

     <para>
In un'installazione predefinita, nessuno dei parametri sopra è impostato
esplicitamente. Invece, la directory dai dati
viene specificata con l'opzione a linea di comando <option>-D</option>
o la variabile d'ambiente <envar>PGDATA</envar>, e i file di configurazione
si trovano tutti all'interno della directory dei dati. 
     </para>

     <para>
Se si desidera mantenere i file di  configurazione altrove rispetto alla 
directory dei dati, l'opzione  <option>-D</option> di  <command>postgres</command> 
o la variabile d'ambiente <envar>PGDATA</envar> deve puntare 
alla directory contenente i file di configurazione, 
e il parametro <varname>data_directory</varname> deve essere impostato nel 
<filename>postgresql.conf</filename> (o sulla linea di comando) per mostrare 
dove è effettivamente situata la directory dei dati. Notare che 
<varname>data_directory</varname> sovrascrive <option>-D</option> e
<envar>PGDATA</envar> per la posizione della 
directory dei dati, ma non per la posizione dei file di configurazione.
     </para>

     <para>
Se lo si desidera, si possono specificare  i nomi e le posizioni dei file di configurazione
individualmente usando i parametri <varname>config_file</varname>,
<varname>hba_file</varname> e/o <varname>ident_file</varname>.
<varname>config_file</varname> può essere specificato solo dalla linea di comando di 
<command>postgres</command>, ma gli altri possono essere 
impostati all'interno del file di configurazione principale. Se tutti e tre i parametri più
<varname>data_directory</varname> sono impostati esplicitamente, allora non è necessario
specificare <option>-D</option> o <envar>PGDATA</envar>.
     </para>

     <para>
Quando si imposta uno qualsiasi di questi parametri, un percorso relativo sarò interpretato
rispetto alla directory in cui <command>postgres</command>
è avviato.
     </para>
   </sect1>

   <sect1 id="runtime-config-connection">
    <title>Connessioni e autenticazione</title>

    <sect2 id="runtime-config-connection-settings">
     <title>Impostazioni di connessione</title>

     <variablelist>

     <varlistentry id="guc-listen-addresses" xreflabel="listen_addresses">
      <term><varname>listen_addresses</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>listen_addresses</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
Specifica gli indirizzi TCP/IP su cui il server è in ascolto di connessioni
dalle applicazioni client. 
Il valore ha la forma di un elenco di nomi di host separati da virgole e/o
indirizzi IP numerici. La voce speciale <literal>*</literal>
corrisponde a tutte le interfaccie IP disponibili.
Se l'elenco è vuoto, il server non ascolta nessuna interfaccia IP, 
nel qual caso solo i socket di dominio Unix possono essere usati per connettersi 
ad esso.
Il valore predefinito è  <systemitem class="systemname">localhost</systemitem>,
che consente che vengano effettuate solo connessioni locali TCP/IP di <quote>loopback</quote>.
Mentre l'autenticazione del client (<xref
linkend="client-authentication"/>) permette il controllo fine su chi può aavere accesso al server,
<varname>listen_addresses</varname> controlla quali interfaccie accettano 
tentativi di connessione, che può aiutare a prevenire richieste maliziose ripetute 
su interfaccie di rete non sicure. Questo parametro può essere impostato solo
all'avvio del server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-port" xreflabel="port">
      <term><varname>port</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>parametro di configurazione <varname>port</varname></primary>
      </indexterm>
      <listitem>
       <para>
La porta TCP su cui il server è in ascolto; la predefinita è 5432. Si noti che 
lo stesso numero di porta è usato per tutti gli indirizzi IP su cui il server ascolta.
Questo parametro può essere impostato solo all'avvio del server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-connections" xreflabel="max_connections">
      <term><varname>max_connections</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>parametro di configurazione <varname>max_connections</varname></primary>
      </indexterm>
      <listitem>
       <para>
Determina il massimo numero di connessioni concorrenti al server database.
Il valore predefinito tipicamente è 100 connessioni, ma potrebbe essere 
minore se le impostazioni del proprio kernel non lo supportano (come determinato durante
<application>initdb</application>).  Questo parametro può essere impostato solo
all'avvio del server.
       </para>

       <para>
Incrementare questo parametro potrebbe causare che <productname>PostgreSQL</productname>
richieda più memoria condivisa <systemitem class="osname">System V</systemitem> o semafori 
rispetto a quello che permette la configurazione predefinita del sistema operativo.
Si veda <xref linkend="sysvipc"/> per informazioni su come aggiustare 
questi parametri, se necessario. 
       </para>

       <para>
Quando si esegue un server di standby, si deve impostare questo parametro allo 
stesso valore o ad un valore più altro rispetto al server master. Altrimenti, le query non  
saranno permesse nel server standby.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-superuser-reserved-connections"
     xreflabel="superuser_reserved_connections">
      <term><varname>superuser_reserved_connections</varname>
      (<type>integer</type>)</term>
      <indexterm>
       <primary>parametro di configurazione <varname>superuser_reserved_connections</varname></primary>
      </indexterm>
      <listitem>
       <para>
Determina il numero di <quote>slot</quote> di connessione che sono riservati
per connessioni di superutenti di <productname>PostgreSQL</productname>.
Al massimo <xref linkend="guc-max-connections"/> connessioni possono comunque essere attive simultaneamente.
Se il numero di connessioni concorrenti attive è almeno 
<varname>max_connections</varname> meno 
<varname>superuser_reserved_connections</varname>, le nuove connessioni
sarannno accettate solo per superutenti,  e nessuna connessione di replica sarà accettata.
       </para>

       <para>
Il valore predefinito è di tre connessioni. Il valore deve essere minore rispetto al 
valore di <varname>max_connections</varname>. Questo 
parametro può essere impostato solo all'avvio del server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-directory" xreflabel="unix_socket_directory">
      <term><varname>unix_socket_directory</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>parametro di configurazione <varname>unix_socket_directory</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Specifies the directory of the Unix-domain socket on which the
        server is to listen for
        connections from client applications.  
        The default is normally
        <filename>/tmp</filename>, but can be changed at build time.
        This parameter can only be set at server start.
       </para>

       <para>
In aggiunta al file socket stesso, che è chiamato 
<literal>.s.PGSQL.<replaceable>nnnn</replaceable></literal> dove 
<replaceable>nnnn</replaceable> è il numero della porta del server, un file 
chiamato  <literal>.s.PGSQL.<replaceable>nnnn</replaceable>.lock</literal> verrà
creato nella directory <varname>unix_socket_directory</varname>. Nessuno dei due file 
dovrebbe mai essere rimosso manualmente.
       </para>

       <para>
Questo parametro è irrilevante su Windows, che non ha i socket di dominio Unix.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-group" xreflabel="unix_socket_group">
      <term><varname>unix_socket_group</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>unix_socket_group</varname></primary>
      </indexterm>
      <listitem>
       <para>
Imposta il gruppo proprietario del socket di dominio Unix. (L'utente proprietario
del socket è sempre l'utente che avvia il server).
In combinazione con il parametro
<varname>unix_socket_permissions</varname> questo può essere usato come 
un meccanismo di controllo aggiuntivo per connessioni di dominio Unix.
Il valore predefinito è la stringa vuota, che usa il gruppo predefinito 
dell'utente del server. Questo parametro può essere impostato solo all'avvio del server.
       </para>

       <para>
Questo parametro è irrilevante su Windows, che non ha i socket di dominio Unix.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-permissions" xreflabel="unix_socket_permissions">
      <term><varname>unix_socket_permissions</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>parametro di configurazione <varname>unix_socket_permissions</varname></primary>
      </indexterm>
      <listitem>
       <para>
Imposta i permessi di accesso del socket di dominio Unix. I socket di dominio Unix
usano il sistema dei permessi usuale di Unix.
Il valore del parametro sarà una modalità numerica specificata nel formato
accettato dalle chiamate di sistema 
<function>chmod</function> e <function>umask</function>.
(Per usare l'usuale formato ottale il numero deve cominciare con uno
<literal>0</literal> (zero)).
       </para>

       <para>
I permessi predefiniti sono <literal>0777</literal>, che significa che chiunque può
connettersi. Alternative ragionevoli sono 
<literal>0770</literal> (solo l'utente e il gruppo, vedere anche 
<varname>unix_socket_group</varname>) e <literal>0700</literal>
(solo l'utente). (Si noti che per un socket di dominio Unix, solo i permessi 
di scrittura contano, quindi non c'è bisogno di impostare o revocare i permessi di 
lettura o esecuzione).
       </para>

       <para>
Questo meccanismo di controllo degli accessi è indipendente da quello descritto
in  <xref linkend="client-authentication"/>.
       </para>

       <para>
Questo parametro può essere impostato solo all'avvio del server.
       </para>

       <para>
Questo parametro è irrilevante su Windows, che non ha i socket di dominio Unix.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bonjour" xreflabel="bonjour">
      <term><varname>bonjour</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>bonjour</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Enables advertising the server's existence via
        <productname>Bonjour</productname>.  The default is off.
Questo parametro può essere impostato solo all'avvio del server.   
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bonjour-name" xreflabel="bonjour_name">
      <term><varname>bonjour_name</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>parametro di configurazione <varname>bonjour_name</varname></primary>
      </indexterm>
      <listitem>
       <para>
Specifica il nome del servizio <productname>Bonjour</productname>.
Se questo parametro è impostato alla stringa vuota <literal>''</literal> (che è il valore predefinito), 
viene usato il nome del computer. 
Questo parametro viene ignorato se il server
non è stato compilato con il supporto <productname>Bonjour</productname>.
Questo parametro può essere impostato soltanto all'avvio del server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-tcp-keepalives-idle" xreflabel="tcp_keepalives_idle">
      <term><varname>tcp_keepalives_idle</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>tcp_keepalives_idle</varname></primary>
      </indexterm>
      <listitem>
       <para>
Specifica il numero di secondi prima di mandare un pacchetto keepalive su
un altra connessione idle. Un valore 0 usa  il valore predefinito di sistema.
Questo parametro è supportato solo su sistemi che supportano i simboli 
<symbol>TCP_KEEPIDLE</symbol> or <symbol>TCP_KEEPALIVE</symbol>, e su 
Windows; su altri sistemi, deve essere zero. Questo parametro è ignorato
per connessioni fatte attravero un socket di dominio Unix. 
       </para>
       <note>
        <para>
Su Windows, un valore 0 imposterà questo parametro a 2 ore, 
dato che Windows non fornisce un modo per leggere il valore predefinito del sistema. 
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-tcp-keepalives-interval" xreflabel="tcp_keepalives_interval">
      <term><varname>tcp_keepalives_interval</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>tcp_keepalives_interval</varname></primary>
      </indexterm>
      <listitem>
       <para>
Specifica il numero di secondi tra le 'mandate' dei keepalive a un'altra connessione 
idle. Un valore 0 usa il valore predefinito di sistema. 
Questo parametro è supportato solo su sistemi che supportano il simbolo
<symbol>TCP_KEEPINTVL</symbol>,  e su Windows; su altri sistemi, deve essere zero.
Questo parametro viene ignorato per connessioni fatte attraverso un socket di dominio Unix.
       </para>
       <note>
        <para>
Su Windows, il valore 0 imposterà questo parametro a 1 secondo,
dato che Windows non prevede un modo per leggere il valore predefinito del sistema.
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-tcp-keepalives-count" xreflabel="tcp_keepalives_count">
      <term><varname>tcp_keepalives_count</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>tcp_keepalives_count</varname></primary>
      </indexterm>
      <listitem>
       <para>
Specifica il numero di pacchetti da mandare ad un'altra connessione idle. 
Un valore 0 usa il valore predefinito del sistema. Questo parametro è supportato solo su
sistemi che supportano il simbolo <symbol>TCP_KEEPCNT</symbol>; su altri sistemi,
deve essere zero. Questo parametro viene ignorato 
per connessioni fatte attraverso un socket di dominio Unix.
       </para>
       <note>
        <para>
Questo parametro non è supportato su Windows, e deve essere zero.
        </para>
       </note>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-connection-security">
     <title>Sicurezza e autenticazione</title>

     <variablelist>
     <varlistentry id="guc-authentication-timeout" xreflabel="authentication_timeout">
      <term><varname>authentication_timeout</varname> (<type>integer</type>)</term>
      <indexterm><primary>timeout</primary><secondary>autenticazione del client</secondary></indexterm>
      <indexterm><primary>client authentication</primary><secondary>durante il timeout</secondary></indexterm>
      <indexterm>
       <primary>Parametro di configurazione <varname>authentication_timeout</varname></primary>
      </indexterm>

      <listitem>
       <para>
Il tempo massimo per completare l'autenticazione del client, in secondi. Se un possibile client
non ha completato il protocollo di autenticazione in questo tempo, 
il server chiude la connessione. Questo previene che client in attessa occupino 
una connessione all'infinito.
Il valore predefinito è un minuto (<literal>1m</literal>).
Questo parametro può essere impostato solo nel file <filename>postgresql.conf</filename>
o dalla linea di comando del server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl" xreflabel="ssl">
      <term><varname>ssl</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>ssl</varname></primary>
      </indexterm>
      <listitem>
       <para>
Abilita le connessioni <acronym>SSL</acronym>. Si prega di leggere 
<xref linkend="ssl-tcp"/> prima di usarlo. Il valore predefinito
è <literal>off</literal>. Questo parametro può essere impostato solo all'avvio 
del server. La comunicazione <acronym>SSL</acronym> è possibile solo con
connessioni TCP/IP.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-renegotiation-limit" xreflabel="ssl_renegotiation_limit">
      <term><varname>ssl_renegotiation_limit</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>ssl_renegotiation_limit</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Specifies how much data can flow over an <acronym>SSL</acronym>-encrypted
        connection before renegotiation of the session keys will take
        place. Renegotiation decreases an attacker's chances of doing
        cryptanalysis when large amounts of traffic can be examined, but it
        also carries a large performance penalty. The sum of sent and received
        traffic is used to check the limit. If this parameter is set to 0,
        renegotiation is disabled. The default is <literal>512MB</literal>.
       </para>
       <note>
        <para>
Le librerie SSL precedenti a Novembre 2009 sono insicure quando si usa la rinegoziazione 
SSL, a causa di una vulnerabilità nel protocollo SSL. Come correzione per questa 
vulnerabilità, alcuni produttori distribuiscono le librerie SSL incapaci di eseguire 
la rinegoziazione. Se una qualsiasi di queste librerie è in uso 
sul client o sul server, la rinegoziazione SSL dovrebbe essere disabilitata. 
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-ciphers" xreflabel="ssl_ciphers">
      <term><varname>ssl_ciphers</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>ssl_ciphers</varname></primary>
      </indexterm>
      <listitem>
       <para>
Specifica un elenco di cipher <acronym>SSL</acronym> che è possibile usare in connessioni 
sicure. Si veda la pagina di mauale di <application>openssl</application>
per un elenco di cifre supportate. 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-password-encryption" xreflabel="password_encryption">
      <term><varname>password_encryption</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>password_encryption</varname></primary>
      </indexterm>
      <listitem>
       <para>
Quando una password viene specificata in <xref
linkend="sql-createuser"/> o
<xref linkend="sql-alteruser"/>
senza scrivere nè <literal>ENCRYPTED</literal> nè 
<literal>UNENCRYPTED</literal>, questo parametro determina se la password è stata criptata.
Il valore predefinito è <literal>on</literal>
(cripta la password).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-server-keyfile" xreflabel="krb_server_keyfile">
      <term><varname>krb_server_keyfile</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>krb_server_keyfile</varname></primary>
      </indexterm>
      <listitem>
       <para>
Imposta la posizione del file Kerberos di chiave del server. Si veda 
<xref linkend="kerberos-auth"/> o <xref linkend="gssapi-auth"/> 
per dettagli. Questo parametro può essere impostato nel file 
<filename>postgresql.conf</filename> o dalla linea di comando del server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-srvname" xreflabel="krb_srvname">
      <term><varname>krb_srvname</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>krb_srvname</varname></primary>
      </indexterm>
      <listitem>
       <para>
Impostare il nome del servizio Kerberos. Si veda <xref linkend="kerberos-auth"/>
per dettagli. Questo parametro può essere impostato solo nel file 
<filename>postgresql.conf</filename> o dalla linea di comando del server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-caseins-users" xreflabel="krb_caseins_users">
      <term><varname>krb_caseins_users</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>krb_caseins_users</varname></primary>
      </indexterm>
      <listitem>
       <para>
Imposta se i nomi utente Kerberos e GSSAPI dovrebbero essere trattati senza 
considerare il case. 
Il valore predefinito è <literal>off</literal> (non considera il case). Questo parametro può essere
impostato solo nel file  <filename>postgresql.conf</filename> o dalla linea di comando del server. 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-db-user-namespace" xreflabel="db_user_namespace">
      <term><varname>db_user_namespace</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>db_user_namespace</varname></primary>
      </indexterm>
      <listitem>
       <para>
Questo parametro abilita i nomi utente per database. Il valore predefinito è off.
Questo parametro può essere impostato solo nel file <filename>postgresql.conf</filename>
o dalla linea di comando del server.
       </para>

       <para>
Se è impostato ad on, di dovrebbe creare utenti tipo <literal>username@dbname</literal>.
Quando <literal>username</literal> viene passato da un client che si sta connettendo, 
<literal>@</literal> e il nome del database sono aggiunti in coda al nome utente  
e quel nome utente specifico del database è cercato dal server.
Si noti che quando si creano utenti con nomi contenenti 
<literal>@</literal> all'interno dell'ambiente SQL, si avrà bisogno di 
quotare il nome utente.
       </para>

       <para>
Con questo parametro abilitato, è possibile comunque creare utenti globali ordinari.
Aggiungere semplicemente <literal>@</literal> quando si specifica il nome utente nel client, 
per esempio <literal>joe@</literal>. La <literal>@</literal>
sarà tolta prima che il nome utente venga cercatp daò server.
       </para>

       <para>
<varname>db_user_namespace</varname> causa che le rappresentazioni del nome utente 
da parte del client e del server differiscano.
I controlli di autenticazione sono fatti sempre con il nome utente del server
quindi i metodi di autenticazione devono essere configurati per
il nome utente del server, non del client. Dato che 
<literal>md5</literal> usa il nome utente come salt(?) sia sul client che il server,
<literal>md5</literal> non può essere usato con
<varname>db_user_namespace</varname>.
       </para>

       <note>
        <para>
Questa caratteristica viene intesa come misura temporanea finchè non viene 
trovata una soluzione completa. In quel momento, questa opzione sarà rimossa.
        </para>
       </note>
      </listitem>
     </varlistentry>

    </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-resource">
    <title>Consumo di risorse</title>

    <sect2 id="runtime-config-resource-memory">
     <title>Memoria</title>

     <variablelist>
     <varlistentry id="guc-shared-buffers" xreflabel="shared_buffers">
      <term><varname>shared_buffers</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>shared_buffers</varname></primary>
      </indexterm>
      <listitem>
       <para>
Imposta l'ammontare di memoria che il server database usa per i buffer 
di memoria condivisa. Il valore predefinito è tipicamente 32 megabyte
(<literal>32MB</literal>), ma potrebbe essere meno se le impostazioni del kernel 
non lo supportano (come determinato durante l'<application>initdb</application>).
Questa impostazione deve essere almeno 128 kilobytes. (Valori non predefiniti 
di <symbol>BLCKSZ</symbol> cambiano il minimo). Comunque, 
impostazioni significativamente maggiori rispetto al minimo sono di solito necessarie 
per buone prestazioni. Questo parametro può essere impostato solo all'avvio del server.
       </para>

       <para>
Se si ha un server database dedicato con 1GB o più di RAM, un valore di partenza ragionevole
per <varname>shared_buffers</varname> è il 25% della memoria del sistema.
Ci sono molti carichi di lavoro anche dove sono in vigore grandi valori per
<varname>shared_buffers</varname>, ma dato che <productname>PostgreSQL</productname>
fa affidamento anche sulla cache del sistema operativo, è improbabile che un'allocazione
di più del 40% della RAM per <varname>shared_buffers</varname> funzionerà meglio rispetto
a un quantitativo minore. Impostazioni più grandi per  <varname>shared_buffers</varname>
di solito richiedono un incremento corrispondente in
<varname>checkpoint_segments</varname>, per diffondere il processo  
di scrittura di grandi quantità di dati nuovi o cambiati in un periodo di tempo più lungo.
       </para>

       <para>
Su sistemi con meno di 1GB di RAM, una percentuale di RAM più piccola è appropriata,
quindi da lasciare spazio adeguato per il sistema operativo.
Inoltre, su Windows, valori grandi per  <varname>shared_buffers</varname>
non sono così efficaci. Si potrebbero  avere risultati migliori mantenendo il valore 
relativamente basso e usando maggiormente la cache del sistema operativo. L'intervallo  
utile per <varname>shared_buffers</varname> su sistemi Windows è generalmente 
da 64MB a 512MB.
       </para>

       <para>
Incrementare questo parametro potrebbe causare che <productname>PostgreSQL</productname>
richieda più memoria <systemitem class="osname">System V</systemitem> condivisa
rispetto a quello che permette il valore predefinito del sistema operativo.
Si veda  <xref linkend="sysvipc"/> per informazioni su come aggiustare questi parametri, se necessario. 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-temp-buffers" xreflabel="temp_buffers">
      <term><varname>temp_buffers</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>temp_buffers</varname></primary>
      </indexterm>
      <listitem>
       <para>
Imposta il massimo numero di butter temporanei usati da ogni sessione di database.
Questi sono buffer locali alla sessione usati solo per accedere a 
tabelle temporanee. Il valore predefinito è otto megabyte 
(<literal>8MB</literal>). L'impostazione può essere cambiata all'interno di sessioni individuali, 
ma solo prima del primo utilizzo di tabelle temporanee all'interno della sessione;
tentativi successivi di cambiare il valore non avranno effetto su quella sessione.
       </para>

       <para>
Una sessione allocherà buffer temporanei come richiesto dal limite 
fornito da <varname>temp_buffers</varname>. Il costo di impostare un valore grande 
in sessioni che effettivamente non necessitano di molti buffer temporanei
è solo quello di un destrittore di buffer, o circa 64 byte per 
incremento in <varname>temp_buffers</varname>.  Comunque se un buffer è 
effettivamente usato, 8192 byte aggiuntivi saranno consumati (o 
in generale,  <symbol>BLCKSZ</symbol> byte).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-prepared-transactions" xreflabel="max_prepared_transactions">
      <term><varname>max_prepared_transactions</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>max_prepared_transactions</varname></primary>
      </indexterm>
      <listitem>
       <para>
Imposta il numero massimo di transazioni che possono essere in stato 
<quote>prepared</quote> simultaneamente (si veda <xref
linkend="sql-prepare-transaction"/>).
Impostare questo parametro a zero (che è il valore predefinito)
disabilita la caratteristica delle transazioni preparate.
Questo parametro può essere impostato solo all'avvio del server.
       </para>

       <para>
Se non si pensa di dover usare le transazioni preparate, questo parametro
dovrebbe essere impostato a zero per prevenire la creazione accidentale di 
transazioni preparate. Se si sta usando le transazioni preparate, probabilmente
si vorrà che  <varname>max_prepared_transactions</varname> sia grande almeno  
quanto  <xref linkend="guc-max-connections"/>, così che ogni  
sessione possa avere una transazione preparata in sospeso.
       </para>

       <para>
Incrementare questo parametro potrebbe causare che  <productname>PostgreSQL</productname>
richieda maggiore memoria  <systemitem class="osname">System V</systemitem> condivisa  
rispetto a quello che permette la configurazione predefinita del sistema operativo.
Si veda  <xref linkend="sysvipc"/> per informazioni su come aggiustare  
questi parametri, se necessario.
       </para>

       <para>
Quando si esegue un server standby, si deve impostare questo parametro allo 
stesso o a un valore maggiore rispetto al server master. Altrimenti, le query 
non saranno permesse nel server standby.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-work-mem" xreflabel="work_mem">
      <term><varname>work_mem</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>work_mem</varname></primary>
      </indexterm>
      <listitem>
       <para>
Specifica l'ammontare di memoria che deve essere usata da operazioni di ordinamento interne 
e dalle tabelle hash prima di scrivere in file disco temporanei. Il valore
predefinito è un megabyte (<literal>1MB</literal>).
Si noti che per una query complessa, diverse operazioni di ordinamento o hash potrebbero essere
eseguite in parallelo; ogni operazione potrà usare tanta memoria quanto specificato 
da questo valore prima che cominci a scrivere dati in file temporanei. 
Inoltre, diverse sessioni in esecuzione potrebbero fare tali operazioni 
concorrentemente. Perciò, la memoria totale usata potrebbe essere molte volte
più grande di <varname>work_mem</varname>;  è necessario tenerlo a mente
quando si sceglie il valore. Operazioni di ordinamento sono 
usate per <literal>ORDER BY</literal>, <literal>DISTINCT</literal> e
join merge.
        Hash tables are used in hash joins, hash-based aggregation, and
        hash-based processing of <literal>IN</literal> subqueries.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-maintenance-work-mem" xreflabel="maintenance_work_mem">
      <term><varname>maintenance_work_mem</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>maintenance_work_mem</varname></primary>
      </indexterm>
      <listitem>
       <para>
Specifica l'ammontare di mamoria massimo da usare per operazioni di manutenzione, 
tipo <command>VACUUM</command>, <command>CREATE
INDEX</command> e <command>ALTER TABLE ADD FOREIGN KEY</command>. Il valore predefinito è
16 megabyte (<literal>16MB</literal>). Dato che solo una di queste
operazioni può essere eseguita alla volta da una sessione di database, e
normalmente un'installazione non ne ha molte in esecuzione 
consorrentememte, è sicuro impostare questo valore significativamente maggiore rispetto a
<varname>work_mem</varname>. Valori maggiori potrebbero aumentare le prestazioni 
del vacuum e del ripristino dei dump del database.
       </para>
       <para>
Si noti che quando autovacuum è in esecuzione, questa memoria potrebbe essere allocata 
<xref linkend="guc-autovacuum-max-workers"/> volte, quindi fare attenzione 
a non impostare un valore predefinito troppo alto.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-stack-depth" xreflabel="max_stack_depth">
      <term><varname>max_stack_depth</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>max_stack_depth</varname></primary>
      </indexterm>
      <listitem>
       <para>
Specifica la profondità massima sicura dello stack di esecuzione del server.
L'impostazione ideale per questo parametro è l'effettivo limite della dimensione dello 
stack forzato dal kernel (come impostato da <literal>ulimit -s</literal> o un equivalente locale),
meno un margine di sicurezza di un megabyte o più. Il margine di sicurezza 
è necessario perchè la profondità dello stack non viene controllata in ogni routine del 
server, ma solo in routine chiave potenzialmente ricorsive tipo valutazioni di espressione.
L'impostazione predefinita è due megabyte (<literal>2MB</literal>), che è 
prudentemente piccola e non a rischio di crash. Comunque, potrebbe essere troppo piccolo
per permettere l'esecuzione di funzioni complesse. Solo i superutenti 
possono cambiare questa impostazione.
       </para>

       <para>
Impostare <varname>max_stack_depth</varname> a un valore maggiore rispetto al 
limite effettivo del kernel significherà che una funzione ricorsiva incontrollata
possa bloccare un processo di backend individuale. Su piattaforme dove
<productname>PostgreSQL</productname> può determinare il limite del kernel,
il server non permetterà che questa variabile sia impostata a un valore non sicuro.
Comunque, non tutte le piattaforme forniscono questa informazione, 
quindi si raccomanda cautela quando si sceglie un valore.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>

     <sect2 id="runtime-config-resource-kernel">
     <title>Utilizzo delle risorse del kernel</title>
     <variablelist>

     <varlistentry id="guc-max-files-per-process" xreflabel="max_files_per_process">
      <term><varname>max_files_per_process</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>max_files_per_process</varname></primary>
      </indexterm>
      <listitem>
       <para>
Imposta il massimo numero di file aperti simultaneamente permessi ad ogni sottoprocesso del server.
Il valore predefinito è mille file. Se il kernel sta forzando 
un limite sicuro per processo, non ci si deve preoccupare di questa impostazione. 
Ma su alcune piattaforme (specialmente la maggior parte dei sistemi BSD), il kernel 
permetterà a processi individuali di aprire molti più file rispetto a quello 
che il sistema supporta effettivamente se molti processi provano ad aprire 
così tanti file. Se si trovano fallimenti di tipo <quote>Too many open
files</quote>, provare a ridurre questa impostazione. 
Questo parametro può essere impostato solo all'avvio del server.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-shared-preload-libraries" xreflabel="shared_preload_libraries">
      <term><varname>shared_preload_libraries</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>shared_preload_libraries</varname></primary>
      </indexterm>
      <listitem>
       <para>
Questa variabile specifica una o più librerie condivise da essere 
precaricata all'avvio del server. Per esempio, 
<literal>'$libdir/mylib'</literal>  causerebbe che 
<literal>mylib.so</literal> (o <literal>mylib.sl</literal>
su alcune piattaforme) sia precaricata dalla directory predefinita  delle librerie.
Tutti i nomi delle librerie sono convertiti in minuscolo a meno che non siano tra doppi apici.
Se più di una libreria deve essere caricata, separare i loro nomi con virgole. 
Questo parametro può essere impostato solo all'avvio del server.
       </para>

       <para>
Le librerie dei linguaggi procedurali di <productname>PostgreSQL</productname> possono  
essere precaricate  in questo modo, tipicamente usando la sintassi
<literal>'$libdir/plXXX'</literal> dove  
<literal>XXX</literal> è <literal>pgsql</literal>, <literal>perl</literal>,
<literal>tcl</literal> o <literal>python</literal>.
       </para>

       <para>
Precaricando una libreria condivisa, viene evitato il tempo di avvio della libreria
quando la libreria viene usata per la prima volta. Comunque, il tempo per l'avvio 
di ogni processo server potrebbe incrementare sensibilmente, anche se quel processo 
non usa mai la libreria. Quindi questo parametro è raccomandato solo per
librerie che saranno usate nella maggior delle sessioni.
       </para>

     <note>
      <para>
Su host Windows, precaricare una libreria all'avvio del server non ridurrà
il tempo richiesto per l'avvio di ogni nuovo processo server; ogni processo server
ricaricherà ogni libreria precaricata. Comunque, <varname>shared_preload_libraries</varname>
è utile su host Windows perchè alcune librerie condivise potrebbero aver bisogno di 
eseguire certe operazioni che si verificano solo all'avvio di postmaster
(per esempio, una libreria condivisa potrebbe voler riservare lock leggeri 
o memoria condivisa e non si può fare ciò dopo che il postmaster è partito).
       </para>
      </note>
       <para>
Se una libreria specificata non viene trovata,
il server non fallirà nel tentativo di avviarsi.
       </para>

       <para>
Ogni libreria supportata da PostgreSQL ha un <quote>blocco magico</quote>
che viene controllato per garantire la compatibilità.
Per questa ragione, le librerie non PostgreSQL non possono essere caricate 
in questa maniera.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-resource-vacuum-cost">
     <title>Ritardo del vacuum basato sul costo</title>

     <para>
Durante l'esecuzione dei comandi <xref linkend="sql-vacuum"/> 
e <xref linkend="sql-analyze"/>, il sistema mantiene 
un contatore interno che tiene traccia del costo stimato delle 
varie operazioni di I/O che vengono svolte. Quando il costo accumulato
raggiunge un limite (specificato da 
<varname>vacuum_cost_limit</varname>), il processo che esegue 
l'operazione attenderà per un breve periodo di tempo, come specificato da
<varname>vacuum_cost_delay</varname>. Quindi azzererà il contatore e 
continuerà l'esecuzione.
     </para>

     <para>
L'intento di questa caratteristica è di permettere agli amministratori di 
ridurre l'impatto di questi comandi di I/O sull'attività di database concorrenti. 
Ci sono molte situazioni dove non è importante 
che comandi di manutenzione tipo <command>VACUUM</command> e <command>ANALYZE</command>
finiscano velocemente; comunque, di solito è molto importante che questi
comandi non interferiscano significativamente con l'abilità del sistema 
di eseguire altre operazioni del database. Il ritardo del vacuum basato sul costo
fornisce agli amministratori  un modo di evitare ciò.
     </para>

     <para>
Questa caratteristica è disabilitata in modo predefinito per comandi 
<command>VACUUM</command> manuali. Per abilitarla, impostare la variabile 
<varname>vacuum_cost_delay</varname> a un valore diverso da zero.
     </para>

     <variablelist>
      <varlistentry id="guc-vacuum-cost-delay" xreflabel="vacuum_cost_delay">
       <term><varname>vacuum_cost_delay</varname> (<type>integer</type>)</term>
       <indexterm>
        <primary>Parametro di configurazione <varname>vacuum_cost_delay</varname></primary>
       </indexterm>
       <listitem>
        <para>
La lunghezza del tempo, in millisecondi, che il processo aspetterà
quando è stato ecceduto il limite di costo.
Il valore predefinito è zero, che disabilita la caratteristica di ritardo del vacuum 
basata sul costo. Valori positivi abilitano il vacuum basato sul costo.
Si noti che su molti sistemi, la risoluzione effettiva 
dei ritardi di attesa è 10 millisecondi; impostare 
<varname>vacuum_cost_delay</varname> a un valore che non è multiplo di 
10 potrebbe avere gli stessi risultati di impostarlo al
successivo multiplo di 10.
        </para>

        <para>
Quando si usa il vacuum basato sul costo, valori appropriati per 
<varname>vacuum_cost_delay</varname> di solito sono abbastanza piccoli, forse 
10 o 20 millisecondi. Aggiustare il consumo delle risorse di vacuum
è fatto meglio cambiando gli altri parametri di costo del vacuum.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-page-hit" xreflabel="vacuum_cost_page_hit">
       <term><varname>vacuum_cost_page_hit</varname> (<type>integer</type>)</term>
       <indexterm>
        <primary>Parametro di configurazione <varname>vacuum_cost_page_hit</varname></primary>
       </indexterm>
       <listitem>
        <para>
Il costo stimato per sottoporre a vacuum un buffer trovato nel buffer di cache condiviso.
Rappresenta il costo per sottoporre a lock il pool del buffer, trovare la 
tabella hash condivisa e scansionare il contenuto della pagina. Il valore predefinito è uno.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-page-miss" xreflabel="vacuum_cost_page_miss">
       <term><varname>vacuum_cost_page_miss</varname> (<type>integer</type>)</term>
       <indexterm>
        <primary>Parametro di configurazione <varname>vacuum_cost_page_miss</varname></primary>
       </indexterm>
       <listitem>
        <para>
Il costo stimato per fare il vacuum di un buffer che deve essere letto da disco.
Questo rappresenta lo sforzo di sottoporre a lock il pool di buffer, 
trovare la tabella hash condivisa, leggere da disco  il blocco desiderato
e scansionare il suo contenuto. Il valore predefinito è 10.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-page-dirty" xreflabel="vacuum_cost_page_dirty">
       <term><varname>vacuum_cost_page_dirty</varname> (<type>integer</type>)</term>
       <indexterm>
        <primary>Parametro di configurazione <varname>vacuum_cost_page_dirty</varname></primary>
       </indexterm>
       <listitem>
        <para>
Il costo stimato speso quando il vacuum modifica un blocco che è stato pulito  
precedentemente. Esso rappresenta l'I/O aggiuntivo richiesto per 
eliminare i blocchi sporchi dal disco. Il valore predefinito è 20.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-limit" xreflabel="vacuum_cost_limit">
       <term><varname>vacuum_cost_limit</varname> (<type>integer</type>)</term>
       <indexterm>
        <primary>Parametro di configurazione <varname>vacuum_cost_limit</varname></primary>
       </indexterm>
       <listitem>
        <para>
Il costo accumulato che causerà il ritardo del processo di vacuum. 
Il valore predefinito è 20.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <note>
      <para>
Ci sono certe operazioni che trattengono lock critici e dovrebbero
quindi completarsi il più velocemente possibile. I ritardi del vacuum basati sul 
costo non avvengono durante tali operazioni. Perciò è possibile 
che il costo aumenti rispetto al limite specificato. Per evitare 
ritardi inutilmente lunghi in questi casi, l'effettivo ritardo è 
calcolato come <varname>vacuum_cost_delay</varname> *
<varname>accumulated_balance</varname> /
<varname>vacuum_cost_limit</varname> con un massimo di
<varname>vacuum_cost_delay</varname> * 4.
      </para>
     </note>
    </sect2>

    <sect2 id="runtime-config-resource-background-writer">
     <title>Background Writer</title>

     <para>
C'è un processo server separato chiamato
<firstterm>background writer</firstterm>, la cui funzione è 
di fornire scritture di buffer condividi <quote>sporchi</quote> (nuovi o modificati).
Esso scrive i buffer condivisi così che i processi server che gestiscono 
le query dell'utente non hanno mai (o raramente) bisogno di aspettare che avvenga una scrittura.
Comunque, il background writer non causa un incremento generale 
del carico di I/O della rete, dato che mentre una pagina sporcata ripetutamente 
potrebbe altrimenti essere scritta solo una volta per intervallo di checkpoint,
il background writer potrebbe scriverla diverse volte dato che viene sporcata 
nello stesso intervallo. I parametri discussi in questa sottosezione 
possono essere usati per mettere a punto il comportamento per necessità locali.
     </para>

     <variablelist>
      <varlistentry id="guc-bgwriter-delay" xreflabel="bgwriter_delay">
       <term><varname>bgwriter_delay</varname> (<type>integer</type>)</term>
       <indexterm>
        <primary>Parametro di configurazione <varname>bgwriter_delay</varname></primary>
       </indexterm>
       <listitem>
        <para>
Specifica il ritardo tra i turni di attività per il background writer.
Ad ogni turno il writer esegue scritture per un certo numero di buffer 
sporchi (controllabili dai seguenti parametri).
Quindi aspetta per <varname>bgwriter_delay</varname> millisecondi,
e ricomincia. Il valore predefinito è 200 millisecondi 
(<literal>200ms</literal>). Si noti che su molti sistemi, la reale risoluzione dei 
ritardi di attesa è 10 millisendi; specificare
<varname>bgwriter_delay</varname> a un valore che non è multiplo di 
10 potrebbe avere gli stessi risultati di impostarlo al successivo multiplo di 10. 
Questo parametro può essere impostato solo nel file <filename>postgresql.conf</filename>
o dalla linea di comando del server.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-lru-maxpages" xreflabel="bgwriter_lru_maxpages">
       <term><varname>bgwriter_lru_maxpages</varname> (<type>integer</type>)</term>
       <indexterm>
        <primary>Parametro di configurazione <varname>bgwriter_lru_maxpages</varname></primary>
       </indexterm>
       <listitem>
        <para>
Ad ogni turno, non più di questo numero di buffer sarà scritto 
dal background writer. Impostarlo a zero disabilita 
le scritture in background (ad eccezione dell'attività per i checkpoint).
Il valore predefinito è 100 buffer.
Questo parametro può essere impostato solo nel file <filename>postgresql.conf</filename>
o nella linea di comando del server.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-lru-multiplier" xreflabel="bgwriter_lru_multiplier">
       <term><varname>bgwriter_lru_multiplier</varname> (<type>floating point</type>)</term>
       <indexterm>
        <primary>Parametro di configurazione <varname>bgwriter_lru_multiplier</varname></primary>
       </indexterm>
       <listitem>
        <para>
Il numero di buffer sporchi scritti ad ogni giro è basato sul numero di 
nuovi buffer che sono stati necessari ai processi server durante 
i turni recenti. Il bisogno medio recente viene moltiplicato per 
<varname>bgwriter_lru_multiplier</varname> per arrivare a una stima del numero di buffer
che saranno necessari durante il prossimo giro. I buffer sporchi 
vengono scritti finchè ci sono molti buffer puliti e riusabili disponibili.
(Comunque, non più di <varname>bgwriter_lru_maxpages</varname> buffer 
saranno scritti ad ogni giro).
Così, il valore 1.0 rappresenta una politica di scrittura <quote>in tempo reale</quote>
di esattamente il numero di buffer necessari previsti.
Valori maggiori forniscono protezione rispetto a picchi di domande, 
mentre valori inferiori lasciano intenzionalmente che le scritture siano fatte
dai processi server.
Il valore predefinito è 2.0.
Questo parametro può essere impostato solo nel file <filename>postgresql.conf</filename>
o nella linea di comando del server.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <para>
Valori più piccoli di <varname>bgwriter_lru_maxpages</varname> e
<varname>bgwriter_lru_multiplier</varname> riducono il carico aggiuntivo di I/O 
causato dal background writer, ma rendono più probabile che i processi server
dovranno eseguire le scritture loro stessi, ritardando le query interattive.
     </para>
    </sect2>

    <sect2 id="runtime-config-resource-async-behavior">
     <title>Comportamento asincrono</title>

     <variablelist>
      <varlistentry id="guc-effective-io-concurrency" xreflabel="effective_io_concurrency">
       <term><varname>effective_io_concurrency</varname> (<type>integer</type>)</term>
       <indexterm>
        <primary>Parametro di configurazione <varname>effective_io_concurrency</varname></primary>
       </indexterm>
       <listitem>
        <para>
Imposta il numero di operazioni I/O su disco che <productname>PostgreSQL</productname>
si aspetta possano essere eseguite simultaneamente.
Aumentare questo valore incrementerà il numero di operazioni di I/O
che qualsiasi sessione individuale di <productname>PostgreSQL</productname>
tenta di iniziare in parallelo. L'intervallo permesso è da 1 a 1000,
o zero per disabilitare l'emissione di richieste di I/O asincrone.
        </para>

        <para>
         A good starting point for this setting is the number of separate
         drives comprising a RAID 0 stripe or RAID 1 mirror being used for the
         database.  (For RAID 5 the parity drive should not be counted.)
         However, if the database is often busy with multiple queries issued in
         concurrent sessions, lower values may be sufficient to keep the disk
         array busy.  A value higher than needed to keep the disks busy will
         only result in extra CPU overhead.
        </para>

        <para>
         For more exotic systems, such as memory-based storage or a RAID array
         that is limited by bus bandwidth, the correct value might be the
         number of I/O paths available.  Some experimentation may be needed
         to find the best value.
        </para>

        <para>
L'I/O asincrono dipende dalla reale funzione <function>posix_fadvise</function>,
che manca in alcuni sistemi operativi. Se la funzione non è presente 
allora impostare questo parametro a qualsiasi valore eccetto zero causerà un 
errore. Su alcuni sistemi operativi (per es., Solaris), la funzione 
è presente ma in realtà non fa niente.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-wal">
    <title>Write Ahead Log</title>

   <para>
Si veda anche  <xref linkend="wal-configuration"/> per dettagli sulla
messa a punto sul WAL e i checkpoint.
   </para>

    <sect2 id="runtime-config-wal-settings">
     <title>Impostazioni</title>
     <variablelist>

     <varlistentry id="guc-wal-level" xreflabel="wal_level">
      <term><varname>wal_level</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>wal_level</varname></primary>
      </indexterm>
      <listitem>
       <para>
<varname>wal_level</varname> determina quante informazioni sono scritte
nel WAL. Il valore predefinito è <literal>minimal</literal>, che scrive
solo le informazione necessarie a recuperare da un crash o un arresto immediato.
<literal>archive</literal> aggiunge i log richiesti per l'archiviazione WAL,
e <literal>hot_standby</literal> aggiunge ulteriormente informazioni richieste per eseguire 
query in sola lettura su un server standby.  
Questo parametro può essere impostato solo all'avvio del server.
       </para>
       <para>
Nel livello  <literal>minimal</literal>, il log WAL di alcune operazioni di massa, come
<command>CREATE INDEX</command>, <command>CLUSTER</command> e <command>COPY</command> su
una tabella che è stata creata o troncata nella stessa transazione può essere saltato 
in maniera sicura, il che può rendere queste operazioni molto più veloci (si veda
<xref linkend="populate-pitr"/>). Ma WAL minimali non contengono
abbastanza informazioni per ricostruire i dati a partire da un backup di base e dai
log WAL, quindi i livelli <literal>archive</literal> o  <literal>hot_standby</literal>
devono essere usati per abilitare 
l'archiviazione WAL (<xref linkend="guc-archive-mode"/>) e la replica streaming.
       </para>
       <para>
Nel livello <literal>hot_standby</literal>, le stesse informazioni sono salvate nel log come
con <literal>archive</literal>, più informazioni necessarie a ricostruire 
lo stato di transazioni in esecuzione dallo WAL. Per abilitare query in sola lettura
su un server standby, <varname>wal_level</varname> deve essere impostato a 
<literal>hot_standby</literal>  sul primario, e
<xref linkend="guc-hot-standby"/> deve essere abilitato nello standby. È
sensato che ci sia 
una piccola differenza misurabile nelle prestazioni tra usare 
i livelli <literal>hot_standby</literal> e <literal>archive</literal>, quindi sono 
benvenuti riscontri da parte vostra se avvengono impatti evidenti in produzione.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-fsync" xreflabel="fsync">
      <indexterm>
       <primary>Parametro di configurazione <varname>fsync</varname></primary>
      </indexterm>
      <term><varname>fsync</varname> (<type>boolean</type>)</term>
      <listitem>
       <para>
Se questo parametro è attivo, il server <productname>PostgreSQL</productname>
proverà ad assicurarsi che gli aggiornamenti siano scritti fisicamente su disco,
eseguendo chiamate di sistema <function>fsync()</function> o vari metodi equivalenti
(si veda <xref linkend="guc-wal-sync-method"/>).
Questo assicura che il cluster database possa recuperare a uno stato consistente
dopo un blocco del sistema operativo o dell'hardware.
       </para>

       <para>
Mentre disabilitare <varname>fsync</varname> spesso è un beneficio in termini di 
prestazioni, questo può risultare in corruzione irrecuperabile dei dati 
in caso di blocco o arresto inaspettato del sistema. Così
è consigliabile disabilitare <varname>fsync</varname> se 
è possibile ricreare facilmente l'intero database a partire da dati esterni.
       </para>

       <para>
Esempi di circostanze sicure per disabilitare 
<varname>fsync</varname> includono il caricamento iniziale di un 
nuovo cluster di database a partire da un file di backup, l'uso di un cluster 
per l'elaborazione di statistiche all'ora che vengono quindi ricreate,
o per un clone in sola lettura del database che viene ricreato frequentemente
e non viene usato per il failover. Hardware di alta qualità da solo non è  
sufficiente a giustificare la disabilitazione di 
<varname>fsync</varname>.
       </para>

       <para>
In molte situazioni, disabilitare <xref linkend="guc-synchronous-commit"/>
per le transazioni non critiche può fornire molti dei potenziali benefici 
equivalenti a disattivare <varname>fsync</varname>, senza
i rischi collegati di corruzione di dati.
       </para>

       <para>
<varname>fsync</varname> può essere impostato solo nel file <filename>postgresql.conf</filename>
o dalla linea di comando del server.
Se di disabilita questo parametro, considerare anche la disabilitazione di 
<xref linkend="guc-full-page-writes"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-synchronous-commit" xreflabel="synchronous_commit">
      <term><varname>synchronous_commit</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>synchronous_commit</varname></primary>
      </indexterm>
      <listitem>
       <para>
Specifica se il commit della transazione aspetterà che i record WAL siano scritti
su disco prima che il comando restituisca un indicazione di <quote>successo</quote>
al client. L'impostazione predefinita, e sicura, è 
<literal>on</literal>. Quando impostato a <literal>off</literal>, ci può essere un ritardo 
tra quando viene riportato il successo al client e quando la transazione è
veramente garantita essere sicura rispetto a un blocco del server. (Il massimo
ritardo è tre volte <xref linkend="guc-wal-writer-delay"/>). Diversamente da 
<xref linkend="guc-fsync"/>, impostare questo parametro a <literal>off</literal>
non crea nessun rischio di inconsistenza del database: un blocco del sistema operativo
o del database potrebbe risultare 
nella perdita di alcune transazioni presumibilmente sottoposte a commit, ma 
lo stato del database sarà comunque lo stesso come se quelle transazioni 
fossero state annullate di recente.
Quindi, disabilitare <varname>synchronous_commit</varname> 
può essere un'alternativa utile quando le prestazioni sono più importanti rispetto 
alla certezza assoluta sulla durabilità di una transazione. Per maggiori 
discussioni si veda <xref linkend="wal-async-commit"/>.
       </para>
       <para>
        This parameter can be changed at any time; the behavior for any
        one transaction is determined by the setting in effect when it
        commits.  It is therefore possible, and useful, to have some
        transactions commit synchronously and others asynchronously.
        For example, to make a single multistatement transaction commit
        asynchronously when the default is the opposite, issue <command>SET
        LOCAL synchronous_commit TO OFF</command> within the transaction.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-wal-sync-method" xreflabel="wal_sync_method">
      <term><varname>wal_sync_method</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>wal_sync_method</varname></primary>
      </indexterm>
      <listitem>
       <para>
Metodo usato per forzare aggiornamenti WAL fuori dal disco.
Se <varname>fsync</varname> è disabilitato allora quest'impostazione è irrilevante,
dato che aggiornamenti dei file WAL non saranno forzati per nulla.
Possibili valori sono:
       </para>
       <itemizedlist>
        <listitem>
        <para>
         <literal>open_datasync</literal> 
          (write WAL files with <function>open()</function> option <symbol>O_DSYNC</symbol>)
        </para>
        </listitem>
        <listitem>
        <para>
         <literal>fdatasync</literal> (call <function>fdatasync()</function> at each commit)
        </para>
        </listitem>
        <listitem>
        <para>
         <literal>fsync_writethrough</literal> (call <function>fsync()</function> at each commit, forcing write-through of any disk write cache)
        </para>
        </listitem>
        <listitem>
        <para>
         <literal>fsync</literal> (call <function>fsync()</function> at each commit)
        </para>
        </listitem>
        <listitem>
        <para>
         <literal>open_sync</literal> (write WAL files with <function>open()</function> option <symbol>O_SYNC</symbol>)
        </para>
        </listitem>
       </itemizedlist>
       <para>
Non tutte queste scelte soono disponibili su tutte le piattaforme.
Il valore predefinito è il primo metodo nell'elenco sopra che è supportato dalla 
piattaforma. 
L'opzione <literal>open_</literal>* usa anche <literal>O_DIRECT</literal> se disponibile.
L'utilità <filename>src/tools/fsync</filename> nell'albero delle directory del sorgente  di PostgreSQL 
può fare dei test di prestazioni di vari metodi fsync.
Questo parametro può essere impostato solo nel file  <filename>postgresql.conf</filename>
o dalla linea di comando del server.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-full-page-writes" xreflabel="full_page_writes">
      <indexterm>
       <primary>Parametro di configurazione <varname>full_page_writes</varname></primary>
      </indexterm>
      <term><varname>full_page_writes</varname> (<type>boolean</type>)</term>
      <listitem>
       <para>
Quando questo parametro è attivo, il server <productname>PostgreSQL</productname>
scrive l'intero contenuto di ogni pagina disco nel WAL durante la prima modifica 
di quella pagina dopo un checkpoint.
Questo è necessario perchè la scrittura di una pagina che 
è in elaborazione durante un blocco del sistema operativo potrebbe essere 
completata solo parzialmente, portando a una pagina su disco 
che contiene un insieme di dati vecchi e nuovi. 
        The row-level change data
        normally stored in WAL will not be enough to completely restore
        such a page during post-crash recovery.  Storing the full page image
        guarantees that the page can be correctly restored, but at the price
        of increasing the amount of data that must be written to WAL.
        (Because WAL replay always starts from a checkpoint, it is sufficient
        to do this during the first change of each page after a checkpoint.
        Therefore, one way to reduce the cost of full-page writes is to
        increase the checkpoint interval parameters.)
       </para>

       <para>
Disabilitare questo parametro velocizza le operazioni normali, ma
potrebbe portare o a una corruzione non recuperabile dei dati, o a una corruzione 
dei dati silenziosa, dopo un fallimento del sistema. I rischi solo simili a disabilitare
<varname>fsync</varname>, sebbene minori, e dovrebbe essere disabilitato 
solo nelle stesse circostanze raccomandate per quel parametro.
       </para>

       <para>
Disabilitare questo parametro non ha effetto sull'utilizzo 
dell'archiviazione WAL per il point-in-time recovery (PITR)
(si veda  <xref linkend="continuous-archiving"/>).
       </para>

       <para>
Questo parametro può essere impostato solo nel file <filename>postgresql.conf</filename>
o dalla linea di comando del server.
Il valore predefinito è <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-buffers" xreflabel="wal_buffers">
      <term><varname>wal_buffers</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>wal_buffers</varname></primary>
      </indexterm>
      <listitem>
       <para>
L'ammontare di memoria usata nella memoria condivisa per dati WAL. Il valore predefinito 
è 64 kilobyte (<literal>64kB</literal>). L'impostazione necessita solo di essere 
larga abbastanza per contenere l'ammontare di dati WAL generati da una transazione 
tipica, dato che i dati sono scritto fuori dal disco ad ogni commit di transazione.
Questo parametro può essere impostato solo all'avvio del server.
       </para>

       <para>
Incrementare questo parametro potrebbe causare che <productname>PostgreSQL</productname>
richieda più memoria condivisa <systemitem class="osname">System V</systemitem> 
rispetto a quello che permette la configurazione predefinita del sistema operativo. 
Si veda <xref linkend="sysvipc"/> per informazioni su come aggiustare 
questi parametri, se necessario.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-writer-delay" xreflabel="wal_writer_delay">
      <term><varname>wal_writer_delay</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>wal_writer_delay</varname></primary>
      </indexterm>
      <listitem>
       <para>
Specifica il ritardo tra i turni di attività per il writer WAL.
Ad ogni turno il writer pulirà i WAL su disco. Quindi aspetterà per 
<varname>wal_writer_delay</varname> millisecondi, e quindi si ripete. Il valore predefinito
è 200 millisecondi, (<literal>200ms</literal>). Si noti che su molti 
sistemi, la risoluzione reale dei ritardi di attesa è 10 millisecondi;
impostare <varname>wal_writer_delay</varname> ad un valore che non è un multiplo di 
10 potrebbe avere gli stessi risultati di impostarlo al successivo multiplo di 10.
Questo parametro può essere impostato solo nel file <filename>postgresql.conf</filename>
o dalla linea di comando del server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-delay" xreflabel="commit_delay">
      <term><varname>commit_delay</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>commit_delay</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Time delay between writing a commit record to the WAL buffer
        and flushing the buffer out to disk, in microseconds. A
        nonzero delay can allow multiple transactions to be committed
        with only one <function>fsync()</function> system call, if
        system load is high enough that additional transactions become
        ready to commit within the given interval. But the delay is
        just wasted if no other transactions become ready to
        commit. Therefore, the delay is only performed if at least
        <varname>commit_siblings</varname> other transactions are
        active at the instant that a server process has written its
        commit record. The default is zero (no delay).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-siblings" xreflabel="commit_siblings">
      <term><varname>commit_siblings</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>commit_siblings</varname></primary>
      </indexterm>
      <listitem>
       <para>
Il numero minimo di transazioni concorrenti aperte da richiedere 
prima di eseguire il ritardo <varname>commit_delay</varname>. Un valore  
maggiore rende più probabile che almeno un'altra transazione diventi  
pronta al commit durante l'intervallo di ritardo.
Il valore predefinito è cinque transazioni.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-wal-checkpoints">
     <title>Checkpoint</title>

    <variablelist>
     <varlistentry id="guc-checkpoint-segments" xreflabel="checkpoint_segments">
      <term><varname>checkpoint_segments</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>checkpoint_segments</varname></primary>
      </indexterm>
      <listitem>
       <para>
Il massimo numero di segmenti di file di log tra i checkpoint WAL automatici
(ogni segmento normalmente è 16 megabyte). Il valore predefinito è 
tre segmenti. Incrementare questo parametro può aumentare la quantità di 
tempo necessaria al recupero da un crash.
Questo parametro può essere impostato solo nel file <filename>postgresql.conf</filename>
o dalla linea di comando del server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-timeout" xreflabel="checkpoint_timeout">
      <term><varname>checkpoint_timeout</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>checkpoint_timeout</varname></primary>
      </indexterm>
      <listitem>
       <para>
Il tempo massimo tra i checkpoint WAL automatici, in secondi.
Il valore predefinito è cinque minuti (<literal>5min</literal>).
Aumentare questo parametro può incrementare la quantità di tempo necessaria 
al recupero da crash.
Questo parametro può essere impostato solo nel file <filename>postgresql.conf</filename>
o dalla linea di comando del server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-completion-target" xreflabel="checkpoint_completion_target">
      <term><varname>checkpoint_completion_target</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>checkpoint_completion_target</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Specifies the target of checkpoint completion, as a fraction of
        total time between checkpoints. The default is 0.5.

Questo parametro può essere impostato solo nel file <filename>postgresql.conf</filename>
o dalla linea di comando del server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-warning" xreflabel="checkpoint_warning">
      <term><varname>checkpoint_warning</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>checkpoint_warning</varname></primary>
      </indexterm>
      <listitem>
       <para>
Scrive un messaggio al log del server se checkpoint causati dal riempimento 
dei file di segmento avvengono più ravvicinati rispetto 
a questi secondi (che suggerisce che 
<varname>checkpoint_segments</varname> dovrebbe essere alzato). Il valore predefinito è 
30 secondi (<literal>30s</literal>).  Zero disabilita il warning.
Questo parametro può essere impostato solo nel file <filename>postgresql.conf</filename>
o dalla linea di comando del server.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-wal-archiving">
     <title>Archiviazione</title>

    <variablelist>
     <varlistentry id="guc-archive-mode" xreflabel="archive_mode">
      <term><varname>archive_mode</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>archive_mode</varname></primary>
      </indexterm>
      <listitem>
       <para>
Quando <varname>archive_mode</varname> è attivo, i segmenti WAL completi 
vengono archiviati impostando  
<xref linkend="guc-archive-command"/>.
<varname>archive_mode</varname> e <varname>archive_command</varname> sono
variabili separate così <varname>archive_command</varname> può essere cambiato 
senza cambiare modalità di archiviazione.
Questo parametro può essere impostato solo all'avvio del server. <varname>wal_level</varname>
deve essere impostato a <literal>archive</literal> o <literal>hot_standby</literal> per
abilitare <varname>archive_mode</varname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-archive-command" xreflabel="archive_command">
      <term><varname>archive_command</varname> (<type>string</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>archive_command</varname></primary>
      </indexterm>
      <listitem>
       <para>
Il comando shell da eseguire per archiviare un file di segmento WAL completato.
Qualsiasi <literal>%p</literal> nella stringa viene sostituita dal percorso del 
file da archiviare, e ogni <literal>%f</literal> viene sostiuito 
da solo il nome del file. (Il percorso è relativo alla directory di lavoro del  
server, per es., la directory dei dati del cluster).
Usare <literal>%%</literal> per includere un effettivo carattere <literal>%</literal> nel comando. 
È importante per il comando restiruire uno stato d'uscita zero 
solo in caso di successo. Per maggiori informazioni si veda 
<xref linkend="backup-archiving-wal"/>.
       </para>
       <para>
Questo parametro può essere impostato solo nel file <filename>postgresql.conf</filename>
o dalla linea di comando del server. Viene ignorato a meno che 
<varname>archive_mode</varname> non sia stato abilitato all'avvio del server.
Se <varname>archive_command</varname> è una stringa vuota (predefinito) mentre 
<varname>archive_mode</varname> è abilitato, l'archiviazione WAL viene temporaneamente
disabilitata, ma il server continua ad accumulare file di segmento WAL nell'aspettativa 
che un comando sia fornito presto. Impostare 
<varname>archive_command</varname> a un comando che non fa niente ma restituisce
true, per es. <literal>/bin/true</literal> (<literal>REM</literal> su
Windows), in pratica disabilita l'archiviazione, 
ma rompe anche la catena di file WAL necessari per recuperare l'archivio, 
quindi dovrebbe essere usato solo in circostanze non usuali.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-archive-timeout" xreflabel="archive_timeout">
      <term><varname>archive_timeout</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>archive_timeout</varname></primary>
      </indexterm>
      <listitem>
       <para>
Il  <xref linkend="guc-archive-command"/> viene invocato solo per segmenti
WAL completati. Da ora, se il server genera poco traffico WAL (o ha 
tempi morti dove lo fa), ci potrebbe essere un lungo ritardo 
tra il completamento di una transazione e la sua registrazione sicura 
nell'archivio di immagazzinamento. Per limitare quanto vecchi possano essere
dati non archiviati, è possibile impostare  <varname>archive_timeout</varname> per forzare
il server a usare un nuovo file di  segmento WAL periodicamente. Quando 
questo parametro è maggiore di zero, il server prenderà un file di segmento nuovo 
ogni volta che questi secondi sono passati dall'ultimo cambiamento  
di file di segmento, e c'è stata qualsiasi attività del database,
incluso un singolo checkpoint. (Incrementare 
<varname>checkpoint_timeout</varname> ridurrà
checkpoint non necessari su un sistema in stato idle). 
Si noti che file archiviati che sono chiusi in anticipo 
a causa di un cambiamento forzato hanno comunque la stessa lunghezza di file 
completamente pieni. Perciò, non è saggio usare un 
<varname>archive_timeout</varname> molto piccolo - esso gonfierà il deposito di  
archiviazione. valori di  <varname>archive_timeout</varname> di un minuto o più sono 
di solito ragionevoli. Questo parametro può essere impostato solo nel file
<filename>postgresql.conf</filename> o dalla linea di comando del server.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-replication">
     <title>Replica Streaming</title>

     <para>
Queste impostazioni controllano il comportamento della caratteristica di 
<firstterm>streaming replication</firstterm> inclusa.
      These parameters would be set on the primary server that is
      to send replication data to one or more standby servers.
     </para>

     <variablelist>
      <varlistentry id="guc-max-wal-senders" xreflabel="max_wal_senders">
       <term><varname>max_wal_senders</varname> (<type>integer</type>)</term>
       <indexterm>
        <primary>Parametro di configurazione <varname>max_wal_senders</varname></primary>
       </indexterm>
       <listitem>
       <para>
Specifica il numero massimo di connessioni concorrenti da server standby (per es., 
il numero massimo di processi sender WAL in esecuzione simultaneamente).
Il valore predefinito è zero. Questo parametro può essere impostato solo all'avvio del server.
<varname>wal_level</varname> deve essere impostato a <literal>archive</literal>
o <literal>hot_standby</literal> per permettere connessioni dai server standby.
       </para>
       </listitem>
      </varlistentry>
      <varlistentry id="guc-wal-sender-delay" xreflabel="wal_sender_delay">
       <term><varname>wal_sender_delay</varname> (<type>integer</type>)</term>
       <indexterm>
        <primary>Parametro di configurazione <varname>wal_sender_delay</varname></primary>
       </indexterm>
       <listitem>
       <para>
Specifica il ritardo tra i turni di attività per i processi sender WAL.
Ad ogni turno il sender WAL manda qualsiasi WAL accumulato dall'ultimo turno 
al server standby. Quindi aspetta 
<varname>wal_sender_delay</varname> millisecondi, e ripete. Il valore predefinito 
è 200 millisecondi (<literal>200ms</literal>).
Si noti che su molti sistemi, la risoluzione effettiva dei ritardi di attesa è 
10 millisecondi; impostare <varname>wal_sender_delay</varname> a un valore che non è 
un multiplo di 10 potrebbe avere gli stessi risultati di impostarlo al successivo multiplo 
di 10. 
Questo parametro può essere impostato solo nel file 
<filename>postgresql.conf</filename> o dalla linea di comando del server.
       </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-wal-keep-segments" xreflabel="wal_keep_segments">
       <term><varname>wal_keep_segments</varname> (<type>integer</type>)</term>
       <indexterm>
        <primary>Parametro di configurazione  <varname>wal_keep_segments</varname></primary>
       </indexterm>
       <listitem>
       <para>
Specifica il numero minimo di segmenti di file di log passati tenuti nella directory
<filename>pg_xlog</filename>,
nel caso in cui un server standby abbia bisogno di ottenerli per la replica streaming.
Ogni segmento è normalmente 16 megabyte.
Se un server standby connesso al primario rimane indietro di più di  
<varname>wal_keep_segments</varname> segmenti, il primario potrebbe rimuovere 
un segmento WAL ancora necessario allo standby, nel qual caso la connessione
di replica sarà terminata. (Comunque, il server standby può ripristinarsi
ottenendo il segmento dall'archivio, se l'archiviazione WAL è in uso).
       </para>

       <para>
Questo imposta solo il numero minimo di segmenti mantenuti in <filename>pg_xlog</filename>;
il sistema potrebbe aver bisogno di ottenere più segmenti
per l'archiviazione WAL o per recuperare da un checkpoint. Se 
<varname>wal_keep_segments</varname> è zero (il valore predefinito), il sistema
non mantiene nessun segmento aggiuntivo per scopi di standby, e il numero
di vecchi segmenti WAL disponibili per i server standby è una funzione della 
posizione del precedente checkpoint e stato dell'archiviazione WAL.
Questo parametro non ha effetto sui punti di restart.
Questo parametro può essere impostato solo nel file 
<filename>postgresql.conf</filename> o dalla linea di comando del server.
       </para>
       </listitem>
      </varlistentry>

     <varlistentry id="guc-vacuum-defer-cleanup-age" xreflabel="vacuum_defer_cleanup_age">
      <term><varname>vacuum_defer_cleanup_age</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>vacuum_defer_cleanup_age</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Specifies the number of transactions by which <command>VACUUM</command> and
        <acronym>HOT</acronym> updates will defer cleanup of dead row versions. The
        default is zero transactions, meaning that dead row versions can be
        removed as soon as possible, that is, as soon as they are no longer
        visible to any open transaction.  You may wish to set this to a
        non-zero value on a primary server that is supporting hot standby
        servers, as described in <xref linkend="hot-standby"/>.  This allows
        more time for queries on the standby to complete without incurring
        conflicts due to early cleanup of rows.  However, since the value
        is measured in terms of number of write transactions occurring on the
        primary server, it is difficult to predict just how much additional
        grace time will be made available to standby queries.
Questo parametro può essere impostato solo nel file 
<filename>postgresql.conf</filename> o dalla linea di comando del server.
       </para>
      </listitem>
     </varlistentry>
     </variablelist>
    </sect2>

    <sect2 id="runtime-config-standby">
    <title>Server Standby</title>

     <para>
Queste impostazioni controllano il comportamento di un server standby che 
riceve dati replicati.
     </para>

    <variablelist>

     <varlistentry id="guc-hot-standby" xreflabel="hot_standby">
      <term><varname>hot_standby</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>hot_standby</varname></primary>
      </indexterm>
      <listitem>
       <para>
Specifica se ci si può connettere ed eseguire query durante il recupero,
come descritto in <xref linkend="hot-standby"/>.
Il valore predefinito è <literal>off</literal>.
Questo parametro può essere impostato solo all'avvio del server. Ha effetto solo 
durante il recupero dell'archivio  o in modalità standby. 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-standby-archive-delay" xreflabel="max_standby_archive_delay">
      <term><varname>max_standby_archive_delay</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>max_standby_archive_delay</varname></primary>
      </indexterm>
      <listitem>
       <para>
Quando Hot Standby è attivo, questo parametro determina quanto a lungo il 
server standby dovrebbe aspettare prima di cancellare le query che 
vanno in conflitto con voci WAL che devono essere applicate, come descritto in
<xref linkend="hot-standby-conflict"/>.
        <varname>max_standby_archive_delay</varname> applies when WAL data is
        being read from WAL archive (and is therefore not current).
        The default is 30 seconds. Units are milliseconds if not specified.
        A value of -1 allows the standby to wait forever for conflicting
        queries to complete.
Questo parametro può essere impostato solo nel file <filename>postgresql.conf</filename>
o dalla linea di comando del server.
       </para>
       <para>
Si noti che <varname>max_standby_archive_delay</varname> non è lo stesso del 
tempo massimo in cui una query può stare in esecuzione; piuttosto è il tempo massimo
totale permesso per applicare qualsiasi dato di segmento WAL. 
Cioè, se una query è risultata in un ritardo significativo precedentemente nel segmento 
WAL, successive query in conflitto avranno molta meno bellezza.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-standby-streaming-delay" xreflabel="max_standby_streaming_delay">
      <term><varname>max_standby_streaming_delay</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>max_standby_streaming_delay</varname></primary>
      </indexterm>
      <listitem>
       <para>
Quando Hot Standby è attivo, questo parametro determina quanto a lungo il server
standby dovrebbe aspettare prima di cancellare le query standby che 
sono in conflitto con voci WAL che stanno per essere applicate, come descritto in
<xref linkend="hot-standby-conflict"/>.
<varname>max_standby_streaming_delay</varname> si applica quando i dati WAL vengono ricevuti
attraverso la replica streaming.
Il valore predefinito è 30 secondi. L'unità è millisecondi se non specificato.
Un valore di -1 permette allo standby di aspettare per sempre che le query in conflitto 
si completino.
Questo parametro può essere impostato solo nel file <filename>postgresql.conf</filename>
o dalla linea di comando del server.
       </para>
       <para>
Si noti che <varname>max_standby_streaming_delay</varname> non è lo stesso della 
lunghezza massima di tempo in cui una query può stare in esecuzione prima della cancellazione;
piuttosto è il tempo totale massimo permesso per applicare dati WAL una volta che 
sono stati ricevuti dal server primario.   
        Thus, if one query has
        resulted in significant delay, subsequent conflicting queries will
        have much less grace time until the standby server has caught up
        again.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-query">
    <title>Query Planning</title>

    <sect2 id="runtime-config-query-enable">
     <title>Planner Method Configuration</title>

      <para>
Questi parametri di configurazione forniscono un metodo rudimentale per
influenzare i piani delle query scelti dall'ottimizzatore. Se  
il piano predefinito scelto dall'ottimizzatore per una particolare query non è
ottimale, una soluzione <emphasis>temporanea</emphasis> è di usare uno
di questi parametri di configurazione per forzare l'ottimizzatore 
a scegliere un piano differente.
Modi preferibili di migliorare la qualità dei piani scelti
dall'ottimizzatore includono l'aggiustare le costanti di costo del pianificatore
(si veda <xref linkend="runtime-config-query-constants"/>),
eseguendo <xref linkend="sql-analyze"/>
manualmente,
aumentando 
il valore del parametro di configurazione <xref
linkend="guc-default-statistics-target"/>,
e incrementando l'ammontare di statistiche raccolte per 
colonne specifiche usando <command>ALTER TABLE SET
STATISTICS</command>.
      </para>

     <variablelist>
     <varlistentry id="guc-enable-bitmapscan" xreflabel="enable_bitmapscan">
      <term><varname>enable_bitmapscan</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>bitmap scan</primary>
      </indexterm>
      <indexterm>
       <primary>Parametro di configurazione <varname>enable_bitmapscan</varname></primary>
      </indexterm>
      <listitem>
       <para>
Abilita o disabilita l'utilizzo dal parte del pianificatore di query di piani
bitmap scan. Il valore predefinito è <literal>on</literal>.

       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-hashagg" xreflabel="enable_hashagg">
      <term><varname>enable_hashagg</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>enable_hashagg</varname></primary>
      </indexterm>
      <listitem>
       <para>
Abilita o disabilita l'utilizzo da parte del pianificatore di query di 
piani di aggregazione hash. Il valore predefinito è <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-hashjoin" xreflabel="enable_hashjoin">
      <term><varname>enable_hashjoin</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>enable_hashjoin</varname></primary>
      </indexterm>
      <listitem>
       <para>
Abilita o disabilita l'utilizzo da parte del pianificatore di query di piani 
hash-join. Il valore predefinito è <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-indexscan" xreflabel="enable_indexscan">
      <term><varname>enable_indexscan</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>index scan</primary>
      </indexterm>
      <indexterm>
       <primary>Parametro di configurazione <varname>enable_indexscan</varname></primary>
      </indexterm>
      <listitem>
       <para>
Abilita o disabilita l'utilizzo da parte del pianificatore di query di piani 
index-scan. Il valore predefinito è <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-material" xreflabel="enable_material">
      <term><varname>enable_material</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>enable_material</varname></primary>
      </indexterm>
      <listitem>
       <para>
Abilita o disabilita l'utilizzo da parte del pianificatore di query della materializzazione.
È impossibile sopprimere interamente la materializzazione,
ma impostare questa variabile a off, previene che il pianificatore inserisca 
nodi materializzati ad eccezione di casi dove è richiesto per correttezza.
Il valore predefinito è <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-mergejoin" xreflabel="enable_mergejoin">
      <term><varname>enable_mergejoin</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>enable_mergejoin</varname></primary>
      </indexterm>
      <listitem>
       <para>
Abilita o disabilita l'utilizzo da parte del pianificatore di query dei tipi 
di piano merge-join. Il valore predefinito è <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-nestloop" xreflabel="enable_nestloop">
      <term><varname>enable_nestloop</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>enable_nestloop</varname></primary>
      </indexterm>
      <listitem>
       <para>
Abilita o disabilita l'utilizzo da parte del pianificatore di query di piani 
join nested loop. È impossibile sopprimere interamente le join nested loop,
ma impostare questa variabile a off scoraggia il pianificatore dall'usarlo
se ci sono altri metodi disponibili. Il valore predefinito è 
<literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-seqscan" xreflabel="enable_seqscan">
      <term><varname>enable_seqscan</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>sequential scan</primary>
      </indexterm>
      <indexterm>
       <primary>Parametro di condigurazione <varname>enable_seqscan</varname></primary>
      </indexterm>
      <listitem>
       <para>
Abilita o disabilita l'utilizzo da parte del pianificatore di query di piani
scan sequenziale. È impossibile sopprimere interamente gli scan sequenziali, 
ma impostare questa variabile a off scoraggia il pianificatore dall'usarli
se ci sono altri metodi disponibili. Il valore predefinito è <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-sort" xreflabel="enable_sort">
      <term><varname>enable_sort</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>enable_sort</varname></primary>
      </indexterm>
      <listitem>
       <para>
Abilita o disabilita l'utilizzo da parte del pianificatore di query di passi 
di ordinamento espliciti. È impossibile sopprimere interamente gli ordinamenti espliciti,
ma impostare questa variabile a off scoraggia il pianificatore dall'usarlo
se ci sono altri metodi disponibili. Il valore predefinito è
<literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-tidscan" xreflabel="enable_tidscan">
      <term><varname>enable_tidscan</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>enable_tidscan</varname></primary>
      </indexterm>
      <listitem>
       <para>
Abilita o disabilita l'utilizzo da parte del pianificatore di query di piani 
scan <acronym>TID</acronym>. Il valore predefinito è  <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>
     
     </variablelist>
     </sect2>
     <sect2 id="runtime-config-query-constants">
     <title>Costanti di costo del planner</title>

    <para>
Le variabili  <firstterm>cost</firstterm> descritte in questa sezione sono misurate
su una scala arbitraria. Solo i loro valori relativi hanno importanza, quindi 
scalarli tutti su o giù dello stesso fattore risulterà in nessun cambiamento 
delle scelte del pianificatore. In maniera predefinita, queste variabili di costo sono basate
sul costo dell'ottenimento sequenziale delle pagine; cioè,
<varname>seq_page_cost</varname> è convenzionalmente impostato a <literal>1.0</literal>
e le altre variabili di costo sono impostate facendo riferimento a questo. Ma si può
usare una scala diversa se si preferisce, tipo i tempi effettivi di esecuzione 
in millisecondi su una macchina particolare.
    </para>

   <note>
    <para>
Sfortunatamente, non c'è un metodo ben definito per determinare i valori ideali
per le variabili di costo. Esse sono trattate meglio come medie sull'intero 
insieme di query che una particolare installazione riceverà. Questo significa 
che cambiarle sulla base di pochi esperimenti è molto rischioso.
    </para>
   </note>

     <variablelist>

     <varlistentry id="guc-seq-page-cost" xreflabel="seq_page_cost">
      <term><varname>seq_page_cost</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>seq_page_cost</varname></primary>
      </indexterm>
      <listitem>
       <para>
Imposta la stima del pianificatore relativa al costo di ottenere una pagina disco 
che è parte di una serie di fetch sequenziali. Il valore predefinito è 1.0.
Questo valore può essere sovrascritto per un particolare tablespace impostando
il parametro tablespace dello stesso nome
(si veda <xref linkend="sql-altertablespace"/>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-random-page-cost" xreflabel="random_page_cost">
      <term><varname>random_page_cost</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>random_page_cost</varname></primary>
      </indexterm>
      <listitem>
       <para>
Imposta la stima di costo del pianificatore per una
pagina disco ottenuta in modo non sequenziale. Il valore predefinito è 4.0.
Questo valore può essere sovrascritto per un tablespace particolare impostando 
il parametro tablespace dello stesso nome
(si veda <xref linkend="sql-altertablespace"/>).
       </para>

       <para>
Ridurre questo valore relativo a <varname>seq_page_cost</varname>
causerà che il sistema preferisca le gli index scan; incrementarlo farà
sembrare gli index scan relativamente più costosi. È possibile incrementare o abbassare
entrambi i valori insieme per cambiare l'importanza dei costi di I/O di disco
relativi ai costi di CPU, che sono descritti dai seguenti parametri.
       </para>

       <tip>
        <para>
Sebbene il sistema permetterà di impostare <varname>random_page_cost</varname> a
meno di <varname>seq_page_cost</varname>, non è fisicamente sensato farlo. 
Comunque, impostarli allo stesso valore ha senso se il database è interamente   
salvato in cache in RAM, dato che in quel caso non c'è penalizzazione 
per toccare pagine fuori dalla sequenza.
Inoltre, in un database fortemente sottoposto a cache si dovrebbero
abbassare entrambi i valori relativi ai parametri CPU,
dato che il costo di ottenere una pagina già in RAM è molto più piccolo
rispetto a quello che sarebbe normalmente.
        </para>
       </tip>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-tuple-cost" xreflabel="cpu_tuple_cost">
      <term><varname>cpu_tuple_cost</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>cpu_tuple_cost</varname></primary>
      </indexterm>
      <listitem>
       <para>
Imposta la stima del pianificatore per il costo dell'elaborazione 
di ogni riga durante una query.
Il valore predefinito è 0.01.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-index-tuple-cost" xreflabel="cpu_index_tuple_cost">
      <term><varname>cpu_index_tuple_cost</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>cpu_index_tuple_cost</varname></primary>
      </indexterm>
      <listitem>
       <para>
Imposta la stima del pianificatore per il costo dell'elaborazione
di ogni voce di indice durante una scansione di indice. 
Il valore predefinito è 0.005.
       </para>
      </listitem>
     </varlistentry>
    
     <varlistentry id="guc-cpu-operator-cost" xreflabel="cpu_operator_cost">
      <term><varname>cpu_operator_cost</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>cpu_operator_cost</varname></primary>
      </indexterm>
      <listitem>
       <para>
Imposta la stima del pianificatore sul costo dell'elaborazione di ogni operatore o 
funzione eseguita durante una query.
Il valore predefinito è 0.0025.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-effective-cache-size" xreflabel="effective_cache_size">
      <term><varname>effective_cache_size</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>effective_cache_size</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Sets the planner's assumption about the effective size of the
        disk cache that is available to a single query.  This is
        factored into estimates of the cost of using an index; a
        higher value makes it more likely index scans will be used, a
        lower value makes it more likely sequential scans will be
        used. When setting this parameter you should consider both
        <productname>PostgreSQL</productname>'s shared buffers and the
        portion of the kernel's disk cache that will be used for
        <productname>PostgreSQL</productname> data files.  Also, take
        into account the expected number of concurrent queries on different
        tables, since they will have to share the available
        space.  
        This parameter has no effect on the size of shared
        memory allocated by <productname>PostgreSQL</productname>, nor
        does it reserve kernel disk cache; it is used only for estimation
        purposes.  The default is 128 megabytes (<literal>128MB</literal>).
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
     <sect2 id="runtime-config-query-geqo">
     <title>Ottimizzatore di query genetico</title>

     <para>
L'ottimizzatore di query genetico (GEQO) è un algoritmo che realizza la pianificazione delle query
usando la ricerca euristica. Questo riduce il tempo di pianificazione per 
query complesse (quelle che fanno il join tra molte relazioni), al costo di produrre 
piani che a volte sono inferiori a quelli trovati dal normale algoritmo  
si ricerca esaustiva. Inoltre, la ricerca GEQO è randomized e quindi
i suoi piani possono variare in maniera non deterministica.
Per maggiori informazioni si veda  <xref linkend="geqo"/>.
     </para>

     <variablelist>

     <varlistentry id="guc-geqo" xreflabel="geqo">
      <indexterm>
       <primary>genetic query optimization</primary>
      </indexterm>
      <indexterm>
       <primary>GEQO</primary>
       <see>genetic query optimization</see>
      </indexterm>
      <indexterm>
       <primary><varname>geqo</varname> configuration parameter</primary>
      </indexterm>
      <term><varname>geqo</varname> (<type>boolean</type>)</term>
      <listitem>
       <para>
Abilita o disabilita l'ottimizzazione genetica della query.
Questo è attivo in maniera predefinita. Di solito è meglio non impostarla a off
in produzione; la variabile <varname>geqo_threshold</varname> fornisce 
più controllo granulare di GEQO.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-threshold" xreflabel="geqo_threshold">
      <term><varname>geqo_threshold</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>geqo_threshold</varname></primary>
      </indexterm>
      <listitem>
       <para>
Usa l'ottimizzazione genetica delle query per pianificare query con almeno questo numero 
di elementi <literal>FROM</literal> coinvolti. (Si noti che un costrutto  
<literal>FULL OUTER JOIN</literal> conta come un solo elemento <literal>FROM</literal>).
Il valore predefinito è 12. Per query più semplici di solito è meglio 
usare il planner deterministico, esaustivo, ma per query con molte tabelle
il pianificatore deterministico ci mette troppo tempo, spesso più tempo rispetto
allo svantaggio di eseguire un piano non ottimale. 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-effort" xreflabel="geqo_effort">
      <term><varname>geqo_effort</varname>
      (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>geqo_effort</varname></primary>
      </indexterm>
      <listitem>
       <para>
Controlla il bilanciamento tra il tempo di pianificazione e la qualità 
del piano in GEQO. Questa variabile deve essere un intero nell'intervallo
da 1 a 10. Il valore predefinito è cinque. Valori maggiori 
incrementano il tempo speso pianificando la query, ma incrementa anche 
la probabilità che un piano di query efficiente sarà scelto. 
       </para>

       <para>
<varname>geqo_effort</varname> effettivamente non fa niente direttamente; 
è usata solo per calcolare i valori predefiniti per le altre variabili 
che influenzano il comportamento di GEQO (descritto sotto).
Se lo si preferisce, si può invece impostare gli altri parametri a mano. 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-pool-size" xreflabel="geqo_pool_size">
      <term><varname>geqo_pool_size</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>geqo_pool_size</varname></primary>
      </indexterm>
      <listitem>
       <para>
Controlla la dimensione del pool usato da GEQO, che è il numero 
di individui nella popolazione genetica. Deve essere almeno due, 
e valori utili tipicamente vanno da 100 a 1000. Se 
è impostato a zero (il valore predefinito) allora un valore appropriato
è scelto in base a <varname>geqo_effort</varname> e il numero
di tabelle nella query.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-generations" xreflabel="geqo_generations">
      <term><varname>geqo_generations</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>geqo_generations</varname></primary>
      </indexterm>
      <listitem>
       <para>
Controlla il numero di generazioni usate da GEQO, che è il numero 
di iterazioni dell'algoritmo. Deve essere almeno uno, 
e valori utili sono nello stesso intervallo della dimensione del pool.
Se è impostato a zero (il valore predefinito) allora un valore appropriato 
viene scelto basandosi su 
<varname>geqo_pool_size</varname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-selection-bias" xreflabel="geqo_selection_bias">
      <term><varname>geqo_selection_bias</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>geqo_selection_bias</varname></primary>
      </indexterm>
      <listitem>
       <para>
Controlla l'errore di selezione usato dal GEQO. L'errore di selezione 
è la pressione selettiva all'interno della popolazione. I valori possono  
essere da 1.50 a 2.00; l'ultimo è quello predefinito.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-seed" xreflabel="geqo_seed">
      <term><varname>geqo_seed</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>geqo_seed</varname></primary>
      </indexterm>
      <listitem>
       <para>
Controlla il valore iniziale del generatore di numeri casuali usato 
da GEQO per selezionare percorsi casuali attraverso lo spazio di ricerca dell'ordine di join.
Il valore può andare da zero (il predefinito) a uno. Cambiare il valore
cambia l'insieme di percorsi di join esplorati, e può risultare che il miglior percorso trovato 
sia meglio o peggio.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
     <sect2 id="runtime-config-query-other">
     <title>Altre opzioni del pianificatore</title>

     <variablelist>

     <varlistentry id="guc-default-statistics-target" xreflabel="default_statistics_target">
      <term><varname>default_statistics_target</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>default_statistics_target</varname></primary>
      </indexterm>
      <listitem>
       <para>
Imposta il target predefinito per le colonne della tabella senza 
un target specifico alla colonna impostato via <command>ALTER TABLE
SET STATISTICS</command>.  Valori più grandi incrementano il tempo necessario per 
fare <command>ANALYZE</command>, ma potrebbe aumentare la qualità delle stime del pianificatore.
Il valore predefinito è 100. Per maggiori informazioni 
sull'uso delle statistiche da parte del pianificatore di query di  <productname>PostgreSQL</productname>,
ci si riderisca a <xref linkend="planner-stats"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-constraint-exclusion" xreflabel="constraint_exclusion">
      <term><varname>constraint_exclusion</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary>vincolo exclusion</primary>
      </indexterm>
      <indexterm>
       <primary>Parametro di configurazione <varname>constraint_exclusion</varname></primary>
      </indexterm>
      <listitem>
       <para>
Controlla l'utilizzo del pianificatore di query di vincoli di tabella per 
ottimizzare le query.
I valori permessi di <varname>constraint_exclusion</varname> sono 
<literal>on</literal> (esaminare vincoli per tutte le tabelle),
<literal>off</literal> (non esamina mai i voncoli), e
<literal>partition</literal> (esamina i vincoli solo per tabelle figlie 
e le sottoquery <literal>UNION ALL</literal>).
<literal>partition</literal> è l'impostazione predefinita.
Spesso è usato con tabelle eseridate e partizionate per aumentare le prestazioni.
      </para>

       <para>
Quando questo parametro lo permette per una particolare tabella, il pianificatore
confronta le condizioni delle query che i vincoli <literal>CHECK</literal>
della tabella, e omette la scansione delle tabelle per le quali le condizioni 
contraddicono i vincoli. Per esempio:

<programlisting>
CREATE TABLE parent(key integer, ...);
CREATE TABLE child1000(check (key between 1000 and 1999)) INHERITS(parent);
CREATE TABLE child2000(check (key between 2000 and 2999)) INHERITS(parent);
...
SELECT * FROM parent WHERE key = 2400;
</programlisting>

Con il vincolo exclusion abilitato, questa <command>SELECT</command>
non scansionerà per niente <structname>child1000</structname>, aumentando le prestazioni.
       </para>

       <para>
Attualmente, il vincolo exclusion è abilitato in maniera predefinita
solo per casi che sono usati spesso per implementare il partizionamento.
Abilitarlo per tutte le tabelle impone overhead aggiuntivo per la pianificazione 
che è abbastanza distinguibile per query semplici, e molto spesso non porteranno 
benefici per query semplici. Se non si hanno tabelle partizionate 
si potrebbe preferire disabilitarla interamente.
       </para>

       <para>
Ci si riferisca a <xref linkend="ddl-partitioning-constraint-exclusion"/> per 
maggiori informazioni sull'utilizzo di vincoli exclusion e partizionamento.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cursor-tuple-fraction" xreflabel="cursor_tuple_fraction">
      <term><varname>cursor_tuple_fraction</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>cursor_tuple_fraction</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Sets the planner's estimate of the fraction of a cursor's rows that
        will be retrieved.  The default is 0.1.  Smaller values of this
        setting bias the planner towards using <quote>fast start</quote> plans
        for cursors, which will retrieve the first few rows quickly while
        perhaps taking a long time to fetch all rows.  Larger values
        put more emphasis on the total estimated time.  At the maximum
        setting of 1.0, cursors are planned exactly like regular queries,
        considering only the total estimated time and not how soon the
        first rows might be delivered.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-from-collapse-limit" xreflabel="from_collapse_limit">
      <term><varname>from_collapse_limit</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>from_collapse_limit</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
Il pianificatore unirà le sottoquery in query superiori se l'elenco 
<literal>FROM</literal> risultante non avrebbe più di questo numero di elementi.
Valori più piccoli riducono il tempo di pianificazione ma potrebbero
generare piani di query inferiori. Il valore predefinito è otto.
Per maggiori informazioni si veda  <xref linkend="explicit-joins"/>.
       </para>

       <para>
        Setting this value to <xref linkend="guc-geqo-threshold"/> or more
        may trigger use of the GEQO planner, resulting in nondeterministic
        plans.  See <xref linkend="runtime-config-query-geqo"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-join-collapse-limit" xreflabel="join_collapse_limit">
      <term><varname>join_collapse_limit</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary>Parametro di configurazione <varname>join_collapse_limit</varname></primary>
      </indexterm>
      <listitem>
       <para>
Il pianificatore riscriverà costrutti <literal>JOIN</literal> espliciti
(eccetto <literal>FULL JOIN</literal>) in elenchi di elementi 
<literal>FROM</literal> ogni volta che un elenco di non più di questo numero di elementi
risulterebbe. Valori più piccoli riducono il tempo di pianificazione ma potrebbero 
genrare piani di query inferiori.
       </para>

       <para>
In maniera predefinita, questa variabile è impostata a un valore uguale a
<varname>from_collapse_limit</varname>, che è appropriato per la maggior parte dei casi.
Impostarlo a 1 previene qualsiasi reordinamento di <literal>JOIN</literal>  
escplicite. Così, l'ordine di join esplicito specificato nella query
sarà l'effettivo ordine in cui le relazioni sono sottoposte a join. 
Dato che il pianificatore delle query non sempre sceglie
l'ordine di join ottimale, gli utenti avanzati possono impostare
temporaneamente questa variabile a 1, e quindi specificare
esplicitamente l'ordine di join  desiderato.
Per maggiori informazioni si veda <xref linkend="explicit-joins"/>.
       </para>

       <para>
        Setting this value to <xref linkend="guc-geqo-threshold"/> or more
        may trigger use of the GEQO planner, resulting in nondeterministic
        plans.  See <xref linkend="runtime-config-query-geqo"/>.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-logging">
    <title>Error Reporting and Logging</title>

    <indexterm zone="runtime-config-logging">
     <primary>server log</primary>
    </indexterm>

    <sect2 id="runtime-config-logging-where">
     <title>Where To Log</title>

     <indexterm zone="runtime-config-logging-where">
      <primary>where to log</primary>
     </indexterm>

     <variablelist>

     <varlistentry id="guc-log-destination" xreflabel="log_destination">
      <term><varname>log_destination</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>log_destination</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        <productname>PostgreSQL</productname> supports several methods
         for logging server messages, including
         <systemitem>stderr</systemitem>, <systemitem>csvlog</systemitem> and
         <systemitem>syslog</systemitem>. On Windows, 
         <systemitem>eventlog</systemitem> is also supported. Set this
         parameter to a list of desired log destinations separated by
         commas. The default is to log to <systemitem>stderr</systemitem> 
         only.
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line.
       </para>
       <para>
        If <systemitem>csvlog</systemitem> is included in <varname>log_destination</varname>,
        log entries are output in <quote>comma separated
        value</quote> (<acronym>CSV</acronym>) format, which is convenient for
        loading logs into programs.
        See <xref linkend="runtime-config-logging-csvlog"/> for details.
        <varname>logging_collector</varname> must be enabled to generate 
        CSV-format log output.
       </para>

       <note>
        <para>
         On most Unix systems, you will need to alter the configuration of
         your system's <application>syslog</application> daemon in order
         to make use of the <systemitem>syslog</systemitem> option for
         <varname>log_destination</varname>.  <productname>PostgreSQL</productname>
         can log to <application>syslog</application> facilities
         <literal>LOCAL0</literal> through <literal>LOCAL7</literal> (see <xref
         linkend="guc-syslog-facility"/>), but the default
         <application>syslog</application> configuration on most platforms
         will discard all such messages.  You will need to add something like:
<programlisting>
local0.*    /var/log/postgresql
</programlisting>
         to the  <application>syslog</application> daemon's configuration file
         to make it work.
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-logging-collector" xreflabel="logging_collector">
      <term><varname>logging_collector</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>logging_collector</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
         This parameter captures plain and CSV-format log messages
         sent to <application>stderr</application> and redirects them into log files.
         This approach is often more useful than
         logging to <application>syslog</application>, since some types of messages
         might not appear in <application>syslog</application> output (a common example
         is dynamic-linker failure messages).
         This parameter can only be set at server start.
       </para>

       <note>
        <para>
          The logging collector is designed to never lose messages.  This means
          that in case of extremely high load, server processes could be
          blocked due to trying to send additional log messages when the
          collector has fallen behind.  In contrast, <application>syslog</application>
          prefers to drop messages if it cannot write them, which means it's
          less reliable in those cases but it will not block the rest of the
          system.
        </para>
       </note>

      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-directory" xreflabel="log_directory">
      <term><varname>log_directory</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>log_directory</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        When <varname>logging_collector</varname> is enabled, 
        this parameter determines the directory in which log files will be created.
        It can be specified as an absolute path, or relative to the
        cluster data directory.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-filename" xreflabel="log_filename">
      <term><varname>log_filename</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>log_filename</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        When <varname>logging_collector</varname> is enabled,
        this parameter sets the file names of the created log files.  The value
        is treated as a <systemitem>strftime</systemitem> pattern,
        so <literal>%</literal>-escapes can be used to specify time-varying
        file names.  (Note that if there are
        any time-zone-dependent <literal>%</literal>-escapes, the computation
        is done in the zone specified
        by <xref linkend="guc-log-timezone"/>.)
        Note that the system's <systemitem>strftime</systemitem> is not used
        directly, so platform-specific (nonstandard) extensions do not work.
       </para>
       <para>
        If you specify a file name without escapes, you should plan to
        use a log rotation utility to avoid eventually filling the
        entire disk.  In releases prior to 8.4, if
        no <literal>%</literal> escapes were
        present, <productname>PostgreSQL</productname> would append
        the epoch of the new log file's creation time, but this is no
        longer the case.
       </para>
       <para>
        If CSV-format output is enabled in <varname>log_destination</varname>,
        <literal>.csv</literal> will be appended to the timestamped 
        log file name to create the file name for CSV-format output.
        (If <varname>log_filename</varname> ends in <literal>.log</literal>, the suffix is
        replaced instead.)
        In the case of the example above, the CSV
        file name will be <literal>server_log.1093827753.csv</literal>.
       </para>
       <para>
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-file-mode" xreflabel="log_file_mode">
      <term><varname>log_file_mode</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>log_file_mode</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        On Unix systems this parameter sets the permissions for log files
        when <varname>logging_collector</varname> is enabled. (On Microsoft
        Windows this parameter is ignored.)
        The parameter value is expected to be a numeric mode
        specified in the format accepted by the
        <function>chmod</function> and <function>umask</function>
        system calls.  (To use the customary octal format the number
        must start with a <literal>0</literal> (zero).)
       </para>
       <para>
        The default permissions are <literal>0600</literal>, meaning only the
        server owner can read or write the log files.  The other commonly
        useful setting is <literal>0640</literal>, allowing members of the owner's
        group to read the files.  Note however that to make use of such a
        setting, you'll need to alter <xref linkend="guc-log-directory"/> to
        store the files somewhere outside the cluster data directory.  In
        any case, it's unwise to make the log files world-readable, since
        they might contain sensitive data.
       </para>
       <para>
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-rotation-age" xreflabel="log_rotation_age">
      <term><varname>log_rotation_age</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>log_rotation_age</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        When <varname>logging_collector</varname> is enabled,
        this parameter determines the maximum lifetime of an individual log file.
        After this many minutes have elapsed, a new log file will
        be created.  Set to zero to disable time-based creation of
        new log files.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-rotation-size" xreflabel="log_rotation_size">
      <term><varname>log_rotation_size</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>log_rotation_size</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        When <varname>logging_collector</varname> is enabled,
        this parameter determines the maximum size of an individual log file.
        After this many kilobytes have been emitted into a log file,
        a new log file will be created.  Set to zero to disable size-based
        creation of new log files.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-truncate-on-rotation" xreflabel="log_truncate_on_rotation">
      <term><varname>log_truncate_on_rotation</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>log_truncate_on_rotation</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        When <varname>logging_collector</varname> is enabled,
        this parameter will cause <productname>PostgreSQL</productname> to truncate (overwrite),
        rather than append to, any existing log file of the same name.
        However, truncation will occur only when a new file is being opened
        due to time-based rotation, not during server startup or size-based
        rotation.  When off, pre-existing files will be appended to in
        all cases.  For example, using this setting in combination with
        a <varname>log_filename</varname> like <literal>postgresql-%H.log</literal>
        would result in generating twenty-four hourly log files and then
        cyclically overwriting them.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
       <para>
        Example:  To keep 7 days of logs, one log file per day named
        <literal>server_log.Mon</literal>, <literal>server_log.Tue</literal>, 
        etc, and automatically overwrite last week's log with this week's log,
        set <varname>log_filename</varname> to <literal>server_log.%a</literal>, 
        <varname>log_truncate_on_rotation</varname> to <literal>on</literal>, and 
        <varname>log_rotation_age</varname> to <literal>1440</literal>.
       </para>
       <para>
        Example: To keep 24 hours of logs, one log file per hour, but 
        also rotate sooner if the log file size exceeds 1GB, set 
        <varname>log_filename</varname> to <literal>server_log.%H%M</literal>, 
        <varname>log_truncate_on_rotation</varname> to <literal>on</literal>, 
        <varname>log_rotation_age</varname> to <literal>60</literal>, and 
        <varname>log_rotation_size</varname> to <literal>1000000</literal>.
        Including <literal>%M</literal> in <varname>log_filename</varname> allows
        any size-driven rotations that might occur to select a file name
        different from the hour's initial file name.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-syslog-facility" xreflabel="syslog_facility">
      <term><varname>syslog_facility</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary><varname>syslog_facility</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        When logging to <application>syslog</application> is enabled, this parameter
        determines the <application>syslog</application>
        <quote>facility</quote> to be used.  You can choose
        from <literal>LOCAL0</literal>, <literal>LOCAL1</literal>,
        <literal>LOCAL2</literal>, <literal>LOCAL3</literal>, <literal>LOCAL4</literal>,
        <literal>LOCAL5</literal>, <literal>LOCAL6</literal>, <literal>LOCAL7</literal>;
        the default is <literal>LOCAL0</literal>. See also the
        documentation of your system's
        <application>syslog</application> daemon.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-syslog-ident" xreflabel="syslog_ident">
      <term><varname>syslog_ident</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>syslog_identity</varname> configuration parameter</primary>
      </indexterm>
       <listitem>
        <para>
         When logging to <application>syslog</application> is enabled, this parameter
         determines the program name used to identify
         <productname>PostgreSQL</productname> messages in
         <application>syslog</application> logs. The default is
         <literal>postgres</literal>.
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line.
        </para>
       </listitem>
      </varlistentry>

     <varlistentry id="guc-silent-mode" xreflabel="silent_mode">
      <term><varname>silent_mode</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>silent_mode</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Runs the server silently. If this parameter is set, the server
        will automatically run in background and disassociate from the
        controlling terminal.
        This parameter can only be set at server start.
       </para>

       <caution>
       <para>
        When this parameter is set,
        the server's standard output and standard error are redirected
        to the file <filename>postmaster.log</filename> within the data directory.
        There is no provision for rotating this file, so it will grow
        indefinitely unless server log output is redirected elsewhere
        by other settings.  It is recommended that <varname>log_destination</varname>
        be set to <literal>syslog</literal> or that <varname>logging_collector</varname> be
        enabled when using this option.  Even with those measures, errors
        reported early during startup may appear in
        <filename>postmaster.log</filename> rather than the normal log destination.
       </para>
       </caution>
      </listitem>
     </varlistentry>

      </variablelist>
    </sect2>
     <sect2 id="runtime-config-logging-when">
     <title>When To Log</title>

     <variablelist>

     <varlistentry id="guc-client-min-messages" xreflabel="client_min_messages">
      <term><varname>client_min_messages</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary><varname>client_min_messages</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Controls which message levels are sent to the client.
        Valid values are <literal>DEBUG5</literal>,
        <literal>DEBUG4</literal>, <literal>DEBUG3</literal>, <literal>DEBUG2</literal>,
        <literal>DEBUG1</literal>, <literal>LOG</literal>, <literal>NOTICE</literal>,
        <literal>WARNING</literal>, <literal>ERROR</literal>, <literal>FATAL</literal>,
        and <literal>PANIC</literal>.  Each level
        includes all the levels that follow it.  The later the level,
        the fewer messages are sent.  The default is
        <literal>NOTICE</literal>.  Note that <literal>LOG</literal> has a different
        rank here than in <varname>log_min_messages</varname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-messages" xreflabel="log_min_messages">
      <term><varname>log_min_messages</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary><varname>log_min_messages</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Controls which message levels are written to the server log.
        Valid values are <literal>DEBUG5</literal>, <literal>DEBUG4</literal>,
        <literal>DEBUG3</literal>, <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
        <literal>INFO</literal>, <literal>NOTICE</literal>, <literal>WARNING</literal>,
        <literal>ERROR</literal>, <literal>LOG</literal>, <literal>FATAL</literal>, and
        <literal>PANIC</literal>.  Each level includes all the levels that
        follow it.  The later the level, the fewer messages are sent
        to the log.  The default is <literal>WARNING</literal>.  Note that
        <literal>LOG</literal> has a different rank here than in
        <varname>client_min_messages</varname>.
        Only superusers can change this setting.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-error-statement" xreflabel="log_min_error_statement">
      <term><varname>log_min_error_statement</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary><varname>log_min_error_statement</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Controls which SQL statements that cause an error
        condition are recorded in the server log.  The current
        SQL statement is included in the log entry for any message of
        the specified severity or higher.
        Valid values are <literal>DEBUG5</literal>,
        <literal>DEBUG4</literal>, <literal>DEBUG3</literal>,
        <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
        <literal>INFO</literal>, <literal>NOTICE</literal>,
        <literal>WARNING</literal>, <literal>ERROR</literal>,
        <literal>LOG</literal>,
        <literal>FATAL</literal>, and <literal>PANIC</literal>.
        The default is <literal>ERROR</literal>, which means statements
        causing errors, log messages, fatal errors, or panics will be logged.
        To effectively turn off logging of failing statements,
        set this parameter to <literal>PANIC</literal>.
        Only superusers can change this setting.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-log-min-duration-statement" xreflabel="log_min_duration_statement">
      <term><varname>log_min_duration_statement</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>log_min_duration_statement</varname> configuration parameter</primary>
      </indexterm>
       <listitem>
        <para>
         Causes the duration of each completed statement to be logged
         if the statement ran for at least the specified number of
         milliseconds.  Setting this to zero prints all statement durations.
         Minus-one (the default) disables logging statement durations.
         For example, if you set it to <literal>250ms</literal>
         then all SQL statements that run 250ms or longer will be
         logged.  Enabling this parameter can be helpful in tracking down
         unoptimized queries in your applications.
         Only superusers can change this setting.
        </para>

        <para>
         For clients using extended query protocol, durations of the Parse,
         Bind, and Execute steps are logged independently.
        </para>

       <note>
        <para>
         When using this option together with
         <xref linkend="guc-log-statement"/>,
         the text of statements that are logged because of
         <varname>log_statement</varname> will not be repeated in the
         duration log message.
         If you are not using <application>syslog</application>, it is recommended 
         that you log the PID or session ID using
         <xref linkend="guc-log-line-prefix"/>
         so that you can link the statement message to the later
         duration message using the process ID or session ID.
        </para>
       </note>
       </listitem>
      </varlistentry>

     </variablelist>

    <para>
     <xref linkend="runtime-config-severity-levels"/> explains the message
     severity levels used by <productname>PostgreSQL</productname>.  If logging output
     is sent to <systemitem>syslog</systemitem> or Windows'
     <systemitem>eventlog</systemitem>, the severity levels are translated
     as shown in the table.
    </para>

    <table id="runtime-config-severity-levels">
     <title>Message severity levels</title>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>Severity</entry>
        <entry>Usage</entry>
        <entry><systemitem>syslog</systemitem></entry>
        <entry><systemitem>eventlog</systemitem></entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><literal>DEBUG1..DEBUG5</literal></entry>
        <entry>Provides successively-more-detailed information for use by
         developers.</entry>
        <entry><literal>DEBUG</literal></entry>
        <entry><literal>INFORMATION</literal></entry>
       </row>

       <row>
        <entry><literal>INFO</literal></entry>
        <entry>Provides information implicitly requested by the user,
         e.g., output from <command>VACUUM VERBOSE</command>.</entry>
        <entry><literal>INFO</literal></entry>
        <entry><literal>INFORMATION</literal></entry>
       </row>

       <row>
        <entry><literal>NOTICE</literal></entry>
        <entry>Provides information that might be helpful to users, e.g.,
         notice of truncation of long identifiers.</entry>
        <entry><literal>NOTICE</literal></entry>
        <entry><literal>INFORMATION</literal></entry>
       </row>

       <row>
        <entry><literal>WARNING</literal></entry>
        <entry>Provides warnings of likely problems, e.g., <command>COMMIT</command>
         outside a transaction block.</entry>
        <entry><literal>NOTICE</literal></entry>
        <entry><literal>WARNING</literal></entry>
       </row>

       <row>
        <entry><literal>ERROR</literal></entry>
        <entry>Reports an error that caused the current command to
         abort.</entry>
        <entry><literal>WARNING</literal></entry>
        <entry><literal>ERROR</literal></entry>
       </row>

       <row>
        <entry><literal>LOG</literal></entry>
        <entry>Reports information of interest to administrators, e.g.,
         checkpoint activity.</entry>
        <entry><literal>INFO</literal></entry>
        <entry><literal>INFORMATION</literal></entry>
       </row>

       <row>
        <entry><literal>FATAL</literal></entry>
        <entry>Reports an error that caused the current session to
         abort.</entry>
        <entry><literal>ERR</literal></entry>
        <entry><literal>ERROR</literal></entry>
       </row>

       <row>
        <entry><literal>PANIC</literal></entry>
        <entry>Reports an error that caused all database sessions to abort.</entry>
        <entry><literal>CRIT</literal></entry>
        <entry><literal>ERROR</literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

    </sect2>
     <sect2 id="runtime-config-logging-what">
     <title>What To Log</title>

     <variablelist>

     <varlistentry id="guc-application-name" xreflabel="application_name">
      <term><varname>application_name</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>application_name</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        The <varname>application_name</varname> can be any string of less than
        <symbol>NAMEDATALEN</symbol> characters (64 characters in a standard build).
        It is typically set by an application upon connection to the server.
        The name will be displayed in the <structname>pg_stat_activity</structname> view
        and included in CSV log entries.  It can also be included in regular
        log entries via the <xref linkend="guc-log-line-prefix"/> parameter.
        Only printable ASCII characters may be used in the
        <varname>application_name</varname> value. Other characters will be
        replaced with question marks (<literal>?</literal>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>debug_print_parse</varname> (<type>boolean</type>)</term>
      <term><varname>debug_print_rewritten</varname> (<type>boolean</type>)</term>
      <term><varname>debug_print_plan</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>debug_print_parse</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_print_rewritten</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>debug_print_plan</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        These parameters enable various debugging output to be emitted.
        When set, they print the resulting parse tree, the query rewriter
        output, or the execution plan for each executed query.
        These messages are emitted at <literal>LOG</literal> message level, so by
        default they will appear in the server log but will not be sent to the
        client.  You can change that by adjusting
        <xref linkend="guc-client-min-messages"/> and/or
        <xref linkend="guc-log-min-messages"/>.
        These parameters are off by default.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>debug_pretty_print</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>debug_pretty_print</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        When set, <varname>debug_pretty_print</varname> indents the messages
        produced by <varname>debug_print_parse</varname>,
        <varname>debug_print_rewritten</varname>, or
        <varname>debug_print_plan</varname>.  This results in more readable
        but much longer output than the <quote>compact</quote> format used when
        it is off.  It is on by default.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-checkpoints" xreflabel="log_checkpoints">
      <term><varname>log_checkpoints</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>log_checkpoints</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Causes checkpoints to be logged in the server log. Some
        statistics about each checkpoint are included in the log messages,
        including the number of buffers written and the time spent writing
        them.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line. The default is off.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-connections" xreflabel="log_connections">
      <term><varname>log_connections</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>log_connections</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Causes each attempted connection to the server to be logged,
        as well as successful completion of client authentication.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.  The default is off.
       </para>

       <note>
        <para>
         Some client programs, like <application>psql</application>, attempt 
         to connect twice while determining if a password is required, so 
         duplicate <quote>connection received</quote> messages do not
         necessarily indicate a problem.
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-disconnections" xreflabel="log_disconnections">
      <term><varname>log_disconnections</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>log_disconnections</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        This outputs a line in the server log similar to
        <varname>log_connections</varname> but at session termination,
        and includes the duration of the session.  This is off by
        default.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-log-duration" xreflabel="log_duration">
      <term><varname>log_duration</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>log_duration</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Causes the duration of every completed statement to be logged.
        The default is <literal>off</literal>.
        Only superusers can change this setting.
       </para>

       <para>
        For clients using extended query protocol, durations of the Parse,
        Bind, and Execute steps are logged independently.
       </para>

       <note>
        <para>
         The difference between setting this option and setting
         <xref linkend="guc-log-min-duration-statement"/> to zero is that
         exceeding <varname>log_min_duration_statement</varname> forces the text of
         the query to be logged, but this option doesn't.  Thus, if
         <varname>log_duration</varname> is <literal>on</literal> and
         <varname>log_min_duration_statement</varname> has a positive value, all
         durations are logged but the query text is included only for
         statements exceeding the threshold.  This behavior can be useful for
         gathering statistics in high-load installations.
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-error-verbosity" xreflabel="log_error_verbosity">
      <term><varname>log_error_verbosity</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary><varname>log_error_verbosity</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Controls the amount of detail written in the server log for each
        message that is logged.  Valid values are <literal>TERSE</literal>,
        <literal>DEFAULT</literal>, and <literal>VERBOSE</literal>, each adding more
        fields to displayed messages.  <literal>TERSE</literal> excludes
        the logging of <literal>DETAIL</literal>, <literal>HINT</literal>,
        <literal>QUERY</literal>, and <literal>CONTEXT</literal> error information.
        <literal>VERBOSE</literal> output includes the <symbol>SQLSTATE</symbol> error
        code (see also <xref linkend="errcodes-appendix"/>) and the source code file name, function name,
        and line number that generated the error.
        Only superusers can change this setting.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-hostname" xreflabel="log_hostname">
      <term><varname>log_hostname</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>log_hostname</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        By default, connection log messages only show the IP address of the
        connecting host. Turning this parameter on causes logging of the
        host name as well.  Note that depending on your host name resolution
        setup this might impose a non-negligible performance penalty.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-log-line-prefix" xreflabel="log_line_prefix">
      <term><varname>log_line_prefix</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>log_line_prefix</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
         This is a <function>printf</function>-style string that is output at the
         beginning of each log line.
         <literal>%</literal> characters begin <quote>escape sequences</quote>
         that are replaced with status information as outlined below.
         Unrecognized escapes are ignored. Other
         characters are copied straight to the log line. Some escapes are
         only recognized by session processes, and are ignored by
         background processes such as the main server process.
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line. The default is an empty string.

         <informaltable>
          <tgroup cols="3">
           <thead>
            <row>
             <entry>Escape</entry>
             <entry>Effect</entry>
             <entry>Session only</entry>
             </row>
            </thead>
           <tbody>
            <row>
             <entry><literal>%a</literal></entry>
             <entry>Application name</entry>
             <entry>yes</entry>
            </row>
            <row>
             <entry><literal>%u</literal></entry>
             <entry>User name</entry>
             <entry>yes</entry>
            </row>
            <row>
             <entry><literal>%d</literal></entry>
             <entry>Database name</entry>
             <entry>yes</entry>
            </row>
            <row>
             <entry><literal>%r</literal></entry>
             <entry>Remote host name or IP address, and remote port</entry>
             <entry>yes</entry>
            </row>
            <row>
             <entry><literal>%h</literal></entry>
             <entry>Remote host name or IP address</entry>
             <entry>yes</entry>
            </row>
            <row>
             <entry><literal>%p</literal></entry>
             <entry>Process ID</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%t</literal></entry>
             <entry>Time stamp without milliseconds</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%m</literal></entry>
             <entry>Time stamp with milliseconds</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%i</literal></entry>
             <entry>Command tag: type of session's current command</entry>
             <entry>yes</entry>
            </row>
            <row>
             <entry><literal>%e</literal></entry>
             <entry>SQLSTATE error code</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%c</literal></entry>
             <entry>Session ID: see below</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%l</literal></entry>
             <entry>Number of the log line for each session or process, starting at 1</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%s</literal></entry>
             <entry>Process start time stamp</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%v</literal></entry>
             <entry>Virtual transaction ID (backendID/localXID)</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%x</literal></entry>
             <entry>Transaction ID (0 if none is assigned)</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%q</literal></entry>
             <entry>Produces no output, but tells non-session
             processes to stop at this point in the string; ignored by
             session processes</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%%</literal></entry>
             <entry>Literal <literal>%</literal></entry>
             <entry>no</entry>
            </row>
           </tbody>
          </tgroup>
         </informaltable>

         The <literal>%c</literal> escape prints a quasi-unique session identifier,
         consisting of two 4-byte hexadecimal numbers (without leading zeros)
         separated by a dot.  The numbers are the process start time and the
         process ID, so <literal>%c</literal> can also be used as a space saving way
         of printing those items.  For example, to generate the session
         identifier from <literal>pg_stat_activity</literal>, use this query:
<programlisting>
SELECT to_hex(EXTRACT(EPOCH FROM backend_start)::integer) || '.' ||
       to_hex(procpid)
FROM pg_stat_activity;
</programlisting>

       </para>

       <tip>
        <para>
         If you set a nonempty value for <varname>log_line_prefix</varname>,
         you should usually make its last character be a space, to provide
         visual separation from the rest of the log line.  A punctuation
         character can be used too.
        </para>
       </tip>

       <tip>
        <para>
         <application>Syslog</application> produces its own 
         time stamp and process ID information, so you probably do not want to
         include those escapes if you are logging to <application>syslog</application>.
        </para>
       </tip>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-lock-waits" xreflabel="log_lock_waits">
      <term><varname>log_lock_waits</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>log_lock_waits</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Controls whether a log message is produced when a session waits
        longer than <xref linkend="guc-deadlock-timeout"/> to acquire a
        lock.  This is useful in determining if lock waits are causing
        poor performance.  The default is <literal>off</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-statement" xreflabel="log_statement">
      <term><varname>log_statement</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary><varname>log_statement</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Controls which SQL statements are logged. Valid values are
        <literal>none</literal> (off), <literal>ddl</literal>, <literal>mod</literal>, and
        <literal>all</literal> (all statements). <literal>ddl</literal> logs all data definition
        statements, such as <command>CREATE</command>, <command>ALTER</command>, and
        <command>DROP</command> statements. <literal>mod</literal> logs all
        <literal>ddl</literal> statements, plus data-modifying statements
        such as <command>INSERT</command>,
        <command>UPDATE</command>, <command>DELETE</command>, <command>TRUNCATE</command>,
        and <command>COPY FROM</command>.
        <command>PREPARE</command>, <command>EXECUTE</command>, and
        <command>EXPLAIN ANALYZE</command> statements are also logged if their
        contained command is of an appropriate type.  For clients using
        extended query protocol, logging occurs when an Execute message
        is received, and values of the Bind parameters are included
        (with any embedded single-quote marks doubled).
       </para>

       <para>
        The default is <literal>none</literal>. Only superusers can change this
        setting.
       </para>

       <note>
        <para>
         Statements that contain simple syntax errors are not logged
         even by the <varname>log_statement</varname> = <literal>all</literal> setting,
         because the log message is emitted only after basic parsing has
         been done to determine the statement type.  In the case of extended
         query protocol, this setting likewise does not log statements that
         fail before the Execute phase (i.e., during parse analysis or
         planning).  Set <varname>log_min_error_statement</varname> to
         <literal>ERROR</literal> (or lower) to log such statements.
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-temp-files" xreflabel="log_temp_files">
      <term><varname>log_temp_files</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>log_temp_files</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Controls logging of temporary file names and sizes.
        Temporary files can be
        created for sorts, hashes, and temporary query results.
        A log entry is made for each temporary file when it is deleted.
        A value of zero logs all temporary file information, while positive
        values log only files whose size is greater than or equal to
        the specified number of kilobytes.  The
        default setting is <literal>-1</literal>, which disables such logging.
        Only superusers can change this setting.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-timezone" xreflabel="log_timezone">
      <term><varname>log_timezone</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>log_timezone</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Sets the time zone used for timestamps written in the log.
        Unlike <xref linkend="guc-timezone"/>, this value is cluster-wide,
        so that all sessions will report timestamps consistently.
        The default is <literal>unknown</literal>, which means use whatever
        the system environment specifies as the time zone.  See <xref
        linkend="datatype-timezones"/> for more information.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
     <sect2 id="runtime-config-logging-csvlog">
     <title>Using CSV-Format Log Output</title>

       <para>
        Including <literal>csvlog</literal> in the <varname>log_destination</varname> list
        provides a convenient way to import log files into a database table.
        This option emits log lines in comma-separated-values
        (<acronym>CSV</acronym>) format,
        with these columns:
        timestamp with milliseconds,
        user name,
        database name,
        process ID,
        client host:port number,
        session ID,
        per-session line number,
        command tag,
        session start time,
        virtual transaction ID,
        regular transaction ID,
        error severity,
        SQLSTATE code,
        error message,
        error message detail,
        hint,
        internal query that led to the error (if any),
        character count of the error position therein,
        error context,
        user query that led to the error (if any and enabled by
        <varname>log_min_error_statement</varname>),
        character count of the error position therein,
        location of the error in the PostgreSQL source code
        (if <varname>log_error_verbosity</varname> is set to <literal>verbose</literal>),
        and application name.
        Here is a sample table definition for storing CSV-format log output:

<programlisting>
CREATE TABLE postgres_log
(
  log_time timestamp(3) with time zone,
  user_name text,
  database_name text,
  process_id integer,
  connection_from text,
  session_id text,
  session_line_num bigint,
  command_tag text,
  session_start_time timestamp with time zone,
  virtual_transaction_id text,
  transaction_id bigint,
  error_severity text,
  sql_state_code text,
  message text,
  detail text,
  hint text,
  internal_query text,
  internal_query_pos integer,
  context text,
  query text,
  query_pos integer,
  location text,
  application_name text,
  PRIMARY KEY (session_id, session_line_num)
);
</programlisting>
       </para>

       <para>
        To import a log file into this table, use the <command>COPY FROM</command>
        command:

<programlisting>
COPY postgres_log FROM '/full/path/to/logfile.csv' WITH csv;
</programlisting>
       </para>

       <para>
       There are a few things you need to do to simplify importing CSV log
       files:

       <orderedlist>
         <listitem>
           <para>
            Set <varname>log_filename</varname> and
            <varname>log_rotation_age</varname> to provide a consistent,
            predictable naming scheme for your log files.  This lets you
            predict what the file name will be and know when an individual log
            file is complete and therefore ready to be imported.
         </para>
        </listitem>

        <listitem>
           <para>
            Set <varname>log_rotation_size</varname> to 0 to disable 
            size-based log rotation, as it makes the log file name difficult 
            to predict. 
           </para>
        </listitem>

        <listitem>
          <para>
           Set <varname>log_truncate_on_rotation</varname> to <literal>on</literal> so
           that old log data isn't mixed with the new in the same file.
          </para>
        </listitem>

        <listitem>
          <para>
           The table definition above includes a primary key specification.
           This is useful to protect against accidentally importing the same
           information twice.  The <command>COPY</command> command commits all of the
           data it imports at one time, so any error will cause the entire
           import to fail.  If you import a partial log file and later import
           the file again when it is complete, the primary key violation will
           cause the import to fail.  Wait until the log is complete and
           closed before importing.  This procedure will also protect against
           accidentally importing a partial line that hasn't been completely
           written, which would also cause <command>COPY</command> to fail.
          </para>
        </listitem>
        </orderedlist>
      </para>

    </sect2>
   </sect1>

   <sect1 id="runtime-config-statistics">
    <title>Run-Time Statistics</title>

    <sect2 id="runtime-config-statistics-collector">
     <title>Query and Index Statistics Collector</title>

     <para>
      These parameters control server-wide statistics collection features.
      When statistics collection is enabled, the data that is produced can be
      accessed via the <structname>pg_stat</structname> and
      <structname>pg_statio</structname> family of system views.
      Refer to <xref linkend="monitoring"/> for more information.
     </para>

     <variablelist>

     <varlistentry id="guc-track-activities" xreflabel="track_activities">
      <term><varname>track_activities</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>track_activities</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Enables the collection of information on the currently
        executing command of each session, along with the time when
        that command began execution. This parameter is on by
        default. Note that even when enabled, this information is not
        visible to all users, only to superusers and the user owning
        the session being reported on, so it should not represent a
        security risk.
        Only superusers can change this setting.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-activity-query-size" xreflabel="track_activity_query_size">
      <term><varname>track_activity_query_size</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>track_activity_query_size</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
       Specifies the number of bytes reserved to track the currently
       executing command for each active session, for the
       <structname>pg_stat_activity</structname>.<structfield>current_query</structfield> field.
       The default value is 1024. This parameter can only be set at server
       start.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-counts" xreflabel="track_counts">
      <term><varname>track_counts</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>track_counts</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Enables collection of statistics on database activity.
        This parameter is on by default, because the autovacuum
        daemon needs the collected information.
        Only superusers can change this setting.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-functions" xreflabel="track_functions">
      <term><varname>track_functions</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary><varname>track_functions</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Enables tracking of function call counts and time used. Specify
        <literal>pl</literal> to track only procedural-language functions,
        <literal>all</literal> to also track SQL and C language functions.
        The default is <literal>none</literal>, which disables function
        statistics tracking.  Only superusers can change this setting.
       </para>

       <note>
        <para>
         SQL-language functions that are simple enough to be <quote>inlined</quote>
         into the calling query will not be tracked, regardless of this
         setting.
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-update-process-title" xreflabel="update_process_title">
      <term><varname>update_process_title</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>update_process_title</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Enables updating of the process title every time a new SQL command
        is received by the server.  The process title is typically viewed
        by the <command>ps</command> command,
        or in Windows by using the <application>Process Explorer</application>.
        Only superusers can change this setting.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-temp-directory" xreflabel="stats_temp_directory">
      <term><varname>stats_temp_directory</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>stats_temp_directory</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Sets the directory to store temporary statistics data in. This can be
        a path relative to the data directory or an absolute path. The default
        is <filename>pg_stat_tmp</filename>. Pointing this at a RAM-based
        file system will decrease physical I/O requirements and can lead to
        improved performance.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-statistics-monitor">
     <title>Statistics Monitoring</title>
     <variablelist>

     <varlistentry>
      <term><varname>log_statement_stats</varname> (<type>boolean</type>)</term>
      <term><varname>log_parser_stats</varname> (<type>boolean</type>)</term>
      <term><varname>log_planner_stats</varname> (<type>boolean</type>)</term>
      <term><varname>log_executor_stats</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>log_statement_stats</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_parser_stats</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_planner_stats</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>log_executor_stats</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        For each query, output performance statistics of the respective
        module to the server log. This is a crude profiling
        instrument, similar to the Unix <function>getrusage()</function> operating
        system facility.  <varname>log_statement_stats</varname> reports total
        statement statistics, while the others report per-module statistics.
        <varname>log_statement_stats</varname> cannot be enabled together with
        any of the per-module options.  All of these options are disabled by
        default.   Only superusers can change these settings.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
   </sect1>

   <sect1 id="runtime-config-autovacuum">
    <title>Automatic Vacuuming</title>

    <indexterm>
     <primary>autovacuum</primary>
     <secondary>configuration parameters</secondary>
    </indexterm>

     <para>
      These settings control the behavior of the <firstterm>autovacuum</firstterm>
      feature.  Refer to <xref linkend="autovacuum"/> for
      more information.
     </para>

    <variablelist>

     <varlistentry id="guc-autovacuum" xreflabel="autovacuum">
      <term><varname>autovacuum</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>autovacuum</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Controls whether the server should run the
        autovacuum launcher daemon.  This is on by default; however,
        <xref linkend="guc-track-counts"/> must also be enabled for
        autovacuum to work.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
       <para>
        Note that even when this parameter is disabled, the system
        will launch autovacuum processes if necessary to
        prevent transaction ID wraparound.  See <xref
        linkend="vacuum-for-wraparound"/> for more information.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-autovacuum-min-duration" xreflabel="log_autovacuum_min_duration">
      <term><varname>log_autovacuum_min_duration</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>log_autovacuum_min_duration</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Causes each action executed by autovacuum to be logged if it ran for at
        least the specified number of milliseconds.  Setting this to zero logs
        all autovacuum actions. Minus-one (the default) disables logging
        autovacuum actions.  For example, if you set this to
        <literal>250ms</literal> then all automatic vacuums and analyzes that run
        250ms or longer will be logged.  Enabling this parameter can be helpful
        in tracking autovacuum activity.  This setting can only be set in
        the <filename>postgresql.conf</filename> file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-max-workers" xreflabel="autovacuum_max_workers">
      <term><varname>autovacuum_max_workers</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>autovacuum_max_workers</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Specifies the maximum number of autovacuum processes (other than the
        autovacuum launcher) which may be running at any one time.  The default
        is three.  This parameter can only be set at server start.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-naptime" xreflabel="autovacuum_naptime">
      <term><varname>autovacuum_naptime</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>autovacuum_naptime</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Specifies the minimum delay between autovacuum runs on any given
        database.  In each round the daemon examines the
        database and issues <command>VACUUM</command> and <command>ANALYZE</command> commands
        as needed for tables in that database.  The delay is measured
        in seconds, and the default is one minute (<literal>1min</literal>).
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-threshold" xreflabel="autovacuum_vacuum_threshold">
      <term><varname>autovacuum_vacuum_threshold</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>autovacuum_vacuum_threshold</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Specifies the minimum number of updated or deleted tuples needed
        to trigger a <command>VACUUM</command> in any one table.
        The default is 50 tuples.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        This setting can be overridden for individual tables by
        changing storage parameters.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-analyze-threshold" xreflabel="autovacuum_analyze_threshold">
      <term><varname>autovacuum_analyze_threshold</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>autovacuum_analyze_threshold</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Specifies the minimum number of inserted, updated or deleted tuples
        needed to trigger an <command>ANALYZE</command> in any one table.
        The default is 50 tuples.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        This setting can be overridden for individual tables by
        changing storage parameters.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-scale-factor" xreflabel="autovacuum_vacuum_scale_factor">
      <term><varname>autovacuum_vacuum_scale_factor</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary><varname>autovacuum_vacuum_scale_factor</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Specifies a fraction of the table size to add to
        <varname>autovacuum_vacuum_threshold</varname>
        when deciding whether to trigger a <command>VACUUM</command>.
        The default is 0.2 (20% of table size).
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        This setting can be overridden for individual tables by
        changing storage parameters.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-analyze-scale-factor" xreflabel="autovacuum_analyze_scale_factor">
      <term><varname>autovacuum_analyze_scale_factor</varname> (<type>floating point</type>)</term>
      <indexterm>
       <primary><varname>autovacuum_analyze_scale_factor</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Specifies a fraction of the table size to add to
        <varname>autovacuum_analyze_threshold</varname>
        when deciding whether to trigger an <command>ANALYZE</command>.
        The default is 0.1 (10% of table size).
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        This setting can be overridden for individual tables by
        changing storage parameters.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-freeze-max-age" xreflabel="autovacuum_freeze_max_age">
      <term><varname>autovacuum_freeze_max_age</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>autovacuum_freeze_max_age</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Specifies the maximum age (in transactions) that a table's
        <structname>pg_class</structname>.<structfield>relfrozenxid</structfield> field can
        attain before a <command>VACUUM</command> operation is forced
        to prevent transaction ID wraparound within the table.
        Note that the system will launch autovacuum processes to
        prevent wraparound even when autovacuum is otherwise disabled.
       </para>

       <para>
        Vacuum also allows removal of old files from the
        <filename>pg_clog</filename> subdirectory, which is why the default
        is a relatively low 200 million transactions.
        This parameter can only be set at server start, but the setting
        can be reduced for individual tables by
        changing storage parameters.
        For more information see <xref linkend="vacuum-for-wraparound"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-cost-delay" xreflabel="autovacuum_vacuum_cost_delay">
      <term><varname>autovacuum_vacuum_cost_delay</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>autovacuum_vacuum_cost_delay</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Specifies the cost delay value that will be used in automatic
        <command>VACUUM</command> operations.  If <literal>-1</literal> is
        specified, the regular
        <xref linkend="guc-vacuum-cost-delay"/> value will be used.
        The default value is 20 milliseconds.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        This setting can be overridden for individual tables by
        changing storage parameters.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-cost-limit" xreflabel="autovacuum_vacuum_cost_limit">
      <term><varname>autovacuum_vacuum_cost_limit</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>autovacuum_vacuum_cost_limit</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Specifies the cost limit value that will be used in automatic
        <command>VACUUM</command> operations.  If <literal>-1</literal> is specified (which is the
        default), the regular
        <xref linkend="guc-vacuum-cost-limit"/> value will be used.  Note that
        the value is distributed proportionally among the running autovacuum
        workers, if there is more than one, so that the sum of the limits of
        each worker never exceeds the limit on this variable.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
        This setting can be overridden for individual tables by
        changing storage parameters.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect1>

   <sect1 id="runtime-config-client">
    <title>Client Connection Defaults</title>

    <sect2 id="runtime-config-client-statement">
     <title>Statement Behavior</title>
     <variablelist>

     <varlistentry id="guc-search-path" xreflabel="search_path">
      <term><varname>search_path</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>search_path</varname> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>path</primary><secondary>for schemas</secondary></indexterm>
      <listitem>
       <para>
        This variable specifies the order in which schemas are searched
        when an object (table, data type, function, etc.) is referenced by a
        simple name with no schema specified.  When there are objects of
        identical names in different schemas, the one found first
        in the search path is used.  An object that is not in any of the
        schemas in the search path can only be referenced by specifying
        its containing schema with a qualified (dotted) name.
       </para>

       <para>
        The value for <varname>search_path</varname> must be a comma-separated
        list of schema names.  If one of the list items is
        the special value <literal>$user</literal>, then the schema
        having the name returned by <function>SESSION_USER</function> is substituted, if there
        is such a schema.  (If not, <literal>$user</literal> is ignored.)
       </para>

       <para>
        The system catalog schema, <literal>pg_catalog</literal>, is always
        searched, whether it is mentioned in the path or not.  If it is
        mentioned in the path then it will be searched in the specified
        order.  If <literal>pg_catalog</literal> is not in the path then it will
        be searched <emphasis>before</emphasis> searching any of the path items.
       </para>

       <para>
        Likewise, the current session's temporary-table schema,
        <literal>pg_temp_<replaceable>nnn</replaceable></literal>, is always searched if it
        exists.  It can be explicitly listed in the path by using the
        alias <literal>pg_temp</literal>.  If it is not listed in the path then
        it is searched first (even before <literal>pg_catalog</literal>).  However,
        the temporary schema is only searched for relation (table, view,
        sequence, etc) and data type names.  It is never searched for
        function or operator names.
       </para>

       <para>
        When objects are created without specifying a particular target
        schema, they will be placed in the first schema listed
        in the search path.  An error is reported if the search path is
        empty.
       </para>

       <para>
        The default value for this parameter is
        <literal>'"$user", public'</literal> (where the second part will be
        ignored if there is no schema named <literal>public</literal>).
        This supports shared use of a database (where no users
        have private schemas, and all share use of <literal>public</literal>),
        private per-user schemas, and combinations of these.  Other
        effects can be obtained by altering the default search path
        setting, either globally or per-user.
       </para>

       <para>
        The current effective value of the search path can be examined
        via the <acronym>SQL</acronym> function
        <function>current_schemas()</function>.  This is not quite the same as
        examining the value of <varname>search_path</varname>, since
        <function>current_schemas()</function> shows how the items
        appearing in <varname>search_path</varname> were resolved.
       </para>

       <para>
        For more information on schema handling, see <xref linkend="ddl-schemas"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-tablespace" xreflabel="default_tablespace">
      <term><varname>default_tablespace</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>default_tablespace</varname> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>tablespace</primary><secondary>default</secondary></indexterm>
      <listitem>
       <para>
        This variable specifies the default tablespace in which to create
        objects (tables and indexes) when a <command>CREATE</command> command does
        not explicitly specify a tablespace.
       </para>

       <para>
        The value is either the name of a tablespace, or an empty string
        to specify using the default tablespace of the current database.
        If the value does not match the name of any existing tablespace,
        <productname>PostgreSQL</productname> will automatically use the default
        tablespace of the current database.  If a nondefault tablespace
        is specified, the user must have <literal>CREATE</literal> privilege
        for it, or creation attempts will fail.
       </para>

       <para>
        This variable is not used for temporary tables; for them,
        <xref linkend="guc-temp-tablespaces"/> is consulted instead.
       </para>

       <para>
        For more information on tablespaces,
        see <xref linkend="manage-ag-tablespaces"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-temp-tablespaces" xreflabel="temp_tablespaces">
      <term><varname>temp_tablespaces</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>temp_tablespaces</varname> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>tablespace</primary><secondary>temporary</secondary></indexterm>
      <listitem>
       <para>
        This variable specifies tablespaces in which to create temporary
        objects (temp tables and indexes on temp tables) when a
        <command>CREATE</command> command does not explicitly specify a tablespace.
        Temporary files for purposes such as sorting large data sets
        are also created in these tablespaces.
       </para>

       <para>
        The value is a list of names of tablespaces.  When there is more than
        one name in the list, <productname>PostgreSQL</productname> chooses a random
        member of the list each time a temporary object is to be created;
        except that within a transaction, successively created temporary
        objects are placed in successive tablespaces from the list.
        If the selected element of the list is an empty string,
        <productname>PostgreSQL</productname> will automatically use the default
        tablespace of the current database instead.
       </para>

       <para>
        When <varname>temp_tablespaces</varname> is set interactively, specifying a
        nonexistent tablespace is an error, as is specifying a tablespace for
        which the user does not have <literal>CREATE</literal> privilege.  However,
        when using a previously set value, nonexistent tablespaces are
        ignored, as are tablespaces for which the user lacks
        <literal>CREATE</literal> privilege.  In particular, this rule applies when
        using a value set in <filename>postgresql.conf</filename>.
       </para>

       <para>
        The default value is an empty string, which results in all temporary
        objects being created in the default tablespace of the current
        database.
       </para>

       <para>
        See also <xref linkend="guc-default-tablespace"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-check-function-bodies" xreflabel="check_function_bodies">
      <term><varname>check_function_bodies</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>check_function_bodies</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        This parameter is normally on. When set to <literal>off</literal>, it
        disables validation of the function body string during <xref
        linkend="sql-createfunction"/>. Disabling validation is
        occasionally useful to avoid problems such as forward references
        when restoring function definitions from a dump.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-transaction-isolation" xreflabel="default_transaction_isolation">
      <indexterm>
       <primary>transaction isolation level</primary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_isolation</varname> configuration parameter</primary>
      </indexterm>
      <term><varname>default_transaction_isolation</varname> (<type>enum</type>)</term>
      <listitem>
       <para>
        Each SQL transaction has an isolation level, which can be
        either <quote>read uncommitted</quote>, <quote>read
        committed</quote>, <quote>repeatable read</quote>, or
        <quote>serializable</quote>.  This parameter controls the
        default isolation level of each new transaction. The default
        is <quote>read committed</quote>.
       </para>

       <para>
        Consult <xref linkend="mvcc"/> and <xref
        linkend="sql-set-transaction"/> for more information.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-transaction-read-only" xreflabel="default_transaction_read_only">
      <indexterm>
       <primary>read-only transaction</primary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_read_only</varname> configuration parameter</primary>
      </indexterm>

      <term><varname>default_transaction_read_only</varname> (<type>boolean</type>)</term>
      <listitem>
       <para>
        A read-only SQL transaction cannot alter non-temporary tables.
        This parameter controls the default read-only status of each new
        transaction. The default is <literal>off</literal> (read/write).
       </para>

       <para>
        Consult <xref linkend="sql-set-transaction"/> for more information.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-session-replication-role" xreflabel="session_replication_role">
      <term><varname>session_replication_role</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary><varname>session_replication_role</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Controls firing of replication-related triggers and rules for the
        current session.  Setting this variable requires
        superuser privilege and results in discarding any previously cached
        query plans.  Possible values are <literal>origin</literal> (the default),
        <literal>replica</literal> and <literal>local</literal>.
        See <xref linkend="sql-altertable"/> for
        more information.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-statement-timeout" xreflabel="statement_timeout">
      <term><varname>statement_timeout</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>statement_timeout</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Abort any statement that takes over the specified number of
        milliseconds, starting from the time the command arrives at the server
        from the client.  If <varname>log_min_error_statement</varname> is set to
        <literal>ERROR</literal> or lower, the statement that timed out will also be
        logged.  A value of zero (the default) turns this off.
       </para>

       <para>
        Setting <varname>statement_timeout</varname> in
        <filename>postgresql.conf</filename> is not recommended because it
        affects all sessions.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-freeze-table-age" xreflabel="vacuum_freeze_table_age">
      <term><varname>vacuum_freeze_table_age</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>vacuum_freeze_table_age</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        <command>VACUUM</command> performs a whole-table scan if the table's
        <structname>pg_class</structname>.<structfield>relfrozenxid</structfield> field has reached
        the age specified by this setting.  The default is 150 million
        transactions.  Although users can set this value anywhere from zero to
        one billion, <command>VACUUM</command> will silently limit the effective value
        to 95% of <xref linkend="guc-autovacuum-freeze-max-age"/>, so that a
        periodical manual <command>VACUUM</command> has a chance to run before an
        anti-wraparound autovacuum is launched for the table. For more
        information see
        <xref linkend="vacuum-for-wraparound"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-freeze-min-age" xreflabel="vacuum_freeze_min_age">
      <term><varname>vacuum_freeze_min_age</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>vacuum_freeze_min_age</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Specifies the cutoff age (in transactions) that <command>VACUUM</command>
        should use to decide whether to replace transaction IDs with
        <literal>FrozenXID</literal> while scanning a table.
        The default is 50 million transactions.  Although
        users can set this value anywhere from zero to one billion,
        <command>VACUUM</command> will silently limit the effective value to half
        the value of <xref linkend="guc-autovacuum-freeze-max-age"/>, so
        that there is not an unreasonably short time between forced
        autovacuums.  For more information see <xref
        linkend="vacuum-for-wraparound"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bytea-output" xreflabel="bytea_output">
      <term><varname>bytea_output</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary><varname>bytea_output</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Sets the output format for values of type <type>bytea</type>.
        Valid values are <literal>hex</literal> (the default)
        and <literal>escape</literal> (the traditional PostgreSQL
        format).  See <xref linkend="datatype-binary"/> for more
        information.  The <type>bytea</type> type always
        accepts both formats on input, regardless of this setting.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-xmlbinary" xreflabel="xmlbinary">
      <term><varname>xmlbinary</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary><varname>xmlbinary</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Sets how binary values are to be encoded in XML.  This applies
        for example when <type>bytea</type> values are converted to
        XML by the functions <function>xmlelement</function> or
        <function>xmlforest</function>.  Possible values are
        <literal>base64</literal> and <literal>hex</literal>, which
        are both defined in the XML Schema standard.  The default is
        <literal>base64</literal>.  For further information about
        XML-related functions, see <xref linkend="functions-xml"/>.
       </para>

       <para>
        The actual choice here is mostly a matter of taste,
        constrained only by possible restrictions in client
        applications.  Both methods support all possible values,
        although the hex encoding will be somewhat larger than the
        base64 encoding.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-xmloption" xreflabel="xmloption">
      <term><varname>xmloption</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary><varname>xmloption</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>SET XML OPTION</varname></primary>
      </indexterm>
      <indexterm>
       <primary>XML option</primary>
      </indexterm>
      <listitem>
       <para>
        Sets whether <literal>DOCUMENT</literal> or
        <literal>CONTENT</literal> is implicit when converting between
        XML and character string values.  See <xref
        linkend="datatype-xml"/> for a description of this.  Valid
        values are <literal>DOCUMENT</literal> and
        <literal>CONTENT</literal>.  The default is
        <literal>CONTENT</literal>.
       </para>

       <para>
        According to the SQL standard, the command to set this option is
<synopsis>
SET XML OPTION { DOCUMENT | CONTENT };
</synopsis>
        This syntax is also available in PostgreSQL.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
     <sect2 id="runtime-config-client-format">
     <title>Locale and Formatting</title>

     <variablelist>

     <varlistentry id="guc-datestyle" xreflabel="DateStyle">
      <term><varname>DateStyle</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>DateStyle</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Sets the display format for date and time values, as well as the
        rules for interpreting ambiguous date input values. For
        historical reasons, this variable contains two independent
        components: the output format specification (<literal>ISO</literal>,
        <literal>Postgres</literal>, <literal>SQL</literal>, or <literal>German</literal>)
        and the input/output specification for year/month/day ordering
        (<literal>DMY</literal>, <literal>MDY</literal>, or <literal>YMD</literal>). These
        can be set separately or together. The keywords <literal>Euro</literal>
        and <literal>European</literal> are synonyms for <literal>DMY</literal>; the
        keywords <literal>US</literal>, <literal>NonEuro</literal>, and
        <literal>NonEuropean</literal> are synonyms for <literal>MDY</literal>. See
        <xref linkend="datatype-datetime"/> for more information. The
        built-in default is <literal>ISO, MDY</literal>, but
        <application>initdb</application> will initialize the
        configuration file with a setting that corresponds to the
        behavior of the chosen <varname>lc_time</varname> locale.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-intervalstyle" xreflabel="IntervalStyle">
      <term><varname>IntervalStyle</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary><varname>IntervalStyle</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Sets the display format for interval values.
        The value <literal>sql_standard</literal> will produce
        output matching <acronym>SQL</acronym> standard interval literals.
        The value <literal>postgres</literal> (which is the default) will produce
        output matching <productname>PostgreSQL</productname> releases prior to 8.4
        when the <xref linkend="guc-datestyle"/>
        parameter was set to <literal>ISO</literal>.
        The value <literal>postgres_verbose</literal> will produce output
        matching <productname>PostgreSQL</productname> releases prior to 8.4
        when the <varname>DateStyle</varname>
        parameter was set to non-<literal>ISO</literal> output.
        The value <literal>iso_8601</literal> will produce output matching the time
        interval <quote>format with designators</quote> defined in section
        4.4.3.2 of ISO 8601.
       </para>
       <para>
        The <varname>IntervalStyle</varname> parameter also affects the
        interpretation of ambiguous interval input.  See
        <xref linkend="datatype-interval-input"/> for more information.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-timezone" xreflabel="timezone">
      <term><varname>timezone</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>timezone</varname> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>time zone</primary></indexterm>
      <listitem>
       <para>
        Sets the time zone for displaying and interpreting time stamps.
        The default is <literal>unknown</literal>, which means to use whatever
        the system environment specifies as the time zone.  See <xref
        linkend="datatype-timezones"/> for more
        information.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-timezone-abbreviations" xreflabel="timezone_abbreviations">
      <term><varname>timezone_abbreviations</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>timezone_abbreviations</varname> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>time zone names</primary></indexterm>
      <listitem>
       <para>
        Sets the collection of time zone abbreviations that will be accepted
        by the server for datetime input.  The default is <literal>'Default'</literal>,
        which is a collection that works in most of the world; there are
        also 'Australia' and 'India', and other collections can be defined
        for a particular installation.  See <xref
        linkend="datetime-appendix"/> for more information.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-extra-float-digits" xreflabel="extra_float_digits">
      <indexterm>
       <primary>significant digits</primary>
      </indexterm>
      <indexterm>
       <primary>floating-point</primary>
       <secondary>display</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>extra_float_digits</varname> configuration parameter</primary>
      </indexterm>

      <term><varname>extra_float_digits</varname> (<type>integer</type>)</term>
      <listitem>
       <para>
        This parameter adjusts the number of digits displayed for
        floating-point values, including <type>float4</type>, <type>float8</type>,
        and geometric data types.  The parameter value is added to the
        standard number of digits (<literal>FLT_DIG</literal> or <literal>DBL_DIG</literal>
        as appropriate).  The value can be set as high as 3, to include
        partially-significant digits; this is especially useful for dumping
        float data that needs to be restored exactly.  Or it can be set
        negative to suppress unwanted digits.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-client-encoding" xreflabel="client_encoding">
      <term><varname>client_encoding</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>client_encoding</varname> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>character set</primary></indexterm>
      <listitem>
       <para>
        Sets the client-side encoding (character set).
        The default is to use the database encoding.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-messages" xreflabel="lc_messages">
      <term><varname>lc_messages</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>lc_messages</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Sets the language in which messages are displayed.  Acceptable
        values are system-dependent; see <xref linkend="locale"/> for
        more information.  If this variable is set to the empty string
        (which is the default) then the value is inherited from the
        execution environment of the server in a system-dependent way.
       </para>

       <para>
        On some systems, this locale category does not exist.  Setting
        this variable will still work, but there will be no effect.
        Also, there is a chance that no translated messages for the
        desired language exist.  In that case you will continue to see
        the English messages.
       </para>

       <para>
        Only superusers can change this setting, because it affects the
        messages sent to the server log as well as to the client, and
        an improper value might obscure the readability of the server
        logs.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-monetary" xreflabel="lc_monetary">
      <term><varname>lc_monetary</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>lc_monetary</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Sets the locale to use for formatting monetary amounts, for
        example with the <function>to_char</function> family of
        functions.  Acceptable values are system-dependent; see <xref
        linkend="locale"/> for more information.  If this variable is
        set to the empty string (which is the default) then the value
        is inherited from the execution environment of the server in a
        system-dependent way.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-numeric" xreflabel="lc_numeric">
      <term><varname>lc_numeric</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>lc_numeric</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Sets the locale to use for formatting numbers, for example
        with the <function>to_char</function> family of
        functions. Acceptable values are system-dependent; see <xref
        linkend="locale"/> for more information.  If this variable is
        set to the empty string (which is the default) then the value
        is inherited from the execution environment of the server in a
        system-dependent way.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-time" xreflabel="lc_time">
      <term><varname>lc_time</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>lc_time</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Sets the locale to use for formatting dates and times, for example
        with the <function>to_char</function> family of
        functions. Acceptable values are system-dependent; see <xref
        linkend="locale"/> for more information.  If this variable is
        set to the empty string (which is the default) then the value
        is inherited from the execution environment of the server in a
        system-dependent way.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-text-search-config" xreflabel="default_text_search_config">
      <term><varname>default_text_search_config</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>default_text_search_config</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Selects the text search configuration that is used by those variants
        of the text search functions that do not have an explicit argument
        specifying the configuration.
        See <xref linkend="textsearch"/> for further information.
        The built-in default is <literal>pg_catalog.simple</literal>, but
        <application>initdb</application> will initialize the
        configuration file with a setting that corresponds to the
        chosen <varname>lc_ctype</varname> locale, if a configuration
        matching that locale can be identified.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
     <sect2 id="runtime-config-client-other">
     <title>Other Defaults</title>

     <variablelist>

     <varlistentry id="guc-dynamic-library-path" xreflabel="dynamic_library_path">
      <term><varname>dynamic_library_path</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>dynamic_library_path</varname> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>dynamic loading</primary></indexterm>
      <listitem>
       <para>
        If a dynamically loadable module needs to be opened and the
        file name specified in the <command>CREATE FUNCTION</command> or
        <command>LOAD</command> command
        does not have a directory component (i.e., the
        name does not contain a slash), the system will search this
        path for the required file.
       </para>

       <para>
        The value for <varname>dynamic_library_path</varname> must be a
        list of absolute directory paths separated by colons (or semi-colons
        on Windows).  If a list element starts
        with the special string <literal>$libdir</literal>, the
        compiled-in <productname>PostgreSQL</productname> package
        library directory is substituted for <literal>$libdir</literal>; this
        is where the modules provided by the standard
        <productname>PostgreSQL</productname> distribution are installed.
        (Use <literal>pg_config --pkglibdir</literal> to find out the name of
        this directory.) For example:
<programlisting>
dynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'
</programlisting>
        or, in a Windows environment:
<programlisting>
dynamic_library_path = 'C:\tools\postgresql;H:\my_project\lib;$libdir'
</programlisting>
       </para>

       <para>
        The default value for this parameter is
        <literal>'$libdir'</literal>. If the value is set to an empty
        string, the automatic path search is turned off.
       </para>

       <para>
        This parameter can be changed at run time by superusers, but a
        setting done that way will only persist until the end of the
        client connection, so this method should be reserved for
        development purposes. The recommended way to set this parameter
        is in the <filename>postgresql.conf</filename> configuration
        file.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-gin-fuzzy-search-limit" xreflabel="gin_fuzzy_search_limit">
      <term><varname>gin_fuzzy_search_limit</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>gin_fuzzy_search_limit</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Soft upper limit of the size of the set returned by gin index scans. For more
        information see <xref linkend="gin-tips"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-local-preload-libraries" xreflabel="local_preload_libraries">
      <term><varname>local_preload_libraries</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>local_preload_libraries</varname> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><filename>$libdir/plugins</filename></primary>
      </indexterm>
      <listitem>
       <para>
        This variable specifies one or more shared libraries that are
        to be preloaded at connection start.  If more than one library
        is to be loaded, separate their names with commas.  All library
        names are converted to lower case unless double-quoted.
        This parameter cannot be changed after the start of a particular
        session.
       </para>

       <para>
        Because this is not a superuser-only option, the libraries
        that can be loaded are restricted to those appearing in the
        <filename>plugins</filename> subdirectory of the installation's
        standard library directory.  (It is the database administrator's
        responsibility to ensure that only <quote>safe</quote> libraries
        are installed there.)  Entries in <varname>local_preload_libraries</varname>
        can specify this directory explicitly, for example
        <literal>$libdir/plugins/mylib</literal>, or just specify
        the library name &mdash; <literal>mylib</literal> would have
        the same effect as <literal>$libdir/plugins/mylib</literal>.
       </para>

       <para>
        Unlike <varname>local_preload_libraries</varname>, there is no
        performance advantage to loading a library at session
        start rather than when it is first used.  Rather, the intent of
        this feature is to allow debugging or performance-measurement
        libraries to be loaded into specific sessions without an explicit
        <command>LOAD</command> command being given.  For example, debugging could
        be enabled for all sessions under a given user name by setting
        this parameter with <command>ALTER USER SET</command>.
       </para>

       <para>
        If a specified library is not found,
        the connection attempt will fail.
       </para>

       <para>
        Every  PostgreSQL-supported library has a <quote>magic
        block</quote> that is checked to guarantee compatibility.  
        For this reason, non-PostgreSQL libraries cannot be
        loaded in this way.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-locks">
    <title>Lock Management</title>

     <variablelist>

     <varlistentry id="guc-deadlock-timeout" xreflabel="deadlock_timeout">
      <indexterm>
       <primary>deadlock</primary>
       <secondary>timeout during</secondary>
      </indexterm>
      <indexterm>
       <primary>timeout</primary>
       <secondary>deadlock</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>deadlock_timeout</varname> configuration parameter</primary>
      </indexterm>

      <term><varname>deadlock_timeout</varname> (<type>integer</type>)</term>
      <listitem>
       <para>
        This is the amount of time, in milliseconds, to wait on a lock
        before checking to see if there is a deadlock condition. The
        check for deadlock is relatively expensive, so the server doesn't run
        it every time it waits for a lock. We optimistically assume
        that deadlocks are not common in production applications and
        just wait on the lock for a while before checking for a
        deadlock. Increasing this value reduces the amount of time
        wasted in needless deadlock checks, but slows down reporting of
        real deadlock errors. The default is one second (<literal>1s</literal>),
        which is probably about the smallest value you would want in
        practice. On a heavily loaded server you might want to raise it.
        Ideally the setting should exceed your typical transaction time,
        so as to improve the odds that a lock will be released before
        the waiter decides to check for deadlock.
       </para>

       <para>
        When <xref linkend="guc-log-lock-waits"/> is set,
        this parameter also determines the length of time to wait before
        a log message is issued about the lock wait.  If you are trying
        to investigate locking delays you might want to set a shorter than
        normal <varname>deadlock_timeout</varname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-locks-per-transaction" xreflabel="max_locks_per_transaction">
      <term><varname>max_locks_per_transaction</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>max_locks_per_transaction</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        The shared lock table tracks locks on
        <varname>max_locks_per_transaction</varname> * (<xref
        linkend="guc-max-connections"/> + <xref
        linkend="guc-max-prepared-transactions"/>) objects (e.g.,  tables);
        hence, no more than this many distinct objects can be locked at
        any one time.  This parameter controls the average number of object
        locks allocated for each transaction;  individual transactions
        can lock more objects as long as the locks of all transactions
        fit in the lock table.  This is <emphasis>not</emphasis> the number of
        rows that can be locked; that value is unlimited.  The default,
        64, has historically proven sufficient, but you might need to
        raise this value if you have clients that touch many different
        tables in a single transaction. This parameter can only be set at
        server start.
       </para>

       <para>
        Increasing this parameter might cause <productname>PostgreSQL</productname>
        to request more <systemitem class="osname">System V</systemitem> shared
        memory than your operating system's default configuration
        allows. See <xref linkend="sysvipc"/> for information on how to
        adjust those parameters, if necessary.
       </para>

       <para>
        When running a standby server, you must set this parameter to the
        same or higher value than on the master server. Otherwise, queries
        will not be allowed in the standby server.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
   </sect1>

   <sect1 id="runtime-config-compatible">
    <title>Version and Platform Compatibility</title>

    <sect2 id="runtime-config-compatible-version">
     <title>Previous PostgreSQL Versions</title>

     <variablelist>

     <varlistentry id="guc-array-nulls" xreflabel="array_nulls">
      <term><varname>array_nulls</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>array_nulls</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        This controls whether the array input parser recognizes
        unquoted <literal>NULL</literal> as specifying a null array element.
        By default, this is <literal>on</literal>, allowing array values containing
        null values to be entered.  However, <productname>PostgreSQL</productname> versions
        before 8.2 did not support null values in arrays, and therefore would
        treat <literal>NULL</literal> as specifying a normal array element with
        the string value <quote>NULL</quote>.  For backwards compatibility with
        applications that require the old behavior, this variable can be
        turned <literal>off</literal>.
       </para>

       <para>
        Note that it is possible to create array values containing null values
        even when this variable is <literal>off</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-backslash-quote" xreflabel="backslash_quote">
      <term><varname>backslash_quote</varname> (<type>enum</type>)</term>
      <indexterm><primary>strings</primary><secondary>backslash quotes</secondary></indexterm>
      <indexterm>
       <primary><varname>backslash_quote</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        This controls whether a quote mark can be represented by
        <literal>\'</literal> in a string literal.  The preferred, SQL-standard way
        to represent a quote mark is by doubling it (<literal>''</literal>) but
        <productname>PostgreSQL</productname> has historically also accepted
        <literal>\'</literal>. However, use of <literal>\'</literal> creates security risks
        because in some client character set encodings, there are multibyte
        characters in which the last byte is numerically equivalent to ASCII
        <literal>\</literal>.  If client-side code does escaping incorrectly then a
        SQL-injection attack is possible.  This risk can be prevented by
        making the server reject queries in which a quote mark appears to be
        escaped by a backslash.
        The allowed values of <varname>backslash_quote</varname> are
        <literal>on</literal> (allow <literal>\'</literal> always),
        <literal>off</literal> (reject always), and
        <literal>safe_encoding</literal> (allow only if client encoding does not
        allow ASCII <literal>\</literal> within a multibyte character).
        <literal>safe_encoding</literal> is the default setting.
       </para>

       <para>
        Note that in a standard-conforming string literal, <literal>\</literal> just
        means <literal>\</literal> anyway.  This parameter only affects the handling of
        non-standard-conforming literals, including
        escape string syntax (<literal>E'...'</literal>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-with-oids" xreflabel="default_with_oids">
      <term><varname>default_with_oids</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>default_with_oids</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        This controls whether <command>CREATE TABLE</command> and
        <command>CREATE TABLE AS</command> include an OID column in
        newly-created tables, if neither <literal>WITH OIDS</literal>
        nor <literal>WITHOUT OIDS</literal> is specified. It also
        determines whether OIDs will be included in tables created by
        <command>SELECT INTO</command>. The parameter is <literal>off</literal>
        by default; in <productname>PostgreSQL</productname> 8.0 and earlier, it
        was on by default.
       </para>

       <para>
        The use of OIDs in user tables is considered deprecated, so
        most installations should leave this variable disabled.
        Applications that require OIDs for a particular table should
        specify <literal>WITH OIDS</literal> when creating the
        table. This variable can be enabled for compatibility with old
        applications that do not follow this behavior.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-escape-string-warning" xreflabel="escape_string_warning">
      <term><varname>escape_string_warning</varname> (<type>boolean</type>)</term>
      <indexterm><primary>strings</primary><secondary>escape warning</secondary></indexterm>
      <indexterm>
       <primary><varname>escape_string_warning</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        When on, a warning is issued if a backslash (<literal>\</literal>)
        appears in an ordinary string literal (<literal>'...'</literal>
        syntax) and <varname>standard_conforming_strings</varname> is off.
        The default is <literal>on</literal>.
       </para>
       <para>
        Applications that wish to use backslash as escape should be
        modified to use escape string syntax (<literal>E'...'</literal>),
        because the default behavior of ordinary strings will change
        in a future release for SQL compatibility.  This variable can
        be enabled to help detect applications that will break.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lo-compat-privileges" xreflabel="lo_compat_privileges">
      <term><varname>lo_compat_privileges</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>lo_compat_privileges</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        In <productname>PostgreSQL</productname> releases prior to 9.0, large objects
        did not have access privileges and were, in effect, readable and
        writable by all users.  Setting this variable to <literal>on</literal>
        disables the new privilege checks, for compatibility with prior
        releases.  The default is <literal>off</literal>.
       </para>
       <para>
        Setting this variable does not disable all security checks related to
        large objects &mdash; only those for which the default behavior has
        changed in <productname>PostgreSQL</productname> 9.0.
        For example, <literal>lo_import()</literal> and
        <literal>lo_export()</literal> need superuser privileges independent
        of this setting.
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-quote-all-identifiers" xreflabel="quote-all-identifiers">
      <term><varname>quote_all_identifiers</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>quote_all_identifiers</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        When the database generates SQL, force all identifiers to be quoted,
        even if they are not (currently) keywords.  This will affect the
        output of <command>EXPLAIN</command> as well as the results of functions
        like <function>pg_get_viewdef</function>.  See also the
        <option>--quote-all-identifiers</option> option of
        <xref linkend="app-pgdump"/> and <xref linkend="app-pg-dumpall"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-sql-inheritance" xreflabel="sql_inheritance">
      <term><varname>sql_inheritance</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>sql_inheritance</varname> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>inheritance</primary></indexterm>
      <listitem>
       <para>
        This controls the inheritance semantics.  If turned <literal>off</literal>,
        subtables are not accessed by various commands by default; basically
        an implied <literal>ONLY</literal> key word.  This was added for
        compatibility with releases prior to 7.1.  See
        <xref linkend="ddl-inherit"/> for more information.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-standard-conforming-strings" xreflabel="standard_conforming_strings">
      <term><varname>standard_conforming_strings</varname> (<type>boolean</type>)</term>
      <indexterm><primary>strings</primary><secondary>standard conforming</secondary></indexterm>
      <indexterm>
       <primary><varname>standard_conforming_strings</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        This controls whether ordinary string literals
        (<literal>'...'</literal>) treat backslashes literally, as specified in
        the SQL standard.
        Beginning in <productname>PostgreSQL</productname> 9.1, the default is
        <literal>on</literal> (prior releases defaulted to <literal>off</literal>).
        Applications can check this
        parameter to determine how string literals will be processed.
        The presence of this parameter can also be taken as an indication
        that the escape string syntax (<literal>E'...'</literal>) is supported.
        Escape string syntax (<xref linkend="sql-syntax-strings-escape"/>)
        should be used if an application desires
        backslashes to be treated as escape characters.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-synchronize-seqscans" xreflabel="synchronize_seqscans">
      <term><varname>synchronize_seqscans</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>synchronize_seqscans</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        This allows sequential scans of large tables to synchronize with each
        other, so that concurrent scans read the same block at about the
        same time and hence share the I/O workload.  When this is enabled,
        a scan might start in the middle of the table and then <quote>wrap
        around</quote> the end to cover all rows, so as to synchronize with the
        activity of scans already in progress.  This can result in
        unpredictable changes in the row ordering returned by queries that
        have no <literal>ORDER BY</literal> clause.  Setting this parameter to
        <literal>off</literal> ensures the pre-8.3 behavior in which a sequential
        scan always starts from the beginning of the table.  The default
        is <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-compatible-clients">
     <title>Platform and Client Compatibility</title>
     <variablelist>

     <varlistentry id="guc-transform-null-equals" xreflabel="transform_null_equals">
      <term><varname>transform_null_equals</varname> (<type>boolean</type>)</term>
      <indexterm><primary>IS NULL</primary></indexterm>
      <indexterm>
       <primary><varname>transform_null_equals</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        When on, expressions of the form <literal><replaceable>expr</replaceable> =
        NULL</literal> (or <literal>NULL =
        <replaceable>expr</replaceable></literal>) are treated as
        <literal><replaceable>expr</replaceable> IS NULL</literal>, that is, they
        return true if <replaceable>expr</replaceable> evaluates to the null value,
        and false otherwise. The correct SQL-spec-compliant behavior of
        <literal><replaceable>expr</replaceable> = NULL</literal> is to always
        return null (unknown). Therefore this parameter defaults to
        <literal>off</literal>.
       </para>

       <para>
        However, filtered forms in <productname>Microsoft
        Access</productname> generate queries that appear to use
        <literal><replaceable>expr</replaceable> = NULL</literal> to test for
        null values, so if you use that interface to access the database you
        might want to turn this option on.  Since expressions of the
        form <literal><replaceable>expr</replaceable> = NULL</literal> always
        return the null value (using the SQL standard interpretation), they are not
        very useful and do not appear often in normal applications so
        this option does little harm in practice.  But new users are
        frequently confused about the semantics of expressions
        involving null values, so this option is off by default.
       </para>

       <para>
        Note that this option only affects the exact form <literal>= NULL</literal>,
        not other comparison operators or other expressions
        that are computationally equivalent to some expression
        involving the equals operator (such as <literal>IN</literal>).
        Thus, this option is not a general fix for bad programming.
       </para>

       <para>
        Refer to <xref linkend="functions-comparison"/> for related information.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-error-handling">
    <title>Error Handling</title>

    <variablelist>

     <varlistentry id="guc-exit-on-error" xreflabel="exit_on_error">
      <term><varname>exit_on_error</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>exit_on_error</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        If true, any error will terminate the current session.  By default,
        this is set to false, so that only FATAL errors will terminate the
        session.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-restart-after-crash" xreflabel="restart_after_crash">
      <term><varname>restart_after_crash</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>restart_after_crash</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        When set to true, which is the default, <productname>PostgreSQL</productname>
        will automatically reinitialize after a backend crash.  Leaving this
        value set to true is normally the best way to maximize the availability
        of the database.  However, in some circumstances, such as when
        <productname>PostgreSQL</productname> is being invoked by clusterware, it may be
        useful to disable this behavior, so that the clusterware can gain
        control and take any actions it deems appropriate.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

   </sect1>

   <sect1 id="runtime-config-preset">
    <title>Preset Options</title>

    <para>
     The following <quote>parameters</quote> are read-only, and are determined
     when <productname>PostgreSQL</productname> is compiled or when it is
     installed. As such, they have been excluded from the sample
     <filename>postgresql.conf</filename> file.  These options report
     various aspects of <productname>PostgreSQL</productname> behavior
     that might be of interest to certain applications, particularly
     administrative front-ends.
    </para>

    <variablelist>

     <varlistentry id="guc-block-size" xreflabel="block_size">
      <term><varname>block_size</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>block_size</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Reports the size of a disk block.  It is determined by the value
        of <literal>BLCKSZ</literal> when building the server. The default
        value is 8192 bytes.  The meaning of some configuration
        variables (such as <xref linkend="guc-shared-buffers"/>) is
        influenced by <varname>block_size</varname>. See <xref
        linkend="runtime-config-resource"/> for information.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-integer-datetimes" xreflabel="integer_datetimes">
      <term><varname>integer_datetimes</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>integer_datetimes</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Reports whether <productname>PostgreSQL</productname> was built with
        support for 64-bit-integer dates and times.  This can be
        disabled by configuring with <literal>--disable-integer-datetimes</literal>
        when building <productname>PostgreSQL</productname>.  The default value is
        <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-collate" xreflabel="lc_collate">
      <term><varname>lc_collate</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>lc_collate</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Reports the locale in which sorting of textual data is done.
        See <xref linkend="locale"/> for more information.
        This value is determined when a database is created.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-ctype" xreflabel="lc_ctype">
      <term><varname>lc_ctype</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>lc_ctype</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Reports the locale that determines character classifications.
        See <xref linkend="locale"/> for more information.
        This value is determined when a database is created.
        Ordinarily this will be the same as <varname>lc_collate</varname>,
        but for special applications it might be set differently.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-function-args" xreflabel="max_function_args">
      <term><varname>max_function_args</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>max_function_args</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Reports the maximum number of function arguments. It is determined by
        the value of <literal>FUNC_MAX_ARGS</literal> when building the server. The
        default value is 100 arguments.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-identifier-length" xreflabel="max_identifier_length">
      <term><varname>max_identifier_length</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>max_identifier_length</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Reports the maximum identifier length. It is determined as one
        less than the value of <literal>NAMEDATALEN</literal> when building
        the server. The default value of <literal>NAMEDATALEN</literal> is
        64; therefore the default
        <varname>max_identifier_length</varname> is 63 bytes, which
        can be less than 63 characters when using multibyte encodings.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-index-keys" xreflabel="max_index_keys">
      <term><varname>max_index_keys</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>max_index_keys</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Reports the maximum number of index keys. It is determined by
        the value of <literal>INDEX_MAX_KEYS</literal> when building the server. The
        default value is 32 keys.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-segment-size" xreflabel="segment_size">
      <term><varname>segment_size</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>segment_size</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Reports the number of blocks (pages) that can be stored within a file
        segment.  It is determined by the value of <literal>RELSEG_SIZE</literal>
        when building the server.  The maximum size of a segment file in bytes
        is equal to <varname>segment_size</varname> multiplied by
        <varname>block_size</varname>; by default this is 1GB.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-server-encoding" xreflabel="server_encoding">
      <term><varname>server_encoding</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>server_encoding</varname> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>character set</primary></indexterm>
      <listitem>
       <para>
        Reports the database encoding (character set).
        It is determined when the database is created.  Ordinarily,
        clients need only be concerned with the value of <xref
        linkend="guc-client-encoding"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-server-version" xreflabel="server_version">
      <term><varname>server_version</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>server_version</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Reports the version number of the server. It is determined by the
        value of <literal>PG_VERSION</literal> when building the server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-server-version-num" xreflabel="server_version_num">
      <term><varname>server_version_num</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>server_version_num</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Reports the version number of the server as an integer. It is determined
        by the value of <literal>PG_VERSION_NUM</literal> when building the server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-block-size" xreflabel="wal_block_size">
      <term><varname>wal_block_size</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>wal_block_size</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Reports the size of a WAL disk block.  It is determined by the value
        of <literal>XLOG_BLCKSZ</literal> when building the server. The default value
        is 8192 bytes.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-segment-size" xreflabel="wal_segment_size">
      <term><varname>wal_segment_size</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>wal_segment_size</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Reports the number of blocks (pages) in a WAL segment file.
        The total size of a WAL segment file in bytes is equal to
        <varname>wal_segment_size</varname> multiplied by <varname>wal_block_size</varname>;
        by default this is 16MB.  See <xref linkend="wal-configuration"/> for
        more information.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect1>

   <sect1 id="runtime-config-custom">
    <title>Customized Options</title>

    <para>
     This feature was designed to allow parameters not normally known to
     <productname>PostgreSQL</productname> to be added by add-on modules
     (such as procedural languages).  This allows add-on modules to be
     configured in the standard ways.
    </para>

    <variablelist>

     <varlistentry id="guc-custom-variable-classes" xreflabel="custom_variable_classes">
      <term><varname>custom_variable_classes</varname> (<type>string</type>)</term>
      <indexterm>
       <primary><varname>custom_variable_classes</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        This variable specifies one or several class names to be used for
        custom variables, in the form of a comma-separated list. A custom
        variable is a variable not normally known
        to <productname>PostgreSQL</productname> proper but used by some
        add-on module.  Such variables must have names consisting of a class
        name, a dot, and a variable name.  <varname>custom_variable_classes</varname>
        specifies all the class names in use in a particular installation.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>

      </listitem>
     </varlistentry>
    </variablelist>

    <para>
     The difficulty with setting custom variables in
     <filename>postgresql.conf</filename> is that the file must be read before add-on
     modules have been loaded, and so custom variables would ordinarily be
     rejected as unknown.  When <varname>custom_variable_classes</varname> is set,
     the server will accept definitions of arbitrary variables within each
     specified class.  These variables will be treated as placeholders and
     will have no function until the module that defines them is loaded. When a
     module for a specific class is loaded, it will add the proper variable
     definitions for its class name, convert any placeholder
     values according to those definitions, and issue warnings for any
     unrecognized placeholders of its class that remain.
    </para>

    <para>
     Here is an example of what <filename>postgresql.conf</filename> might contain
     when using custom variables:

<programlisting>
custom_variable_classes = 'plpgsql,plperl'
plpgsql.variable_conflict = use_variable
plperl.use_strict = true
plruby.use_strict = true        # generates error: unknown class name
</programlisting>
    </para>
   </sect1>

   <sect1 id="runtime-config-developer">
    <title>Developer Options</title>

    <para>
     The following parameters are intended for work on the
     <productname>PostgreSQL</productname> source code, and in some cases
     to assist with recovery of severely damaged databases.  There
     should be no reason to use them on a production database.
     As such, they have been excluded from the sample
     <filename>postgresql.conf</filename> file.  Note that many of these
     parameters require special source compilation flags to work at all.
    </para>

    <variablelist>
     <varlistentry id="guc-allow-system-table-mods" xreflabel="allow_system_table_mods">
      <term><varname>allow_system_table_mods</varname> (<type>boolean</type>)</term>
      <indexterm>
        <primary><varname>allow_system_table_mods</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Allows modification of the structure of system tables.
        This is used by <command>initdb</command>.
        This parameter can only be set at server start.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-assertions" xreflabel="debug_assertions">
      <term><varname>debug_assertions</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>debug_assertions</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Turns on various assertion checks. This is a debugging aid. If
        you are experiencing strange problems or crashes you might want
        to turn this on, as it might expose programming mistakes. To use
        this parameter, the macro <symbol>USE_ASSERT_CHECKING</symbol>
        must be defined when <productname>PostgreSQL</productname> is
        built (accomplished by the <command>configure</command> option
        <option>--enable-cassert</option>). Note that
        <varname>debug_assertions</varname> defaults to <literal>on</literal>
        if <productname>PostgreSQL</productname> has been built with
        assertions enabled.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ignore-system-indexes" xreflabel="ignore_system_indexes">
      <term><varname>ignore_system_indexes</varname> (<type>boolean</type>)</term>
      <indexterm>
        <primary><varname>ignore_system_indexes</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Ignore system indexes when reading system tables (but still
        update the indexes when modifying the tables).  This is useful
        when recovering from damaged system indexes.
        This parameter cannot be changed after session start.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-post-auth-delay" xreflabel="post_auth_delay">
      <term><varname>post_auth_delay</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>post_auth_delay</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        If nonzero, a delay of this many seconds occurs when a new
        server process is started, after it conducts the
        authentication procedure.  This is intended to give developers an
        opportunity to attach to the server process with a debugger.
        This parameter cannot be changed after session start.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-pre-auth-delay" xreflabel="pre_auth_delay">
      <term><varname>pre_auth_delay</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>pre_auth_delay</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        If nonzero, a delay of this many seconds occurs just after a
        new server process is forked, before it conducts the
        authentication procedure.  This is intended to give developers an
        opportunity to attach to the server process with a debugger to
        trace down misbehavior in authentication.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-notify" xreflabel="trace_notify">
      <term><varname>trace_notify</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>trace_notify</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Generates a great amount of debugging output for the
        <command>LISTEN</command> and <command>NOTIFY</command>
        commands.  <xref linkend="guc-client-min-messages"/> or
        <xref linkend="guc-log-min-messages"/> must be
        <literal>DEBUG1</literal> or lower to send this output to the
        client or server logs, respectively.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-recovery-messages" xreflabel="trace_recovery_messages">
      <term><varname>trace_recovery_messages</varname> (<type>enum</type>)</term>
      <indexterm>
       <primary><varname>trace_recovery_messages</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Enables logging of recovery-related debugging output that otherwise
        would not be logged. This parameter allows the user to override the
        normal setting of <xref linkend="guc-log-min-messages"/>, but only for
        specific messages. This is intended for use in debugging Hot Standby.
        Valid values are <literal>DEBUG5</literal>, <literal>DEBUG4</literal>,
        <literal>DEBUG3</literal>, <literal>DEBUG2</literal>, <literal>DEBUG1</literal>, and
        <literal>LOG</literal>.  The default, <literal>LOG</literal>, does not affect
        logging decisions at all.  The other values cause recovery-related
        debug messages of that priority or higher to be logged as though they
        had <literal>LOG</literal> priority; for common settings of
        <varname>log_min_messages</varname> this results in unconditionally sending
        them to the server log.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-sort" xreflabel="trace_sort">
      <term><varname>trace_sort</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>trace_sort</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        If on, emit information about resource usage during sort operations.
        This parameter is only available if the <symbol>TRACE_SORT</symbol> macro
        was defined when <productname>PostgreSQL</productname> was compiled.
        (However, <symbol>TRACE_SORT</symbol> is currently defined by default.)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>trace_locks</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>trace_locks</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        If on, emit information about lock usage.  Information dumped
        includes the type of lock operation, the type of lock and the unique
        identifier of the object being locked or unlocked.  Also included
        are bit masks for the lock types already granted on this object as
        well as for the lock types awaited on this object.  For each lock
        type a count of the number of granted locks and waiting locks is
        also dumped as well as the totals.  An example of the log file output
        is shown here:
<screen>
LOG:  LockAcquire: new: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  GrantLock: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(2) req(1,0,0,0,0,0,0)=1 grant(1,0,0,0,0,0,0)=1
      wait(0) type(AccessShareLock)
LOG:  UnGrantLock: updated: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  CleanUpLock: deleting: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(INVALID)
</screen>
        Details of the structure being dumped may be found in
        <filename>src/include/storage/lock.h</filename>.
       </para>
       <para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>trace_lwlocks</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>trace_lwlocks</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        If on, emit information about lightweight lock usage.  Lightweight
        locks are intended primarily to provide mutual exclusion of access
        to shared-memory data structures.
       </para>
       <para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>trace_userlocks</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>trace_userlocks</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        If on, emit information about user lock usage.  Output is the same
        as for <symbol>trace_locks</symbol>, only for user locks.
       </para>
       <para>
        User locks were removed as of PostgreSQL version 8.2.  This option
        currently has no effect.
       </para>
       <para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>trace_lock_oidmin</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>trace_lock_oidmin</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        If set, do not trace locks for tables below this OID. (use to avoid
        output on system tables)
       </para>
       <para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>trace_lock_table</varname> (<type>integer</type>)</term>
      <indexterm>
       <primary><varname>trace_lock_table</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Unconditionally trace locks on this table (OID).
       </para>
       <para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>debug_deadlocks</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>debug_deadlocks</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        If set, dumps information about all current locks when a
        deadlock timeout occurs.
       </para>
       <para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>log_btree_build_stats</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>log_btree_build_stats</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        If set, logs system resource usage statistics (memory and CPU) on
        various B-tree operations.
       </para>
       <para>
        This parameter is only available if the <symbol>BTREE_BUILD_STATS</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-debug" xreflabel="wal_debug">
      <term><varname>wal_debug</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>wal_debug</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        If on, emit WAL-related debugging output. This parameter is
        only available if the <symbol>WAL_DEBUG</symbol> macro was
        defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-zero-damaged-pages" xreflabel="zero_damaged_pages">
      <term><varname>zero_damaged_pages</varname> (<type>boolean</type>)</term>
      <indexterm>
       <primary><varname>zero_damaged_pages</varname> configuration parameter</primary>
      </indexterm>
      <listitem>
       <para>
        Detection of a damaged page header normally causes
        <productname>PostgreSQL</productname> to report an error, aborting the current
        command.  Setting <varname>zero_damaged_pages</varname> to on causes
        the system to instead report a warning, zero out the damaged page,
        and continue processing.  This behavior <emphasis>will destroy data</emphasis>,
        namely all the rows on the damaged page.  But it allows you to get
        past the error and retrieve rows from any undamaged pages that might
        be present in the table.  So it is useful for recovering data if
        corruption has occurred due to a hardware or software error.  You should
        generally not set this on until you have given up hope of recovering
        data from the damaged pages of a table.  The
        default setting is <literal>off</literal>, and it can only be changed
        by a superuser.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </sect1>
  <sect1 id="runtime-config-short">
   <title>Short Options</title>

   <para>
    For convenience there are also single letter command-line option
    switches available for some parameters.  They are described in
    <xref linkend="runtime-config-short-table"/>.  Some of these
    options exist for historical reasons, and their presence as a
    single-letter option does not necessarily indicate an endorsement
    to use the option heavily.
   </para>

    <table id="runtime-config-short-table">
     <title>Short option key</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Short option</entry>
        <entry>Equivalent</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><option>-A <replaceable>x</replaceable></option></entry>
        <entry><literal>debug_assertions = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-B <replaceable>x</replaceable></option></entry>
        <entry><literal>shared_buffers = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-d <replaceable>x</replaceable></option></entry>
        <entry><literal>log_min_messages = DEBUG<replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-e</option></entry>
        <entry><literal>datestyle = euro</literal></entry>
       </row>
       <row>
        <entry>
          <option>-fb</option>, <option>-fh</option>, <option>-fi</option>,
          <option>-fm</option>, <option>-fn</option>,
          <option>-fs</option>, <option>-ft</option>
         </entry>
         <entry>
          <literal>enable_bitmapscan = off</literal>,
          <literal>enable_hashjoin = off</literal>,
          <literal>enable_indexscan = off</literal>,
          <literal>enable_mergejoin = off</literal>,
          <literal>enable_nestloop = off</literal>,
          <literal>enable_seqscan = off</literal>,
          <literal>enable_tidscan = off</literal>
         </entry>
       </row>
       <row>
        <entry><option>-F</option></entry>
        <entry><literal>fsync = off</literal></entry>
       </row>
       <row>
        <entry><option>-h <replaceable>x</replaceable></option></entry>
        <entry><literal>listen_addresses = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-i</option></entry>
        <entry><literal>listen_addresses = '*'</literal></entry>
       </row>
       <row>
        <entry><option>-k <replaceable>x</replaceable></option></entry>
        <entry><literal>unix_socket_directory = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-l</option></entry>
        <entry><literal>ssl = on</literal></entry>
       </row>
       <row>
        <entry><option>-N <replaceable>x</replaceable></option></entry>
        <entry><literal>max_connections = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-O</option></entry>
        <entry><literal>allow_system_table_mods = on</literal></entry>
       </row>
       <row>
        <entry><option>-p <replaceable>x</replaceable></option></entry>
        <entry><literal>port = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-P</option></entry>
        <entry><literal>ignore_system_indexes = on</literal></entry>
       </row>
       <row>
        <entry><option>-s</option></entry>
        <entry><literal>log_statement_stats = on</literal></entry>
       </row>
       <row>
        <entry><option>-S <replaceable>x</replaceable></option></entry>
        <entry><literal>work_mem = <replaceable>x</replaceable></literal></entry>
       </row>
       <row>
        <entry><option>-tpa</option>, <option>-tpl</option>, <option>-te</option></entry>
        <entry><literal>log_parser_stats = on</literal>,
        <literal>log_planner_stats = on</literal>,
        <literal>log_executor_stats = on</literal></entry>
       </row>
       <row>
        <entry><option>-W <replaceable>x</replaceable></option></entry>
        <entry><literal>post_auth_delay = <replaceable>x</replaceable></literal></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  </sect1>
</chapter>
