<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

<chapter id="user-manag">
 <title>Privilegi e ruoli del database</title>

 <para>
<productname>PostgreSQL</productname> gestisce i permessi di accesso al database
usando il concetto di <firstterm>ruoli</firstterm>. Un ruolo può essere pensato sia come  
un utente del database, sia come gruppo di utenti del database, a seconda di come 
è impostato il ruolo. I ruoli possono possedere gli oggetti del database (per esempio,
tabelle) e possono assegnare privilegi su quegli oggetti ad altri ruoli per 
controllare chi ha accesso a quali oggetti. Inoltre, è possibile 
garantire l'<firstterm>appartenenza</firstterm> a un ruolo a un altro ruolo, permettendo in questo modo
al membro del ruolo di usare i privilegi assegnati a un altro ruolo.
 </para>

 <para>
Il concetto di ruoli comprende i concetti di <quote>utenti</quote> e 
<quote>gruppi</quote>. Nelle versioni di <productname>PostgreSQL</productname>
precedenti la 8.1, utenti e gruppi erano entità diverse, ma adesso ci sono solo 
ruoli. Qualsiasi ruolo può comportarsi come un utente, un gruppo, o entrambi.
 </para>

 <para>
Questo capitolo descrive come creare e gestire i ruoli e introduce
il sistema dei privilegi. Maggiori informazioni sui diversi tipi di 
oggetti del database e gli effetti dei privilegi possono essere trovati in
<xref linkend="ddl"/>.
 </para>

 <sect1 id="database-roles">
  <title>Ruoli del database Database Roles</title>

  <indexterm zone="database-roles">
   <primary>ruolo</primary>
  </indexterm>

  <indexterm zone="database-roles">
   <primary>utente</primary>
  </indexterm>

  <indexterm>
   <primary>CREATE ROLE</primary>
  </indexterm>

  <indexterm>
   <primary>DROP ROLE</primary>
  </indexterm>

  <para>
I ruoli del database sono completamente separati concettualmente dagli 
utenti del sistema operativo. In pratica potrebbe essere conveniente 
mantenere una corrispondenza, ma questo non è richiesto. I ruoli del database
sono globali attraverso l'installazione di un cluster di database (e non 
per singoli database). Per creare un ruolo usare il comando SQL  <xref
linkend="sql-createrole"/>:
<synopsis>
CREATE ROLE <replaceable>name</replaceable>;
</synopsis>
<replaceable>name</replaceable> segue le regole per gli identificatori SQL: 
sia non adornati senza caratteri speciali, oppore tra doppi apici.
(In pratica, di solito si vorrà aggiungere opzioni addizionali al comando, tipo 
<literal>LOgin</literal>. Maggiori dettagli appaiono sotto.
Per rimuovere un ruolo esistente, usare l'analogo
comando   <xref linkend="sql-droprole"/>:
<synopsis>
DROP ROLE <replaceable>name</replaceable>;
</synopsis>
  </para>

  <indexterm>
   <primary>createuser</primary>
  </indexterm>

  <indexterm>
   <primary>dropuser</primary>
  </indexterm>

  <para>
Per convenienza, i programmi <xref linkend="app-createuser"/> 
e <xref linkend="app-dropuser"/> sono fornite come wrapper 
per quei comandi SQL che possono essere lanciati dalla shell:
<synopsis>
createuser <replaceable>name</replaceable>
dropuser <replaceable>name</replaceable>
</synopsis>
  </para>

  <para>
Per determinare l'insieme di ruoli esistenti, esaminare il catalogo di sistema
<structname>pg_roles</structname>, per esempio
<synopsis>
SELECT rolname FROM pg_roles;
</synopsis>
Il meta comando <literal>\du</literal> del programma <xref linkend="app-psql"/>
è utile per elencare i ruoli esistenti.
  </para>

  <para>
Per fare il bootstrap di unsistema di database, un sistema appena installato  
contiene un ruolo predefinito. Questo ruolo è sempre un <quote>superuser</quote>,   
e in maniera predefinita (a meno che non sia stato cambiato con l'<command>initdb</command>)
avrà lo stesso nome dell'utente del sistema operativo che ha inizializzato il cluster di database.
Di norma, questo ruolo sarà chiamato <literal>postgres</literal>. 
Per creare altri ruoli si deve prima connettersi come questo ruolo iniziale.
  </para>

  <para>
Ogni connessione al server di database è fatta usando il nome di qualche ruolo particolare,
e questo ruolo determina i privilegi d'accesso iniziali per i comandi
emessi in quella connessione.
Il nome del ruolo da usare per un particolare connessione al database
è indicato dal client che inizia la richiesta di connessione nel modo specifico
dell'applicazione. Per esempio, 
il programma <command>psql</command> usa l'opzione a linea di comando
<option>-U</option> per indicare il ruolo con cui connettersi.
Molte applicazioni assumono il nome dell'utente corrente del sistema operativo
come predefinito (incluse <command>createuser</command> e <command>psql</command>).
Comunque spesso è conveniente mantenere una corrispondenza di nomi tra 
i ruoli e gli utenti del sistema operativo.
  </para>

  <para>
L'insieme dei ruoli del database coi quali un dato client può connettersi 
è determinato dall'impostazione dell'autenticazione del client, come spiegato in
<xref linkend="client-authentication"/>. (In più, un client non è 
limitato alla possibilità di connettersi come il ruolo corrispondente
al suo utente del sistema operativo, esattamente come il nome di login di una persona 
non deve corrispondere al suo nome reale). Dato che l'identità del ruolo
determina l'insieme di privilegi disponibili a un client connesso,
è importante configurare con cura i privilegi quando si mette su un ambiente multiutente.
  </para>
 </sect1>

 <sect1 id="role-attributes">
  <title>Attributi del ruolo</title>

   <para>
Un ruolo del database può avere un numero di attributi che definisce i suoi 
privilegi e interagisce con il sistema di sutenticazione del client.

    <variablelist>
     <varlistentry>
      <term>privilegio di login<indexterm><primary>privilegio di login</primary></indexterm></term>
      <listitem>
       <para>
Solo i ruoli che hanno l'attributo <literal>LOgin</literal> possono essere usati
come nome del ruolo iniziale di una connessione al database. Un ruolo con
l'attributo <literal>LOgin</literal> può essere considerato come un 
<quote>utente del database</quote>. Per creare un ruolo con i privilegi di login,
usare:
<programlisting>
CREATE ROLE <replaceable>name</replaceable> LOgin;
CREATE USER <replaceable>name</replaceable>;
</programlisting>
(<command>CREATE USER</command> è equivalente a <command>CREATE ROLE</command>
ad eccezione che <command>CREATE USER</command> assume <literal>LOgin</literal> come predefinito,
mentre <command>CREATE ROLE</command> no).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>superuser status<indexterm><primary>superuser</primary></indexterm></term>
      <listitem>
       <para>
Un superutente del database scavalca tutti i controlli di permesso. Questo è un privilegio pericoloso
e non dovrebbe essere usato imprudentemente; è meglio 
fare la maggior parte del lavoro con un ruolo che non è di superutente.
Per creare un nuovo superutente del database, usare <literal>CREATE ROLE
<replaceable>name</replaceable> SUPERUSER</literal>. Questo va fatto
usando un ruolo che è già di superutente.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
        <term>
            creazione del database
            <indexterm>
                <primary>database</primary>
                <secondary>privilegio di creazione</secondary>
            </indexterm>
        </term>
        <listitem>
       <para>
A un ruolo devono essere dati esplicitamente i permessi per creare database
(ad eccezione del superutente, dato che scavalca tutti i controlli di permessi).
Per creare tale ruolo, usare <literal>CREATE ROLE
<replaceable>name</replaceable> CREATEDB</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>creazione di ruolo<indexterm><primary>role</primary><secondary>privilege di creazione</secondary></indexterm></term>
      <listitem>
       <para>
A un ruolo deve essere dato esplicitamente il permesso di creare altri ruoli
(ad eccezione dei superutenti, dato che questi scavalcano tutti i controlli dei permessi).
Per creare tale ruolo,  usare <literal>CREATE ROLE
<replaceable>name</replaceable> CREATEROLE</literal>.
Un ruolo con privilegio <literal>CREATEROLE</literal> può modificare ed eliminare
altri ruoli, anche, così come garantire o revocare l'appartenenza ad essi.
Comunque, per creare, modificare, eliminare o cambiare l'appartenenza a
un ruolo di superutente, è richiesto lo status di superutente;
<literal>CREATEROLE</literal> è insufficiente a fare ciò.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>password<indexterm><primary>password</primary></indexterm></term>
      <listitem>
       <para>
Una password è significativa solo se il metodo di autenticazione del client
richiede che l'utente fornisca una password quando si connette
al database. I metodi di autenticazione <option>password</option> e
<option>md5</option> fanno uso delle password. Le password di database sono separate
dalle password del sistema operativo. Specificare una password durante la creazione di un ruolo con
<literal>CREATE ROLE <replaceable>name</replaceable> PASSWORD '<replaceable>string</replaceable>'</literal>.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

Gli attributi di un ruolo possono essere modificati dopo la creazione con
<command>ALTER ROLE</command>.<indexterm><primary>ALTER ROLE</primary></indexterm>
Si vedano le pagine di riferimento dei comandi <xref linkend="sql-createrole" />
e <xref linkend="sql-alterrole"/> per dettagli.
   </para>

  <tip>
   <para>
È buona prassi creare un ruolo che ha i privilegi <literal>CREATEDB</literal>
e <literal>CREATEROLE</literal>, ma che non è un superutente, e quindi usare questo ruolo 
per tutte le operazioni di gestione dei database e dei ruoli. Questo approccio
evita i pericoli di operare come un superutente per compiti che in realtà non lo 
necessitano.
   </para>
  </tip>

  <para>
Un ruolo può anche avere valori predefiniti per molte impostazioni di configurazione 
descritte in <xref
linkend="runtime-config"/>.  Per esempio, se per qualche ragione 
si vogliono disabilitare le scansioni di indice (consiglio: non è una buona idea) ogni volta che ci si connette,
è possibile usare:
<programlisting>
ALTER ROLE myname SET statement_timeout = '5min';
</programlisting>
Questo salverà le impostazioni (ma non le renderà effettive immediatamente). In
connessioni successive di questo ruolo apparirà come se 
<literal>SET statement_timeout = '5min'</literal> fosse stato eseguito 
appena prima che la sessione cominciasse.
È comunque possibile modificare questa impostazione durante la sessione; essa sarà solo la predefinita. 
Per rimuovere un'impostazione predefinita specifica di un ruolo, usare
<literal>ALTER ROLE <replaceable>rolename</replaceable> RESET <replaceable>varname</replaceable></literal>.
Notare che i valori predefiniti specifici di un ruolo attaccatti a ruoli senza il privilegio di 
<literal>LOgin</literal> sono abbastanza inutili, dato che non saranno mai invocati.
  </para>
 </sect1>

 <sect1 id="privileges">
  <title>Privilegi</title>

  <indexterm zone="privileges">
   <primary>privilegio</primary>
  </indexterm>

  <indexterm zone="privileges">
   <primary>proprietario</primary>
  </indexterm>

  <indexterm zone="privileges">
   <primary>GRANT</primary>
  </indexterm>

  <indexterm zone="privileges">
   <primary>REVOKE</primary>
  </indexterm>

  <para>
Quando un oggetto viene creato, gli viene assegnato un proprietario. Il proprietario
di solito è il ruolo che esegue l'istruzione di creazione.
Per la maggior parte degli oggetti, lo stato iniziale è che solo il proprietario
(o un superutente) può fare qualsiasi cosa con l'oggetto. Per permettere
ad altri ruoli di usarlo, devono essere garantiti dei <firstterm>privilegi</firstterm>.
Ci sono diversi tipi di privilegio: <literal>SELECT</literal>,
<literal>INSERT</literal>, <literal>UPDATE</literal>, <literal>DELETE</literal>,
<literal>TRUNCATE</literal>, <literal>REFERENCES</literal>, <literal>TRIGGER</literal>,
<literal>CREATE</literal>, <literal>CONNECT</literal>, <literal>TEMPORARY</literal>,
<literal>EXECUTE</literal>  <literal>USAGE</literal>.
Per maggiori informazioni sui diversi tipi di privilegi supportati da 
<productname>PostgreSQL</productname>, si veda 
la pagina di riferimento <xref linkend="sql-grant"/>.
  </para>

  <para>
Per assegnare privilegi, si usa il comando <command>GRANT</command>. 
Così, se <literal>joe</literal> è un ruolo esistente, e 
<literal>accounts</literal> è una tabella esistente, il privilegio di 
aggiornare la tabella può essere concesso con:
<programlisting>
GRANT UPDATE ON accounts TO joe;
</programlisting>
Il nome speciale <literal>PUBLIC</literal> può essere usato 
per concedere un privilegio ad ogni ruolo del sistema. Scrivere 
<literal>ALL</literal> al posto di uno specifico privilegio indica che tutti
i privilegi applicabili all'oggetto saranno concessi.
  </para>

  <para>
Per revocare un privilegio, usare il comando
chiamato appropriatamente <xref linkend="sql-revoke"/>:
<programlisting>
REVOKE ALL ON accounts FROM PUBLIC;
</programlisting>
  </para>

  <para>
I privilegi speciali del proprietario di un oggetto (per es., il diritto a modificare
o distruggere l'oggetto) sono sempre impliciti dell'esserne il proprietario,
e non possono essere concessi o tolti. Ma il proprietario può scegliere 
di revocare i suoi privilegi normali, per esempio per rendere una tabella
a sola lettura per sè stesso oltre che per gli altri.
  </para>

  <para>
Un oggetto può essere assegnato ad un nuovo proprietario con un comando <command>ALTER</command>
del tipo appropriato per l'oggetto. I superutenti possono sempre farlo;
i ruoli ordinari possono farlo solo se sono sia l'attuale proprietario
dell'oggetto (o un membro del ruolo proprietario) che un membro del nuovo 
ruolo proprietario.
  </para>
 </sect1>

 <sect1 id="role-membership">
  <title>Appartenenza a ruolo</title>

  <indexterm zone="role-membership">
   <primary>ruolo</primary><secondary>appartenenza</secondary>
  </indexterm>

  <para>
Di frequente è utile raggruppare utenti per facilitare 
la gestione dei privilegi: in questo modo, i privilegi possono essere garantiti a, o
revocati da, un intero gruppo. In <productname>PostgreSQL</productname>
questo viene fatto creando un ruolo che rappresenta il gruppo, e quindi 
concedendo l'<firstterm>appertenza</firstterm> nel ruolo gruppo a ruoli utente individuali 
  </para>

  <para>
Per creare un ruolo di gruppo, prima creare il ruolo:
<synopsis>
CREATE ROLE <replaceable>name</replaceable>;
</synopsis>
Tipicamente un ruolo usato come gruppo non avrebbe l'attributo <literal>LOgin</literal>,
ma si può impostarlo se lo si desidera.
  </para>

  <para>
Una volta che il ruolo gruppo esiste, è possibile aggiungere e rimuovere membri usando
i comandi <xref linkend="sql-grant"/> e  <xref linkend="sql-revoke"/>:
<synopsis>
GRANT <replaceable>group_role</replaceable> TO <replaceable>role1</replaceable>, ... ;
REVOKE <replaceable>group_role</replaceable> FROM <replaceable>role1</replaceable>, ... ;
</synopsis>
È anche possibile garantire l'appartenenza ad altri ruoli gruppo, (dato che non c'è 
nessuna distinzione tra ruoli gruppo e ruoli non-gruppo). Il database
non ti lascierà impostare loop di appartenenza circolari. Inoltre, 
non è permesso garantire appartenza in un ruolo a
<literal>PUBLIC</literal>.
  </para>

  <para>
I membri di un ruolo gruppo possono usare i privilegi del ruolo in due modi.
Primo, ogni membro di un gruppo può esplicitamente fare 
<xref linkend="sql-set-role"/> per <quote>diventare</quote>
temporaneamente il ruolo gruppo. In questo modo, la sessione del database ha accesso
ai privilegi del ruolo gruppo piuttosto che 
dell'originale ruolo login, e qualsiasi oggetto di database creato è considerato
proprietà del ruolo gruppo e non del ruolo login. Secondo, i ruoli membri 
che hanno l'attributo <literal>INHERIT</literal> automaticamente ereditano i privilegi 
dei ruoli di cui sono membri, inclusi i loro attributi 
<literal>INHERIT</literal>. Come esempio, supporre di aver fatto:
<programlisting>
CREATE ROLE joe LOgin INHERIT;
CREATE ROLE admin NOINHERIT;
CREATE ROLE wheel NOINHERIT;
GRANT admin TO joe;
GRANT wheel TO admin;
</programlisting>
Immediatamente dopo essersi connessi con ruolo <literal>joe</literal>, una sessione di database
userà i privilegi concessi a <literal>joe</literal>
più qualsiasi privilegio concesso a <literal>admin</literal>, dato che <literal>joe</literal>
<quote>eredita</quote> i privilegi di  <literal>admin</literal>. In ogni caso, i privilegi 
garantiti a <literal>wheel</literal> non sono disponibili, perchè anche se 
<literal>joe</literal> è indirettamente un membro di <literal>wheel</literal>, l'appartenenza
viene specificata via <literal>admin</literal>, che l'attributo <literal>NOINHERIT</literal>. 
Dopo:
<programlisting>
SET ROLE admin;
</programlisting>
la sessione userebbe solo quei privilegi concessi a
<literal>admin</literal>, e non quelli concessi a <literal>joe</literal>. Dopo:
<programlisting>
SET ROLE wheel;
</programlisting>
la sessione userebbe solo i privilegi concessi a
<literal>wheel</literal>, e non quelli garantiti a <literal>joe</literal>
o a <literal>admin</literal>.  Lo stato originale dei privilegi può essere ripristinato 
con uno tra:
<programlisting>
SET ROLE joe;
SET ROLE NONE;
RESET ROLE;
</programlisting>
  </para>

  <note>
   <para>
Il comando <command>SET ROLE</command> permette sempre di selezionare qualsiasi 
ruolo di cui il ruolo login originale è direttamente o indirettamente membro.
Così, nell'esempio sopra, non è necessario diventare 
<literal>admin</literal> prima di diventare <literal>wheel</literal>.
   </para>
  </note>

  <note>
   <para>
Nello standard SQL, c'è una chiara distinzione tra utenti e ruoli, 
e gli utenti non ereditano automaticamente privilegi mentre i ruoli si.
Questo
comportamento può essere ottenuto in <productname>PostgreSQL</productname> fornendo ai ruoli 
usati come ruoli SQL l'attributo <literal>INHERIT</literal>, e
fornendo ai ruoli usati come utenti SQL l'attributo <literal>NOINHERIT</literal>.
    However, <productname>PostgreSQL</productname> defaults to giving all roles
    the <literal>INHERIT</literal> attribute, for backwards compatibility with pre-8.1
    releases in which users always had use of permissions granted to groups
    they were members of.
   </para>
  </note>

  <para>
Gli attributi del ruolo <literal>LOgin</literal>, <literal>SUPERUSER</literal>,
<literal>CREATEDB</literal> e <literal>CREATEROLE</literal> possono essere pensati come
privilegi speciali, ma non sono mai ereditati come invece lo sono i  privilegi ordinari
sugli oggetti del database.
Si deve effettivamente eseguire un <command>SET ROLE</command> specificando 
un ruolo che ha uno di quegli attributi per 'usare l'attributo.
Continuando con l'esempio sopra, si potrebbe scegliere di
grantire <literal>CREATEDB</literal> e <literal>CREATEROLE</literal> al ruolo 
<literal>admin</literal>.
Quindi una sessione che si connette come ruolo <literal>joe</literal>
non avrebbe questi privilegi immediatamente, solo dopo aver fatto 
<command>SET ROLE admin</command>.
  </para>

  <para>
Per distruggere un ruolo gruppo, usare <xref
linkend="sql-droprole"/>:
<synopsis>
DROP ROLE <replaceable>name</replaceable>;
</synopsis>
Le appartenenze al ruolo gruppo sono automaticamente revocate (ma altrimenti i ruoli membro 
non sono colpiti). Notare comunque che gli oggetti  
posseduti dal ruolo gruppo devono essere prima eliminati o riassignati ad altri
proprietari; e i permessi garantiti al ruolo gruppo devono essere revocati.
  </para>
 </sect1>

 <sect1 id="perm-functions">
  <title>Sicurezza di funzioni e trigger</title>

  <para>
Funzioni e trigger permettono agli utenti di inserire codice nel server backend
che altri utenti potrebbero eseguire non intenzionalmente. Da adesso, entrambi i meccanismi 
permettono agli utenti di <quote>Trojan horse</quote> altri 
con relativa facilità. La sola protezione reale è un rigoroso controllo
su chi può definire le funzioni.
  </para>

  <para>
Le funzioni vengono eseguite all'interno del processo server backend
con permessi del sistema operativo del demone del server database.
Se il linguaggio di programmazione usato per la funzione permette
accessi incontrollati alla memoria, è possibile 
cambiare le strutture dati interne del server.
Per questo, come molte altre cose, tali funzioni possono eludere qualsiasi 
sistema di controllo degli accessi. Linguaggi funzionali che permettono tale accesso
sono cosiderati <quote>untrusted</quote>, e 
<productname>PostgreSQL</productname> permette solo ai superutenti di 
creare funzioni scritte in quei linguaggi.
  </para>
 </sect1>

</chapter>
