<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

<chapter id="backup">
 <title>Backup e ripristino</title>

 <indexterm zone="backup"><primary>backup</primary></indexterm>

 <para>
Come ogni cosa che contiene dati preziosi, 
si dovrebbero fare regolarmente dei backup dei database 
<productname>PostgreSQL</productname>. 
Mentre la procedura è essenzialmente semplice, è importante avere una comprensione
chiara delle tecniche di fondo e delle assunzioni.
 </para>

 <para>
Fondamentalmente ci sono tre differenti approcci per fare il back up di  
dati <productname>PostgreSQL</productname>:
  <itemizedlist>
   <listitem><para><acronym>SQL</acronym> dump</para></listitem>
   <listitem><para>Backup a livello di file sustem</para></listitem>
   <listitem><para>Archiviazione continua</para></listitem>
  </itemizedlist>
Ognuno ha i propri punti di forza e le proprie debolezze; ognuno è discusso a turno
nelle sezioni seguenti.
 </para>

 <sect1 id="backup-dump">
  <title><acronym>SQL</acronym> Dump</title>

  <para>
L'idea che sta dietro a questo metodo di dump è di generare un file di testo con
comandi SQL che, quando ritrasmesso al server, ricreerà il database
nello stesso stato in cui si trovava al momento del dump.
<productname>PostgreSQL</productname> fornisce il programma d'utilità
<xref linkend="app-pgdump"/> per questo scopo. L'utilizzo di base di questo
comando:
<synopsis>
pg_dump <replaceable class="parameter">dbname</replaceable> &gt; <replaceable class="parameter">outfile</replaceable>
</synopsis>
Come si può notare, <application>pg_dump</application> scrive il risultato nello
standard output. Si vedrà sotto in che modo questo può essere utile.
  </para>

  <para>
<application>pg_dump</application> è una normale applicazione client per 
<productname>PostgreSQL</productname>  (sebbene sia particolarmente intelligente).
Questo significa che è possibile eseguire questa procedura di backup da ogni
host remoto che ha accesso al database. Ricordare comunque che 
<application>pg_dump</application> non funziona con permessi speciali.
In particolare, deve avere accesso in lettura a tutte le tabelle di cui si vuole
fare il back up, in pratica si dovrà lanciarlo quasi sempre come superutente del database.
  </para>

  <para>
   To specify which database server <application>pg_dump</application> should
Per specificare quale server database dovrebbere essere contattato da 
<application>pg_dump</application>, usare l'opzione a linea di comando
   contact, use the command line options <option>-h
<option>-h <replaceable>host</replaceable></option> e 
   <replaceable>host</replaceable></option> and <option>-p <replaceable>port</replaceable></option>. The
<option>-p <replaceable>port</replaceable></option>. L'host predefinito
è l'host locale o quello specificato dalla variabile di sistema <envar>PGHOST</envar>.
Similarmente, la porta predefinita è indicata dalla variabile di sistema <envar>PGPORT</envar>
o, fallendo quella, la predefinita alla compilazione.
(Convenientemente, il server normalmente avrà lo stesso valora predefinito alla  
compilazione).
  </para>

  <para>
Come ogni altra applicazione client <productname>PostgreSQL</productname>,
<application>pg_dump</application> si connetterà in maniera predefinita al database  
con lo stesso nome dell'utente corrente del sistema operativo. Per cambiare questo 
comportamento, specificare l'opzione <option>-U</option> o impostare 
la variabile d'ambiente <envar>PGUSER</envar>. Ricordare che le connessioni
<application>pg_dump</application> sono sottoposte ai normali meccanismi 
di autenticazione dei client (che sono descritti nel <xref
linkend="client-authentication"/>).
  </para>

  <para>
Un vantaggio importante di <application>pg_dump</application> rispetto agli altri
metodi di backup descritti successivamente è che l'output di 
<application>pg_dump</application> può essere generalmente importato in versioni successive
di <productname>PostgreSQL</productname>,
mentre backup a livello di file system e l'archiviazione continua sono entrambi
estremamente scpecifici alla versione del server. <application>pg_dump</application> è
anche l'unico metodo che funzionerà quando si dovrà trasferire un 
database su una macchina con architettura differente, come il passaggio 
da un server a 32 bit ad uno a 64 bit.
  </para>

  <para>
I dump creati da <application>pg_dump</application> sono internamente consistenti,
cioè, il dump rappresenta un'istantanea del database al momento che 
<application>pg_dump</application> è stato lanciato. <application>pg_dump</application>
non blocca altre operazioni sul database mentre sta lavorando.
(Ad eccezione di operazioni che hanno bisogno di operare con un lock esclusivo,
come la maggior parte delle forme di <command>ALTER TABLE</command>).
  </para>

  <important>
   <para>
Se lo schema del database si basa sgli OID (per esempio, come chiavi esterne)
si deve istruire <application>pg_dump</application> ad eseguire il dump anche degli OID
Per farlo, usare l'opzione a linea di comando <option>-o</option>.
   </para>
  </important>

  <sect2 id="backup-dump-restore">
   <title>Ripristinare il dump</title>

   <para>
I file di testo creati da <application>pg_dump</application> sono fatti per 
essere letti dal programma <application>psql</application>. Il comando generale
per ripristinare un dump è
<synopsis>
psql <replaceable class="parameter">dbname</replaceable> &lt; <replaceable class="parameter">infile</replaceable>
</synopsis>
dove <replaceable class="parameter">infile</replaceable> è il file creato dal comando
<application>pg_dump</application>. 
Il database <replaceable class="parameter">dbname</replaceable>
non sarà creato da questo comando, per questo si dovrà crearlo da <literal>template0</literal> 
prima di eseguire <application>psql</application> (per es., con
<literal>createdb -T template0 <replaceable class="parameter">dbname</replaceable></literal>).
<application>psql</application> supporta opzioni simili a <application>pg_dump</application>
per specificare il server database al quale connettersi e il nome utente da usare.
Se veda la pagina di referenza  <xref linkend="app-psql"/> per maggiori informazioni.
   </para>

   <para>
Prima di ripristinare un dump SQL, tutti gli utenti che possiedono oggetti o 
a cui sono stati concessi permessi su oggetti nel database sottoposto a dump devono già
esistere. Altrimenti, il ripristino fallirà nel ricreare gli oggetti 
con l'originale proprietà e/o permessi.
(A volte questo è quello che si vuole, ma di solito no).
   </para>

   <para>
In maniera predefinita, lo script <application>psql</application> continuerà a
viaggiare dopo che viene riscontrato un errore SQL. Si potrebbe voler lanciare
<application>psql</application> con la variabile <literal>ON_ERROR_STOP</literal>
impostata per modificare quel comportamento e far si che <application>psql</application>
esca con uno stato d'uscita 3 se si presenta un errore SQL:
<programlisting>
psql --set ON_ERROR_STOP=on dbname &lt; infile
</programlisting>
D'altro canto, si avrà un database ripristinato solo parzialmente.
Alternativamente, è possibile specificare che l'intero dump dovrebbe essere
ripristinato come una singola transazione, così il ripristino sarà o completamente 
compeltato o completamente revertito. Questo modo può essere specificato passando 
l'opzione a riga di comando <option>-1</option> o <option>--single-transaction</option>
a <application>psql</application>. Quando si usa questo modo,
fare attenzione che anche un piccolo errore può portare al rollback di un ripristino
che stava girando da molte ore. Comunque, sarebbe preferibile pulire a mano
un database complesso dopo un dump parzialmente rispristinato.
   </para>

   <para>
L'abilità di <application>pg_dump</application> e <application>psql</application> di
di scrivere e leggere dalle pipe rende possibile fare il dump di un database
direttamente da un server ad un altro, per esempio:
<programlisting>
pg_dump -h <replaceable>host1</replaceable> <replaceable>dbname</replaceable> | psql -h <replaceable>host2</replaceable> <replaceable>dbname</replaceable>
</programlisting>
   </para>

   <important>
    <para>
I dump prodotti da <application>pg_dump</application> sono relativi a
<literal>template0</literal>. Questo significa nel dump finirà anche ogni linguaggio, 
procedura,
ecc. aggiunta attraverso <literal>template1</literal>. Come risultato,
quando si esegue un ripristino, se si sta utilizzando un <literal>template1</literal>
modificato, si deve creare un database vuoto da <literal>template0</literal>,
come nell'esempio sopra.
    </para>
   </important>

   <para>
Dopo il ripristino di un backup, è saggio lanciare <xref
linkend="sql-analyze"/> su ogni database, così l'ottimizzatore di query
avrà statistiche utili;
si veda <xref linkend="vacuum-for-statistics"/> e
<xref linkend="autovacuum"/> per maggiori informazioni.
Per ulteriori consigli su come caricare grandi quantità di dati 
in <productname>PostgreSQL</productname> efficentemente, si rimanda al
<xref linkend="populate"/>.
   </para>
  </sect2>

  <sect2 id="backup-dump-all">
   <title>Usare <application>pg_dumpall</application></title>

   <para>
<application>pg_dump</application> esegue il dump di un solo database alla volta,
e non esegue il dump delle informazioni sui ruoli o sui tablespace
(dato che queste sono a livello di cluster piuttosto che a livello di database).
Per avere un dump comodo dell'intero contenuto di un cluster database, è
disponibile il programma <xref linkend="app-pg-dumpall"/>.
<application>pg_dumpall</application> esegue il backup di ogni database in un dato cluster,
e conserva anche i dati a livello di cluster che sono ruoli e definizioni
tablespace. L'utilizzo di base di questo comando è:
<synopsis>
pg_dumpall &gt; <replaceable>outfile</replaceable>
</synopsis>
Il dump risultante può essere ripristinato con <application>psql</application>:
<synopsis>
psql -f <replaceable class="parameter">infile</replaceable> postgres
</synopsis>
(Attualmente, è possibile specificare ogni nome di database esistente da cui partire,
ma se si sta caricando in un cluster vuoto allora di solito dovrebbe essere usato
<literal>postgres</literal>). È sempre necessario avere accesso
al database come superutente quando si ripristina un dump fatto con 
<application>pg_dumpall</application>, dato che è richiesto di ripristino di informazioni
sui ruoli e sui tablespace, assicurarsi che i percorsi dei tablespace nel dump
siano appropriati per la nuova installazione.
   </para>

   <para>
<application>pg_dumpall</application> funziona emettendo comandi per ricreare 
ruoli, tablespace, e database vuoti, quindi invocando
<application>pg_dump</application> per ogni database. Questo significa che mentre
ogni database sarà internamente consistente, l'istantanea dei 
diversi database potrebbe non essere esattamente identica.
   </para>
  </sect2>

  <sect2 id="backup-dump-large">
   <title>Gestire grandi database</title>

   <para>
Qualche sistema operativo ha limiti per la dimensione massima dei file che causa problemi
quando si creano file <application>pg_dump</application> grandi.
Fortunatamente, <application>pg_dump</application> può scrivere sullo standard output, 
così è possibile usare gli strumenti Unix standard per superare questo potenziale problema. 
Ci sono diversi metodi possibili:
   </para>

   <formalpara>
    <title>Usare dump compressi.</title>
    <para>
È possibile usare il programma di compressione preferito, per esempio
<application>gzip</application>:

<programlisting>
pg_dump <replaceable class="parameter">dbname</replaceable> | gzip &gt; <replaceable class="parameter">filename</replaceable>.gz
</programlisting>

     Ricaricare con:

<programlisting>
gunzip -c <replaceable class="parameter">filename</replaceable>.gz | psql <replaceable class="parameter">dbname</replaceable>
</programlisting>

     o:

<programlisting>
cat <replaceable class="parameter">filename</replaceable>.gz | gunzip | psql <replaceable class="parameter">dbname</replaceable>
</programlisting>
    </para>
   </formalpara>

   <formalpara>
    <title>Usare <command>split</command>.</title>
    <para>
Il comando <command>split</command>
permette di dividere l'output il file più piccoli che sono
accettabili in dimensione per il file system. Per esempio, 
per fare pezzi da 1 megabyte:

<programlisting>
pg_dump <replaceable class="parameter">dbname</replaceable> | split -b 1m - <replaceable class="parameter">filename</replaceable>
</programlisting>

     Ricaricare con:

<programlisting>
cat <replaceable class="parameter">filename</replaceable>* | psql <replaceable class="parameter">dbname</replaceable>
</programlisting>
    </para>
   </formalpara>

   <formalpara>
    <title>Usare il formato di dump 
    personalizzato di <application>pg_dump</application></title>
    <para>
Se <productname>PostgreSQL</productname> è stato compilato su un sistema con la libreria
di compressione <application>zlib</application> installata, il formato di 
compressione personalizzato comprimerà i dati mentre li scrive nel file di output. 
Questo produrrà dimensioni dei file di dump simili all'utilizzo di <command>gzip</command>,
ma avrà il vantaggio aggiuntivo che le tabelle possono essere ripristinate selettivamente. 
Il seguente comando fa il dump di un database usando il formato di dump personalizzato:

<programlisting>
pg_dump -Fc <replaceable class="parameter">dbname</replaceable> &gt; <replaceable class="parameter">filename</replaceable>
</programlisting>

Un file di dump generato in questo modo non è uno script per <application>psql</application>, 
ma deve essere ripristinato con <application>pg_restore</application>, per esempio:

<programlisting>
pg_restore -d <replaceable class="parameter">dbname</replaceable> <replaceable class="parameter">filename</replaceable>
</programlisting>

Si veda le pagine di referenza <xref linkend="app-pgdump"/> e <xref
linkend="app-pgrestore"/> per dettagli.
    </para>
   </formalpara>

   <para>
Per database molto grandi, si potrebbe aver necessità di combinare <command>split</command>
con uno degli altri due approcci.
   </para>

  </sect2>
 </sect1>

 <sect1 id="backup-file">
  <title>Backup a livello di file system</title>

  <para>
Una strategia alternativa per il backup è copiare direttamente i file usati da 
<productname>PostgreSQL</productname> per immagazzinare i dati nel database;
<xref linkend="creating-cluster"/> spiega dove sono collocati questi file.
È possibile usare qualsiasi metodo si preferisce 
per fare backup di file system; per esempio:

<programlisting>
tar -cf backup.tar /usr/local/pgsql/data
</programlisting>
  </para>

  <para>
Ci sono due restrizioni, comunque, che rendono questo metodo impraticabile,
o almeno inferiore al metodo <application>pg_dump</application>:

   <orderedlist>
    <listitem>
     <para>
Il server database <emphasis>deve</emphasis> essere spento per ottenere un backup usabile.
Mezze misure, tipo non permettere altre connessioni, non funzioneranno
(in parte perchè <command>tar</command> e strumenti simili non prendono 
un'istantanea atomica dello stato del file system,
ma anche perchè ci sono operazioni di buffering all'interno del server).
Informazioni sull'arresto del server possono essere trovate in
<xref linkend="server-shutdown"/>. Inutile dire che è necessario 
arrestare il server anche prima del ripristino dei dati.
     </para>
    </listitem>

    <listitem>
     <para>
Se ci si è addentrati nei dettagli dei come sul file system è organizzato il database, 
si potrebbe esser tentati di provare a fare il backup o il ripristino solo alcune
tabelle o database dai loro rispettivi file o directory.
Questo <emphasis>non</emphasis> funzionerà perchè le informazioni contenute
in questi file non sono usabili senza i file di log delle commit,
<filename>pg_clog/*</filename>, che contiene lo stato delle commit di tutte le transazioni.
Un file di una tabella è usabile solo con queste informazioni.
Ovviamente è impossibile anche ripristinare solo una tabella 
e l'associatio <filename>pg_clog</filename>  perchè questo renderà 
tutte le altre tabelle nel cluster inutili.
Per questo, i backup a livello di file system funzioneranno solo per 
l'intero cluster.
     </para>
    </listitem>
   </orderedlist>
  </para>

  <para>
Un approccio alternativo per un backup a livello di file system è di 
fare una <quote>consistent snapshot</quote> della directory dei dati, se
il file system supporta quella funzionalità (e ti fidi che sia implementata 
correttamente). La procedura tipica è di fare una <quote>frozen snapshot</quote> 
del volume che contiene il database, quindi copiare l'intera directory dei dati 
(non solo parti, vedere sopra) dalla snapshot a un dispositivo di backup, quindi rilasciare
la <quote>frozen snapshot</quote>. Questo funzionerà anche mentrw il database è in esecuzione.
Comunque, un backup creato in questo modo salva i file del database
in uno stato come se il server database non fosse stato terminato nel modo giusto;
quindi, quando si avvia il server database
sui dati sottoposti a backup, esso penserà che la precedente istanza del server 
abbia subito un crash e repeterà il log WAL. Questo non è un problema;
esserne semplicemente consapevoli (e assicurarsi di includere i file WAL nel proprio backup).
  </para>

  <para>
Se il database è distibuito su più filesystem, non ci potrebbe essere modo di
ottenere frozen snapshot esattamente simultanee di tutti i volumi.
Per esempio, se i dati e i log WAL sono su dischi diversi,
o se i tablespace sono su differenti file system, potrebbe non essere possibile 
usare il meodo di backup basato sulle snapshot dato che queste <emphasis>devono</emphasis> 
essere
simultanee.
Leggere la documentazione del file system molto attentamente prima di usare
la tecnica delle snapshot consistenti.
  </para>

  <para>
Se snapshot simultanee non sono possibili, un'opzione è di spengere il server database
abbastanza a lungo da determinare tutte le frozen snapshot. 
Un'altra opzione è quella di eseguire backup basati sull'archiviazione continua (<xref
linkend="backup-base-backup"/>) perchè questi backup sono immuni ai cambiamenti
del file system durante il backup. Questo richiede l'autorizzazione all'archiviazione
continua solo durante il processo di backup; il ripristino viene fatto
usando <xref linkend="backup-pitr-recovery"/>.
  </para>

  <para>
Un'altra opzione è di usare <application>rsync</application> per compiere un backup
di file system. Questo è fatto lanciando prima <application>rsync</application>
mentre il serve è in esecuzione, quindi terminando il server database
abbastanza a lungo per fare una seconda <application>rsync</application>. Questa
sarà molto più veloce della prima, 
dato che ha relativamente pochi dati da trasferire, e il risultato finale
sarà consistente perchè il server è spento. Questo metodo
permette a un backup a livello di file system di essere eseguito con un tempo
minimo in cui il server non gira.
  </para>

  <para>
Notare che un backup a livello di file system sarà tipicamente più grande
di un dumpo SQL. (<application>pg_dump</application> non ha bisogno di fare il dump
del contenuto degli indici, solo dei comandi per ricrearli). 
Comunque, eseguire un backup di file system potrebbe essere più veloce.
  </para>
 </sect1>

 <sect1 id="continuous-archiving">
  <title>Archiviazione continua e Ripristino Point-In-Time (PITR)</title>

  <indexterm zone="backup">
   <primary>archiviazione continua</primary>
  </indexterm>

  <indexterm zone="backup">
   <primary>ripristino point-in-time</primary>
  </indexterm>

  <indexterm zone="backup">
   <primary>PITR</primary>
  </indexterm>

  <para>
In ogni momento, <productname>PostgreSQL</productname> tiene un
<firstterm>write ahead log</firstterm> (WAL) 
nella sottodirectory <filename>pg_xlog/</filename>
della directory dei dati del cluster. Il log registra
ogni cambiamento fatto ai file dei dati del database. Questo log esiste 
principalmente per motivi di sicurezza rispetto ai crash: se il sistema si blocca,
il database può essere ripristinato alla consistenza facendo un 
<quote>replay</quote> delle voci di log
dall'ultimo punto di controllo (checkpoint). Comunque, l'esistenza
del log rende possibile una terza strategia per effetuare il backup dei 
database: è possibile combinare un backup a livello di file system con un backup dei 
file WAL. Se è necessario un recupero, ripristinare il backup e successivamente
fare un replay di ogni voce dai file WAL del backup per portare il sistema allo stato
corrente. Questo approccio è più complesso da amministrare rispetto i precedenti
approcci, ma ha alcuni vantaggi significanti:
  <itemizedlist>
   <listitem>
    <para>
Non si avrà bisogno di un backup a livello di file system perfettamente consistente 
come punto di partenza. Ogni inconsistenza interna nel backup verrà corretta dal replay
del log (questo non è significativamente diverso da cosa accade durante un 
recupero da un crash). Così non si avrà bisogno di capacità di snapshot del file system,
basterà <application>tar</application> o uno strumento di archiviazione simile.
    </para>
   </listitem>
   <listitem>
    <para>
Dato che è possibile combinare sequenze di file WAL indefinitamente lunghe per il replay,
un backup continuo può essere realizzato semplicemente continuando ad archiviare 
i file WAL. Questo è particolarmente vantaggioso per grandi database, dove 
potrebbe non essere conveniente eseguire un backup completo frequentemente.
    </para>
   </listitem>
   <listitem>
    <para>
Non è necessario fare il replay delle voci WAL sempre fino alla fine.
È possibile fermare il replay in qualsiasi momento e avere una snapshot
consistente del database com'era in quel momento. Così,
questa tecnica supporta <firstterm>recuperi point-in-time</firstterm>: è 
possibile ripristinare il database al suo stato in ogni momento da quando è
stato effettuato il backup di base.
    </para>
   </listitem>
   <listitem>
    <para>
Se si alimenta continuamente un'altra macchina, che è stata caricata con lo stesso 
file  backup di base, 
con la serie di file WAL, si ottiene un sistema di <firstterm>warm standby</firstterm>:
in ogni istante è possibile tirare su la seconda macchina e avremo una copia del database
corrente.
    </para>
   </listitem>
  </itemizedlist>
  </para>

  <note>
   <para>
<application>pg_dump</application> e <application>pg_dumpall</application>
non producono backup a livello di file system e non possono essere usati come parte
si una soluzione di archiviazione continua.
Quei dump sono <emphasis>logici</emphasis> e non contengono abbastanza 
informazioni da essere usati come replay WAL.
   </para>
  </note>

  <para>
Come con la tecnica del backup semplice a livello di file system, questo metodo  
supporta il ripristino di un intero cluster, non di un sottoinsieme.
Inoltre, richiede molto spazio per l'archiviazione: 
il backup di base potrebbe essere voluminoso,
e un sistema impegnato genererà molti megabute di traffico WAL che devono essere
archiviati. Inoltre, è la tecnica di backup preferita in
molte situazioni dove è necessaria alta affidabilità.
  </para>

  <para>
Per recuperare con successo usando l'archiviazione continua (chiamata anche
<quote>backup online</quote> da molti commercianti di database), si ha bisogno di 
continue sequenze di file WAL archiviati che si estendono all'indietro almeno 
al momento di inizio del backup. Così, per iniziare, si dovrebbe impostare e testare 
la procedura per l'archiviazione dei file WAL <emphasis>prima</emphasis> di effettuare 
il backup di base. Di conseguenza, verranno discussi prima i meccanismi di 
archiviazione dei file WAL.
  </para>

  <sect2 id="backup-archiving-wal">
   <title>Impostare l'archiviazione WAL</title>

   <para>
Parlando in senso astratto, un sistema <productname>PostgreSQL</productname> in esecuzione
produce una sequenza di record WAL indefinitamente lunga. Il sistema fisicamente
divide questa sequenza in <firstterm>file di segmento</firstterm> WAL,
che normalmente sono di 16MB (anche se la dimensione del segmento
può essere modificata durante la compilazione di <productname>PostgreSQL</productname>).
Ai file di segmento vengono dati nomi numerici che rispecchiano la loro posizione
nella sequenza WAL astratta. Quando non si usa l'archiviazione WAL, il sistema normalmente
crea solo pochi file segmento e successivamente li 
<quote>ricicla</quote> rinominando i file segmento non più necessari 
in numeri di segmento più alti. Si assume che i file segmento il cui contenuto 
precede il checkpoint precedente all'ultimo non siano di interesse e possano
essere riciclati.
   </para>

   <para>
Quando si archiviano dati WAL, si deve catturare il contenuto di ogni file segmento
una volta che è pieno, e salvare quei dati da qualche parte prima che il file segmento
sia riciclato. A seconda dell'applicazione e dell'hardware disponibile,
ci possono essere molti modi diversi di <quote>salvare i dati da qualche parte</quote>:
è possibile copiare i file segmento in una directory montata con NFS in un'altra macchina, 
scriverli su un drive a nastro (assicurandosi che ci sia un modo per indentificare il nome 
originale di ogni file), o raggrupparli e scriverli su CD, o qualcos'altro, 
Per dare all'amministratore di database flessibità, <productname>PostgreSQL</productname>
non tenta di prevede come l'archiviazione verrà fatta. 
Al contrario, <productname>PostgreSQL</productname> lascia che l'amministratore 
specifichi un comando shell da essere eseguito per copiare un file segmento completo
verso ovunque debba andare. Il comando può essere semplice come un <literal>cp</literal>,
o può invocare uno script shell complesso - è a vostra discrezione.
   </para>

   <para>
Per abilitare l'archiviazione WAL, impostare il parametro di configurazione 
<xref linkend="guc-wal-level"/> a <literal>archive</literal> 
(o <literal>hot_standby</literal>),
<xref linkend="guc-archive-mode"/> a <literal>on</literal>,
e specificare il comando shell da usare nel parametro di configurazione
linkend="guc-archive-command"/>. In pratica
queste impostazioni saranno sempre posizionate nel file 
<filename>postgresql.conf</filename>.
In <varname>archive_command</varname>,
<literal>%p</literal> è sostituito dal percorso del file da archiviare, 
mentre <literal>%f</literal> è sostituito dal nome del file.
(Il percorso è relativo alla directory di lavoro corrente, 
per esempio, la directory dati del cluster).
Usare <literal>%%</literal> se si ha necessità di includere il carattere 
<literal>%</literal> nel comando. Il comando più semplice è qualcosa simile a:
<programlisting>
archive_command = 'cp -i %p /mnt/server/archivedir/%f &lt;/dev/null'
</programlisting>
che copierà i segmenti WAL archiviabili nella directory
<filename>/mnt/server/archivedir</filename>. (Questo è un esempio, non una raccomandazione,
e potrebbe non funzionare su tutte le piattaforme). Dopo che i parametri 
<literal>%p</literal> e <literal>%f</literal> sono stati sostituiti,
il comando potrebbe somigliare a questo:
<programlisting>
cp -i pg_xlog/00000001000000A900000065 /mnt/server/archivedir/00000001000000A900000065 &lt;/dev/null
</programlisting>
Un comando simile sarà generato per ogni nuovo file che deve essere archiviato.
   </para>

   <para>
Il comando archive sarà eseguito sotto la stessa proprietà dello stesso utente
col quale il server <productname>PostgreSQL</productname> è in esecuzione. Dato che
le serie di file WAL archiviate contengono effettivamente ogni cosa
del database, si vorrà essere sicuri che i dati archiviati siano protetti da
occhi indiscreti; per esempio, archiviarli in una directory che 
non ha accesso in lettura per il gruppo o per il mondo.
   </para>

   <para>
È importante che il comando di archiviazione restituisca zero come stato di uscita se
e solo se ha successo. Se ottiene come risultato zero,
<productname>PostgreSQL</productname> assumerà che il file è stato archiviato con successo,
e lo rimuoverà o lo riciclerà. Comunque, uno stato non zero
dice a  <productname>PostgreSQL</productname> che il file non è stato archiviato;
e periodicamente verrà fatto un tentativo finchè non avrà successo.
   </para>

   <para>
Il comando di archiviazione dovrebbe generalmente essere pensato per rifiutare di 
sovrascrivere i file di archivio pre-esistenti. 
Questa è una caratteristica importante per la sicurezza, per preservare l'integrità 
dell'archivio in caso di errori dell'amministratore (tipo l'invio dell'output di due
differenti server alla stessa directory d'archivio).
È consigliabile testare il comando d'archiviazione per assicurare che effettivamente
non sovrascriva file esistenti, <emphasis>e che in quel caso restituisca 
stato non zero</emphasis>. Su molte piattaforme Unix, <command>cp
-i</command> fa si che la copia chieda prima di sovrascrivere un file, e 
<literal>&lt; /dev/null</literal> causa il fallimento in caso di sovrascrittura.
Se la piattaforma usata non supporta questo comportamento, si dovrebbe aggiungere
un comando per testare l'esistenza del file archivio. Per esempio, 
qualcosa simile a:
<programlisting>
archive_command = 'test ! -f /mnt/server/archivedir/%f &amp;&amp; cp %p /mnt/server/archivedir/%f'
</programlisting>
funziona correttamente sulla maggior parte delle varianti Unix.
   </para>

   <para>
Quando si progetta il setup di archiviazione, considerare cosa accadrà se
il comando di archiviazione fallisce ripetutamente, se per esempio qualche
aspetto richiede l'intervento dell'opertore o l'archivio eccede lo spazio disponibile.
Per esempio, questo puù accadere se si scrive su nastro senza un sostitutore automatico;
quando il nastro è pieno, non è possibile archiviare niente finchè il nastro 
non viene sostituito.
Ci si dovrebbe assicurare che ogni condizione d'errore o richiesta di intervento umano
venga riportato appropriamente in modo che la situazione possa essere
risolta ragionevolmente velocemente. La directory <filename>pg_xlog/</filename>
continuerà a riempirsi con file segmento WAL finchè la situazione non è risolta.
(Se il file system contenente <filename>pg_xlog/</filename> è pieno,
<productname>PostgreSQL</productname> produrrà un arresto PANIC. Le transazioni che non
hanno eseguito il commit saranno perse, ma il database rimarrà offline finchè
non si libera un po' di spazio).
   </para>

   <para>
La velocità del comando di archiviazione non è impotante dato che può tenere il passo
con la velocità media con la quale il server genera dati WAL. Le normali 
operazioni continuano anche se il processo di archiviazione resta un po' indietro.
Se l'archiviazione rimane molto indietro, questo incrementerà l'ammontare dei 
dati che possono essere persi in caso di disastro. Questo significherà anche che
la directory <filename>pg_xlog/</filename> conterrà grandi quantità di file segmento
non ancora archiviati, che eventualmente possono eccedere lo spazio su disco disponibile.
È consigliabile controllare il processo di archiviazione per essere sicuri che 
funzioni come si vuole. 
   </para>

   <para>
Nello scrivere il comando di archivio, si dovrebbe assumere che i nomi dei file da
archiviare possano essere lunghi più di 64 caratteri e possano contenere qualsiasi 
combinazione di lettere ASCII, cifre, e punti. Non è necessario preservare 
il percorso relativo originale (<literal>%p</literal>) ma è necessario 
preservare il nome del file (<literal>%f</literal>).
   </para>

   <para>
Notare che sebbene l'archiviazione WAL permetterà il ripristino di qualsiasi
modifica fatta ai dati del database <productname>PostgreSQL</productname>,
essa non ripristinerà i cambiamenti fatti ai file di configurazione (tipo,
<filename>postgresql.conf</filename>, <filename>pg_hba.conf</filename> e
<filename>pg_ident.conf</filename>), dato che questi file sono modificati manualmente 
piuttosto che attraverso operazioni SQL.
Si potrebbe desiderare mantere i file di configurazione in una posizione che sarà
sottoposta a backup dalle normali procedure di backup a livello di file system. Si veda 
<xref linkend="runtime-config-file-locations"/> per capire come trasferire 
i file di configurazione.
   </para>

   <para>
Il comando di archiviazione viene invocato solo su segmenti WAL  completati. Da ora,
se il server genera solo poco traffico WAL (oppure ha periodi morti 
in cui accade), ci potrebbe essere molto ritardo tra il completamento 
di una transazione e la sua registrazione sicura nello spazio di archiviazione. Per mettere
un limite a come possanno essere i vecchi dati non archiviati, è possibile impostare
<xref linkend="guc-archive-timeout"/> per forzare il server a passare
a un nuovo file segmento WAL come minimo ogni tot. Notare che i file archiviati 
che sono archiviati prima a causa dell'opzione vista sopra sono sempre della stessa
lunghezza di file completamente pieni. Non è comunque saggio impostare un 
<varname>archive_timeout</varname> molto piccolo  &mdash; gonfierà lo spazio di archiviazione.
Impostare <varname>archive_timeout</varname> a circa un minuto di solito è ragionevole.
   </para>

   <para>
Inoltre, è possibile forzare un cambiamento di segmento manualmente con
<function>pg_switch_xlog</function> se si vuole assicurare che una transazione
appena terminata venga archiviata il più presto possibile. Altre funzioni utili
relative alla gestione del WAL sono elencate nella <xref
linkend="functions-admin-backup-table"/>.
   </para>

   <para>
Quando <varname>wal_level</varname> è <literal>minimal</literal> alcuni comandi SQL
sono ottimizzati per evitare il log di WAL, come descritto in <xref
linkend="populate-pitr"/>. Se l'archiviazione o la replicazione streaming sono state
attivate durante l'esecuzione di una di queste istruzioni, WAL non conterrebbe
abbastanza informazioni per il recupero dell'archivio. (Il recupero dal crash non viene 
toccato). Per questa ragione, <varname>wal_level</varname> può essere cambiato solo
all'avvio del server. Comunque, <varname>archive_command</varname> può essere cambiato con
un ricaricamento del file di configurazione. Se si desidera fermare temporaneamente 
l'archiviazione, un modo di farlo è impostando <varname>archive_command</varname>
a una stringa vuota  (<literal>''</literal>).
Questo farà si che i file WAL si accumolino in <filename>pg_xlog/</filename> fino a che
non viene stabilito un <varname>archive_command</varname> funzionante. 
   </para>
  </sect2>

  <sect2 id="backup-base-backup">
   <title>Realizzare un backup di base</title>

   <para>
La procedura per realizzare un backup di base è relativamente semplice:
  <orderedlist>
   <listitem>
    <para>
Assicurare che l'archiviazione WAL sia abilitata e funzionante.
    </para>
   </listitem>
   <listitem>
    <para>
Connettersi al database come superurtente e immettere il comando:
<programlisting>
SELECT pg_start_backup('label');
</programlisting>
dove <literal>label</literal> è qualsiasi stringa si voglia usare per indentificare
in modo univoco l'operazione di backup. (Una buona pratica è usare il percorso completo 
nel quale si intende mettere il file dump di backup).
<function>pg_start_backup</function> crea un file <firstterm>etichetta di backup</firstterm>,
chiamato <filename>backup_label</filename>, nella directory cluster, con 
informazioni sul backup, incluso l'orario di inizio e la stringa etichetta.
    </para>

    <para>
Non importa a quale database all'interno del cluster ci si connette per lanciare 
questo comando. È possibile ignorare il risultato restituito dalla funzione;
ma se viene riportato un errore, crercare di ricolverlo prima di procedere.
    </para>

    <para>
In maniera predefinita, <function>pg_start_backup</function> può metterci molto tempo
per finire. 
Questo perchè esegue un checkpoint, e l'I/O richiesto per il checkpoint
sarà spalmato in un periodo di tempo significativo, automaticamente metà dell'intervallo
tra i checkpoint (si veda il parametro di configurazione 
<xref linkend="guc-checkpoint-completion-target"/>). Questo di solito è quello che vuoi,
dato che minimizza l'impatto sull'elaborazione della query.
Se si vuole avviare il backup appena possibile,
usare:
<programlisting>
SELECT pg_start_backup('label', true);
</programlisting>
Questo fa sì che il checkpoint sia fatto il più velocemente possibile.
    </para>
   </listitem>
   <listitem>
    <para>
Esegue il backup, usando qualsiasi strumento utile per il backup a livello di
file system, come <application>tar</application> o <application>cpio</application> (non
<application>pg_dump</application> o <application>pg_dumpall</application>).
Non è necessario nè auspicabile fermare le normali operazioni sul database 
mentre lo si fà.
    </para>
   </listitem>
   <listitem>
    <para>
Connettersi nuovamente al database come superutente, e lanciare il seguente comando:
<programlisting>
SELECT pg_stop_backup();
</programlisting>
Questo termina la modalità backup e compie un cambiamento automatico al prossimo
segmento WAL. La ragione per il cambiamento è di prendere accordi che l'ultimo 
segmento WAL scritto durante l'intervallo di backup sia pronto per l'archiviazione.
    </para>
   </listitem>
   <listitem>
    <para>
Una volta che i segmenti WAL attivi durante il backup sono archiviati, si è finito.
Il file identificato dal risultato di <function>pg_stop_backup</function> è l'ultimo
segmento richiesto per formare un insieme completo di file di backup.
Se <varname>archive_mode</varname> è attivo,
<function>pg_stop_backup</function> non restituisce niente finchè l'ultimo segmento
è stato archiviato. 
L'archiviazione di questi file avviene automaticamente dato che si è
già configurato l'<varname>archive_command</varname>. In molti casi questo avviene 
velocemente, ma si consiglia di controllare il sistema di archiviazione 
per assicurarsi che non ci siano ritardi.
Se il processo di archiviazione è rimasto indietro 
causa fallimenti del comando d'archiviazione, continuerà a provare
finchè l'archiviazione non avrà successo e il backup è completo.
Se si desidera impostare un limite di tempo all'esecuzione di 
<function>pg_stop_backup</function>, specificare un valore appropriato per
<varname>statement_timeout</varname>.
    </para>
   </listitem>
  </orderedlist>
   </para>

   <para>
Alcuni strumenti di backup a livello di file system producono warning o errori
se i file che stanno tentando di copiare cambiano mentre la copia procede.
Quando si prende un backup base di un database attivo, questa situazione è normale
e non un errore. Comunque, è necessario assicurarsi di poter distinguere
queste situazioni da errori reali. Per esempio, alcune versioni di 
<application>rsync</application> restituiscono un codice di errore separato per 
<quote>file sorgente spariti</quote>, ed è possibile scrivere uno script che
accetti questo codice d'uscita non come un erroe. Inoltre, alcune versioni di 
GNU <application>tar</application> restituiscono un codice di errore indistinguibile
da un errore fatale se un file viene troncato mentre <application>tar</application>
lo sta copiando. Fortunatamente, le versioni di GNU <application>tar</application> 
dalla 1.6 e successive terminano con <literal>1</literal>  se un file è cambiato durante 
il backup e <literal>2</literal> per gli altri errori.
   </para>

   <para>
Non è necessario preoccuparsi dell'ammontare di tempo passato tra
<function>pg_start_backup</function> e l'inizio del backup attuale,
e nemmeno tra la fine del backup e <function>pg_stop_backup</function>; pochi minuti 
di ritardo non saranno dannosi. (Comunque, se normalmente si esegue il server con 
<varname>full_page_writes</varname> disaiblitata, si potrebbe notare un calo
delle prestazioni tra <function>pg_start_backup</function> e
<function>pg_stop_backup</function>, dato che <varname>full_page_writes</varname> è
effettivamente forzata a "on" durante la modilità backup). È necessario assicurare che  
questi passi siano svolti in sequenza, senza qualsiasi possibile 
sovrapposizione, o il backup sarà invalidato.
   </para>

   <para>
Assicurarsi che il dump di backup includa tutti i file sotto 
la directory cluster (per es. <filename>/usr/local/pgsql/data</filename>).
Se si stanno usando tablespace che non stanno in questa directory,
fare attenzione ad includerli (e assicurarsi che il dump di backup archivi 
link simbolici come link, altrimenti il ripristino rovinerà i tablespace).
   </para>

   <para>
È possibile, comunque, omettere dal dump di backup i file dentro la sottodirectory
<filename>pg_xlog/</filename> del cluster. Questo piccolo aggiustamento 
è utile in quanto riduce il rischio di errori durante il ripristino.
Questo è facile da realizzare se <filename>pg_xlog/</filename> è un link simbolico 
che punta fuori dalla directory cluster, che comunque è una pratica comune
per questioni di prestazione.
   </para>

   <para>
Per fare uso del backup, si dovrà tenere tutti i file segmento WAL generati 
durante e dopo il backup a livello di file system.
Per aiutarti a farlo, la funzione <function>pg_stop_backup</function> crea
un <firstterm>file storico di backup</firstterm> che viene immediatamente 
immagazzinato nell'aria di archivio WAL. Questo file è nominato dopo il primo
file segmento WAL di cui si ha bisogno per il backup.
Per esempio, se il file WAL di partenza è
<literal>0000000100001234000055CD</literal> il file storico di backup sarà chiamato 
<literal>0000000100001234000055CD.007C9330.backup</literal>. (La seconda parte 
del nome del file sta per l'esatta posizione all'interno del file WAL,
e puà essere tranquillamente ignorata). Una volta che i file segmento WAL 
e quelli di backup usati durante il backup
sono stati archiviati in modo sicuro (come specificato nel file storico di backup),
tutti i segmenti WAL archiviati con nomi numericamente minori non sono più necessari
per recuperare il backup a livello di file system e possono essere eliminati.
Comunque, si dovrebbe considerare il mantenimento di diversi insiemi di backup 
per essere assolutamente certi che 
si possano recuperare i dati.
   </para>

   <para>
Il file storico di backup è solo un piccolo file di testo. Esso contiene
l'etichetta fornita a  <function>pg_start_backup</function>, così come 
gli orari di inizio e fine e i segmenti WAL del backup.
Se si è usata l'etichetta per identificare il file dump associato, 
allora il file storico archiviato è sufficiente a dirti quale file dump ripristinare.
   </para>

   <para>
Dato che si sono tenuti tutti i file WAL archiviati dall'ultimo backup,
l'intervallo tra i backup di base dovrebbe essere, di solito, 
scelto basandosi su quanto spazio di immagazzinamento di vuole dedicare 
ai file WAL archiviati. Si dovrebbe considerare anche il tempo che si preparati a spendere
per il recupero, se il recupero è necessario - il sistema dovrà fare il replay di tutti quei 
segmenti WAL, e questo potrebbe prendere un po' di tempo se è passato molto tempo 
dall'ultimo backup di base.
   </para>

   <para>
È importante anche notare che la funzione <function>pg_start_backup</function>
crea un file chiamato <filename>backup_label</filename> nella directory di cluster,
che viene rimosso da <function>pg_stop_backup</function>.
Questo file sarà certamente archiviato come parte del file dump di backup.
Il file etichetta di backup include la stringa fornita a
<function>pg_start_backup</function>, così come l'orario dell'avvio di 
<function>pg_start_backup</function>, e il nome del file di partenza del WAL.
In caso di confuzione è inoltre possibile guardare nel file dump di backup 
e determinare esattamente da quale sessione di backup arriva il file dump
   </para>

   <para>
<warning>
    <para>
        TODO
    </para>
</warning>
    It is also possible to make a backup dump while the server is
    stopped.  In this case, you obviously cannot use
    <function>pg_start_backup</function> or <function>pg_stop_backup</function>, and
    you will therefore be left to your own devices to keep track of which
    backup dump is which and how far back the associated WAL files go.
    It is generally better to follow the continuous archiving procedure above.
   </para>
  </sect2>

  <sect2 id="backup-pitr-recovery">
   <title>Ripristino usando un backup ad archiviazione continua</title>

   <para>
Ok, il peggio è successo e si ha bisogno di recuperare dati da un backup.
Ecco la procedura:
  <orderedlist>
   <listitem>
    <para>
Fermare il server, se è in esecuzione.
    </para>
   </listitem>
   <listitem>
    <para>
Se si ha lo spazio per farlo,
copiare l'intera directory di cluster ed ogni tablespace in un luogo temporaneo
nel caso in cui se ne abbia bisogno più tardi. Notare che questa precauzione 
richiederà che si abbia abbastanza spazio libero sul sistema da contenere
due copie dei database esistenti. Se non si ha sufficiente spazio su disco,
si dovrebbe almeno salvare il contenuto della sottodirectory 
del cluster <filename>pg_xlog</filename>, dato che potrebbe contenere log che non
sono stati archiviati prima che il sistema sia caduto.
    </para>
   </listitem>
   <listitem>
    <para>
Rimuovere tutti i file e le sottodirectory esistenti nella directory di cluster
e sotto le directory radice dei tablespace che si stanno usando.
    </para>
   </listitem>
   <listitem>
    <para>
Ripristinare i file del database dal proprio backup di file system. Assicurarsi che
siano ripristinati con la giusta proprietà (l'utente del sistema database, non 
<literal>root</literal>!) e con i giusti permessi. Se si stanno  usando 
tablespace, 
si dovrebbe verificare che i link simbolici in <filename>pg_tblspc/</filename>
siano stati ripristinati correttamente.
    </para>
   </listitem>
   <listitem>
    <para>
Rimuovere qualsiasi file presente in <filename>pg_xlog/</filename>; questi arrivano
dal backup a livello di file system e quindi probabilmente  sono obsoleti.
Se non si è archiviato <filename>pg_xlog/</filename> per niente, allora crearlo 
con i giusti permessi, 
facendo attenzione a impostarlo come link simbolico 
se lo era precedentemente.
    </para>
   </listitem>
   <listitem>
    <para>
     If you have unarchived WAL segment files that you saved in step 2,
     copy them into <filename>pg_xlog/</filename>.  (It is best to copy them,
     not move them, so you still have the unmodified files if a
     problem occurs and you have to start over.)
    </para>
   </listitem>
   <listitem>
    <para>
     Create a recovery command file <filename>recovery.conf</filename> in the cluster
     data directory (see <xref linkend="recovery-config"/>). You might
     also want to temporarily modify <filename>pg_hba.conf</filename> to prevent
     ordinary users from connecting until you are sure the recovery was successful.
    </para>
   </listitem>
   <listitem>
    <para>
     Start the server.  The server will go into recovery mode and
     proceed to read through the archived WAL files it needs.  Should the
     recovery be terminated because of an external error, the server can
     simply be restarted and it will continue recovery.  Upon completion
     of the recovery process, the server will rename
     <filename>recovery.conf</filename> to <filename>recovery.done</filename> (to prevent
     accidentally re-entering recovery mode later) and then
     commence normal database operations.
    </para>
   </listitem>
   <listitem>
    <para>
     Inspect the contents of the database to ensure you have recovered to
     the desired state.  If not, return to step 1.  If all is well,
     allow your users to connect by restoring <filename>pg_hba.conf</filename> to normal.
    </para>
   </listitem>
  </orderedlist>
   </para>

   <para>
    The key part of all this is to set up a recovery configuration file that
    describes how you want to recover and how far the recovery should
    run.  You can use <filename>recovery.conf.sample</filename> (normally
    located in the installation's <filename>share/</filename> directory) as a
    prototype.  The one thing that you absolutely must specify in
    <filename>recovery.conf</filename> is the <varname>restore_command</varname>,
    which tells <productname>PostgreSQL</productname> how to retrieve archived
    WAL file segments.  Like the <varname>archive_command</varname>, this is
    a shell command string.  It can contain <literal>%f</literal>, which is
    replaced by the name of the desired log file, and <literal>%p</literal>,
    which is replaced by the path name to copy the log file to.
    (The path name is relative to the current working directory,
    i.e., the cluster's data directory.)
    Write <literal>%%</literal> if you need to embed an actual <literal>%</literal>
    character in the command.  The simplest useful command is
    something like:
<programlisting>
restore_command = 'cp /mnt/server/archivedir/%f %p'
</programlisting>
    which will copy previously archived WAL segments from the directory
    <filename>/mnt/server/archivedir</filename>.  Of course, you can use something
    much more complicated, perhaps even a shell script that requests the
    operator to mount an appropriate tape.
   </para>

   <para>
    It is important that the command return nonzero exit status on failure.
    The command <emphasis>will</emphasis> be called requesting files that are not present
    in the archive; it must return nonzero when so asked.  This is not an
    error condition.  Not all of the requested files will be WAL segment
    files; you should also expect requests for files with a suffix of
    <literal>.backup</literal> or <literal>.history</literal>. Also be aware that
    the base name of the <literal>%p</literal> path will be different from
    <literal>%f</literal>; do not expect them to be interchangeable.
   </para>

   <para>
    WAL segments that cannot be found in the archive will be sought in
    <filename>pg_xlog/</filename>; this allows use of recent un-archived segments.
    However, segments that are available from the archive will be used in
    preference to files in <filename>pg_xlog/</filename>.  The system will not
    overwrite the existing contents of <filename>pg_xlog/</filename> when retrieving
    archived files.
   </para>

   <para>
    Normally, recovery will proceed through all available WAL segments,
    thereby restoring the database to the current point in time (or as
    close as possible given the available WAL segments).  Therefore, a normal
    recovery will end with a <quote>file not found</quote> message, the exact text
    of the error message depending upon your choice of
    <varname>restore_command</varname>.  You may also see an error message
    at the start of recovery for a file named something like
    <filename>00000001.history</filename>.  This is also normal and does not
    indicate a problem in simple recovery situations; see
    <xref linkend="backup-timelines"/> for discussion.
   </para>

   <para>
    If you want to recover to some previous point in time (say, right before
    the junior DBA dropped your main transaction table), just specify the
    required stopping point in <filename>recovery.conf</filename>.  You can specify
    the stop point, known as the <quote>recovery target</quote>, either by
    date/time or by completion of a specific transaction ID.  As of this
    writing only the date/time option is very usable, since there are no tools
    to help you identify with any accuracy which transaction ID to use.
   </para>

   <note>
     <para>
      The stop point must be after the ending time of the base backup, i.e.,
      the end time of <function>pg_stop_backup</function>.  You cannot use a base backup
      to recover to a time when that backup was in progress.  (To
      recover to such a time, you must go back to your previous base backup
      and roll forward from there.)
     </para>
   </note>

   <para>
    If recovery finds corrupted WAL data, recovery will
    halt at that point and the server will not start. In such a case the
    recovery process could be re-run from the beginning, specifying a
    <quote>recovery target</quote> before the point of corruption so that recovery
    can complete normally.
    If recovery fails for an external reason, such as a system crash or
    if the WAL archive has become inaccessible, then the recovery can simply
    be restarted and it will restart almost from where it failed.
    Recovery restart works much like checkpointing in normal operation:
    the server periodically forces all its state to disk, and then updates
    the <filename>pg_control</filename> file to indicate that the already-processed
    WAL data need not be scanned again.
   </para>

  </sect2>

  <sect2 id="backup-timelines">
   <title>Timelines</title>

  <indexterm zone="backup">
   <primary>timelines</primary>
  </indexterm>

   <para>
    The ability to restore the database to a previous point in time creates
    some complexities that are akin to science-fiction stories about time
    travel and parallel universes.  For example, in the original history of the database,
    suppose you dropped a critical table at 5:15PM on Tuesday evening, but
    didn't realize your mistake until Wednesday noon.
    Unfazed, you get out your backup, restore to the point-in-time 5:14PM
    Tuesday evening, and are up and running.  In <emphasis>this</emphasis> history of
    the database universe, you never dropped the table.  But suppose
    you later realize this wasn't such a great idea, and would like
    to return to sometime Wednesday morning in the original history.
    You won't be able
    to if, while your database was up-and-running, it overwrote some of the
    WAL segment files that led up to the time you now wish you
    could get back to.  Thus, to avoid this, you need to distinguish the series of
    WAL records generated after you've done a point-in-time recovery from
    those that were generated in the original database history.
   </para>

   <para>
    To deal with this problem, <productname>PostgreSQL</productname> has a notion
    of <firstterm>timelines</firstterm>.  Whenever an archive recovery completes,
    a new timeline is created to identify the series of WAL records
    generated after that recovery.  The timeline
    ID number is part of WAL segment file names so a new timeline does
    not overwrite the WAL data generated by previous timelines.  It is
    in fact possible to archive many different timelines.  While that might
    seem like a useless feature, it's often a lifesaver.  Consider the
    situation where you aren't quite sure what point-in-time to recover to,
    and so have to do several point-in-time recoveries by trial and error
    until you find the best place to branch off from the old history.  Without
    timelines this process would soon generate an unmanageable mess.  With
    timelines, you can recover to <emphasis>any</emphasis> prior state, including
    states in timeline branches that you abandoned earlier.
   </para>

   <para>
    Every time a new timeline is created, <productname>PostgreSQL</productname> creates
    a <quote>timeline history</quote> file that shows which timeline it branched
    off from and when.  These history files are necessary to allow the system
    to pick the right WAL segment files when recovering from an archive that
    contains multiple timelines.  Therefore, they are archived into the WAL
    archive area just like WAL segment files.  The history files are just
    small text files, so it's cheap and appropriate to keep them around
    indefinitely (unlike the segment files which are large).  You can, if
    you like, add comments to a history file to record your own notes about
    how and why this particular timeline was created.  Such comments will be
    especially valuable when you have a thicket of different timelines as
    a result of experimentation.
   </para>

   <para>
    The default behavior of recovery is to recover along the same timeline
    that was current when the base backup was taken.  If you wish to recover
    into some child timeline (that is, you want to return to some state that
    was itself generated after a recovery attempt), you need to specify the
    target timeline ID in <filename>recovery.conf</filename>.  You cannot recover into
    timelines that branched off earlier than the base backup.
   </para>
  </sect2>

  <sect2 id="backup-tips">
   <title>Tips and Examples</title>

   <para>
    Some tips for configuring continuous archiving are given here.
   </para>

    <sect3 id="backup-standalone">
     <title>Standalone hot backups</title>

     <para>
      It is possible to use <productname>PostgreSQL</productname>'s backup facilities to
      produce standalone hot backups. These are backups that cannot be used
      for point-in-time recovery, yet are typically much faster to backup and
      restore than <application>pg_dump</application> dumps.  (They are also much larger
      than <application>pg_dump</application> dumps, so in some cases the speed advantage
      might be negated.)
     </para>

     <para>
      To prepare for standalone hot backups, set <varname>wal_level</varname> to
      <literal>archive</literal> (or <literal>hot_standby</literal>), <varname>archive_mode</varname> to
      <literal>on</literal>, and set up an <varname>archive_command</varname> that performs
      archiving only when a <emphasis>switch file</emphasis> exists.  For example:
<programlisting>
archive_command = 'test ! -f /var/lib/pgsql/backup_in_progress || cp -i %p /var/lib/pgsql/archive/%f &lt; /dev/null'
</programlisting>
      This command will perform archiving when
      <filename>/var/lib/pgsql/backup_in_progress</filename> exists, and otherwise
      silently return zero exit status (allowing <productname>PostgreSQL</productname>
      to recycle the unwanted WAL file).
     </para>

     <para>
      With this preparation, a backup can be taken using a script like the
      following:
<programlisting>
touch /var/lib/pgsql/backup_in_progress
psql -c "select pg_start_backup('hot_backup');"
tar -cf /var/lib/pgsql/backup.tar /var/lib/pgsql/data/
psql -c "select pg_stop_backup();"
rm /var/lib/pgsql/backup_in_progress
tar -rf /var/lib/pgsql/backup.tar /var/lib/pgsql/archive/
</programlisting>
      The switch file <filename>/var/lib/pgsql/backup_in_progress</filename> is
      created first, enabling archiving of completed WAL files to occur.
      After the backup the switch file is removed. Archived WAL files are
      then added to the backup so that both base backup and all required
      WAL files are part of the same <application>tar</application> file.
      Please remember to add error handling to your backup scripts.
     </para>

     <para>
      If archive storage size is a concern, use <application>pg_compresslog</application>,
      <ulink url="http://pglesslog.projects.postgresql.org"></ulink>, to
      remove unnecessary <xref linkend="guc-full-page-writes"/> and trailing
      space from the WAL files.  You can then use
      <application>gzip</application> to further compress the output of
      <application>pg_compresslog</application>:
<programlisting>
archive_command = 'pg_compresslog %p - | gzip &gt; /var/lib/pgsql/archive/%f'
</programlisting>
      You will then need to use <application>gunzip</application> and
      <application>pg_decompresslog</application> during recovery:
<programlisting>
restore_command = 'gunzip &lt; /mnt/server/archivedir/%f | pg_decompresslog - %p'
</programlisting>
     </para>
    </sect3>

    <sect3 id="backup-scripts">
     <title><varname>archive_command</varname> scripts</title>

     <para>
      Many people choose to use scripts to define their
      <varname>archive_command</varname>, so that their
      <filename>postgresql.conf</filename> entry looks very simple:
<programlisting>
archive_command = 'local_backup_script.sh'
</programlisting>
      Using a separate script file is advisable any time you want to use
      more than a single command in the archiving process.
      This allows all complexity to be managed within the script, which
      can be written in a popular scripting language such as
      <application>bash</application> or <application>perl</application>.
      Any messages written to <literal>stderr</literal> from the script will appear
      in the database server log, allowing complex configurations to be
      diagnosed easily if they fail.
     </para>

     <para>
      Examples of requirements that might be solved within a script include:
      <itemizedlist>
       <listitem>
        <para>
         Copying data to secure off-site data storage
        </para>
       </listitem>
       <listitem>
        <para>
         Batching WAL files so that they are transferred every three hours,
         rather than one at a time
        </para>
       </listitem>
       <listitem>
        <para>
         Interfacing with other backup and recovery software
        </para>
       </listitem>
       <listitem>
        <para>
         Interfacing with monitoring software to report errors
        </para>
       </listitem>
      </itemizedlist>
     </para>
    </sect3>
  </sect2>

  <sect2 id="continuous-archiving-caveats">
   <title>Caveats</title>

   <para>
    At this writing, there are several limitations of the continuous archiving
    technique.  These will probably be fixed in future releases:

  <itemizedlist>
   <listitem>
    <para>
     Operations on hash indexes are not presently WAL-logged, so
     replay will not update these indexes.  This will mean that any new inserts
     will be ignored by the index, updated rows will apparently disappear and
     deleted rows will still retain pointers. In other words, if you modify a
     table with a hash index on it then you will get incorrect query results
     on a standby server.  When recovery completes it is recommended that you
     manually <xref linkend="sql-reindex"/>
     each such index after completing a recovery operation.
    </para>
   </listitem>

   <listitem>
    <para>
     If a <xref linkend="sql-createdatabase"/>
     command is executed while a base backup is being taken, and then
     the template database that the <command>CREATE DATABASE</command> copied
     is modified while the base backup is still in progress, it is
     possible that recovery will cause those modifications to be
     propagated into the created database as well.  This is of course
     undesirable.  To avoid this risk, it is best not to modify any
     template databases while taking a base backup.
    </para>
   </listitem>

   <listitem>
    <para>
     <xref linkend="sql-createtablespace"/>
     commands are WAL-logged with the literal absolute path, and will
     therefore be replayed as tablespace creations with the same
     absolute path.  This might be undesirable if the log is being
     replayed on a different machine.  It can be dangerous even if the
     log is being replayed on the same machine, but into a new data
     directory: the replay will still overwrite the contents of the
     original tablespace.  To avoid potential gotchas of this sort,
     the best practice is to take a new base backup after creating or
     dropping tablespaces.
    </para>
   </listitem>
  </itemizedlist>
   </para>

   <para>
    It should also be noted that the default <acronym>WAL</acronym>
    format is fairly bulky since it includes many disk page snapshots.
    These page snapshots are designed to support crash recovery, since
    we might need to fix partially-written disk pages.  Depending on
    your system hardware and software, the risk of partial writes might
    be small enough to ignore, in which case you can significantly
    reduce the total volume of archived logs by turning off page
    snapshots using the <xref linkend="guc-full-page-writes"/>
    parameter.  (Read the notes and warnings in <xref linkend="wal"/>
    before you do so.)  Turning off page snapshots does not prevent
    use of the logs for PITR operations.  An area for future
    development is to compress archived WAL data by removing
    unnecessary page copies even when <varname>full_page_writes</varname> is
    on.  In the meantime, administrators might wish to reduce the number
    of page snapshots included in WAL by increasing the checkpoint
    interval parameters as much as feasible.
   </para>
  </sect2>
 </sect1>

 <sect1 id="migration">
  <title>Migration Between Releases</title>

  <indexterm zone="migration">
   <primary>upgrading</primary>
  </indexterm>

  <indexterm zone="migration">
   <primary>version</primary>
   <secondary>compatibility</secondary>
  </indexterm>

  <para>
   This section discusses how to migrate your database data from one
   <productname>PostgreSQL</productname> release to a newer one.
   The software installation procedure <foreignphrase>per se</foreignphrase> is not the
   subject of this section; those details are in <xref linkend="installation"/>.
  </para>

  <para>
   <productname>PostgreSQL</productname> major versions are represented by the
   first two digit groups of the version number, e.g., 8.4.
   <productname>PostgreSQL</productname> minor versions are represented by the
   third group of version digits, e.g., 8.4.2 is the second minor
   release of 8.4.  Minor releases never change the internal storage
   format and are always compatible with earlier and later minor
   releases of the same major version number, e.g., 8.4.2 is compatible
   with 8.4, 8.4.1 and 8.4.6.  To update between compatible versions,
   you simply replace the executables while the server is down and
   restart the server.  The data directory remains unchanged &mdash;
   minor upgrades are that simple.
  </para>

  <para>
   For <emphasis>major</emphasis> releases of <productname>PostgreSQL</productname>, the
   internal data storage format is subject to change, thus complicating
   upgrades.  The traditional method for moving data to a new major version
   is to dump and reload the database.  Other, less-well-tested possibilities
   are available, as discussed below.
  </para>

  <para>
   New major versions also typically introduce some user-visible
   incompatibilities, so application programming changes may be required.
   Cautious users will want to test their client applications on the new
   version before switching over fully; therefore, it's often a good idea to
   set up concurrent installations of old and new versions.  When
   testing a <productname>PostgreSQL</productname> major upgrade, consider the
   following categories of possible changes:
  </para>

  <variablelist>

   <varlistentry>
    <term>Administration</term>
    <listitem>
     <para>
      The capabilities available for administrators to monitor and control
      the server often change and improve in each major release.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>SQL</term>
    <listitem>
     <para>
      Typically this includes new SQL command capabilities and not changes
      in behavior, unless specifically mentioned in the release notes.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Library API</term>
    <listitem>
     <para>
      Typically libraries like <application>libpq</application> only add new
      functionality, again unless mentioned in the release notes.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>System Catalogs</term>
    <listitem>
     <para>
      System catalog changes usually only affect database management tools.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Server C-language API</term>
    <listitem>
     <para>
      This involves changes in the backend function API, which is written
      in the C programming language.  Such changes affect code that
      references backend functions deep inside the server.
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

  <sect2 id="migration-methods-pgdump">
   <title>Migrating data via <application>pg_dump</application></title>

  <para>
   To dump data from one major version of <productname>PostgreSQL</productname> and
   reload it in another, you must use <application>pg_dump</application>; file system
   level backup methods will not work. (There are checks in place that prevent
   you from using a data directory with an incompatible version of
   <productname>PostgreSQL</productname>, so no great harm can be done by
   trying to start the wrong server version on a data directory.)
  </para>

  <para>
   It is recommended that you use the <application>pg_dump</application> and
   <application>pg_dumpall</application> programs from the newer version of
   <productname>PostgreSQL</productname>, to take advantage of enhancements
   that might have been made in these programs.  Current releases of the
   dump programs can read data from any server version back to 7.0.
  </para>

  <para>
   The least downtime can be achieved by installing the new server in
   a different directory and running both the old and the new servers
   in parallel, on different ports. Then you can use something like:

<programlisting>
pg_dumpall -p 5432 | psql -d postgres -p 6543
</programlisting>

   to transfer your data.  Or you can use an intermediate file if you wish.
   Then you can shut down the old server and start the new server using
   the port the old one was running on. You should make sure that the
   old database is not updated after you begin to run
   <application>pg_dumpall</application>, otherwise you will lose those updates. See
   <xref linkend="client-authentication"/> for information on how to prohibit
   access.
  </para>

  <para>
   If you cannot or do not want to run two servers in parallel, you can
   do the backup step before installing the new version, bring down
   the old server, move the old version out of the way, install the new
   version, start the new server, and restore the data. For example:

<programlisting>
pg_dumpall &gt; backup
pg_ctl stop
mv /usr/local/pgsql /usr/local/pgsql.old
# Rename any tablespace directories as well
cd ~/postgresql-&version;
gmake install
initdb -D /usr/local/pgsql/data
postgres -D /usr/local/pgsql/data
psql -f backup postgres
</programlisting>

   See <xref linkend="runtime"/> about ways to start and stop the
   server and other details. The installation instructions will advise
   you of strategic places to perform these steps.
  </para>

  <note>
   <para>
    When you <quote>move the old installation out of the way</quote>
    it might no longer be perfectly usable. Some of the executable programs
    contain absolute paths to various installed programs and data files.
    This is usually not a big problem, but if you plan on using two
    installations in parallel for a while you should assign them
    different installation directories at build time.  (This problem
    is rectified in <productname>PostgreSQL</productname> version 8.0 and later, so long
    as you move all subdirectories containing installed files together;
    for example if <filename>/usr/local/postgres/bin/</filename> goes to
    <filename>/usr/local/postgres.old/bin/</filename>, then
    <filename>/usr/local/postgres/share/</filename> must go to
    <filename>/usr/local/postgres.old/share/</filename>.  In pre-8.0 releases
    moving an installation like this will not work.)
   </para>
  </note>
  </sect2>

  <sect2 id="migration-methods-other">
   <title>Other data migration methods</title>

  <para>
   The <filename>contrib</filename> program
   <link linkend="pgupgrade"><application>pg_upgrade</application></link>
   allows an installation to be migrated in-place from one major
   <productname>PostgreSQL</productname> version to the next.  Keep in mind that this
   method does not provide any scope for running old and new versions
   concurrently.  Also, <application>pg_upgrade</application> is much less
   battle-tested than <application>pg_dump</application>, so having an
   up-to-date backup is strongly recommended in case something goes wrong.
  </para>

  <para>
   It is also possible to use certain replication methods, such as
   <productname>Slony</productname>, to create a standby server with the updated version of
   <productname>PostgreSQL</productname>.  The standby can be on the same computer or
   a different computer.  Once it has synced up with the master server
   (running the older version of <productname>PostgreSQL</productname>), you can
   switch masters and make the standby the master and shut down the older
   database instance.  Such a switch-over results in only several seconds
   of downtime for an upgrade.
  </para>

  </sect2>
 </sect1>
</chapter>
