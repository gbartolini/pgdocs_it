<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

<sect1 id="arrays">
 <title>Array</title>

 <indexterm>
  <primary>array</primary>
 </indexterm>

 <para>
  <productname>PostgreSQL</productname> consente che le colonne di una
  tabella siano definite come array multidimensionali a lunghezza variabile.
  Si possono creare array incorporati o definiti dall'utente, di tipo enum
  o di tipo composto.
  Gli array di dominio non sono finora gestiti. 
 </para>

 <sect2 id="arrays-declaration">
  <title>Dichiarare i tipi Array</title>

  <indexterm>
   <primary>array</primary>
   <secondary>dichiarazione</secondary>
  </indexterm>

 <para>
  Per spiegare l'uso dei tipi array, creare questa tabella:
<programlisting>
CREATE TABLE sal_emp (
    name            text,
    pay_by_quarter  integer[],
    schedule        text[][]
);
</programlisting>
  Come mostrato, un tipo dato array viene creato aggiungendo parentesi quadre
  (<literal>[]</literal>) al nome del tipo di dato degli elementi dell'array. Il comando
  mostrato sopra crea una tabella chiamata
  <structname>sal_emp</structname> con una colonna di tipo
  <type>text</type> (<structfield>name</structfield>), un
  array di tipo unidimensionale <type>integer</type>
  (<structfield>pay_by_quarter</structfield>), che rappresenta il
  salario trimestrale del dipendente, e un array a due dimensioni di tipo
  <type>text</type> (<structfield>schedule</structfield>), che
  rappresenta il piano di lavoro settimanale dell'impiegato.
  
 </para>

 <para>
  La sintassi di <command>CREATE TABLE</command> consente di specificare
  la dimensione esatta dell'array, per esempio:

<programlisting>
CREATE TABLE tictactoe (
    squares   integer[3][3]
);
</programlisting>

  Tuttavia, l'implementazione corrente non impone il rispetto dei limiti di
  dimensione dell'array &mdash; il comportamento è identico 
  agli array di lunghezza non specificata.
 </para>

 <para>
  L'implementazione corrente non impone di dichiarare neanche
  il numero delle dimensioni. Gli array di un particolare tipo di elemento sono tutti
  considerati essere dello stesso tipo, senza tener conto della dimensione o del numero
  di dimensioni. Per cui, dichiarare il numero di dimensioni o il formato in
  <command>CREATE TABLE</command> è semplice documentazione, in quanto ciò non
  influisce sul comportamento al momento dell'esecuzione.
 </para>

 <para>
  Una sintassi alternativa, conforme allo standard SQL, può 
  essere usata per gli array unidimensionali.
  <structfield>pay_by_quarter</structfield> potrebbe essere definito
  come:
<programlisting>
    pay_by_quarter  integer ARRAY[4],
</programlisting>
    Oppure, se non viene specificata la dimesione dell'array:
<programlisting>
    pay_by_quarter  integer ARRAY,
</programlisting>
  Come prima, tuttavia, <productname>PostgreSQL</productname> non impone restrizioni di dimensione in nessun caso.
 </para>
 </sect2>

 <sect2 id="arrays-input">
  <title>Inserimento di valori negli Array</title>

  <indexterm>
   <primary>array</primary>
   <secondary>costante</secondary>
  </indexterm>

  <para>
   Per scrivere un valore di array come una costante letterale, racchiudere i valori
   degli elementi tra parentesi graffe separarati da virgole. (Se si conosce
   il C, questo non è dissimile alla sintassi del C per l'inizializzazione delle
   strutture). Potete inserire doppi apici intorno ad ogni valore dell'elemento,
   dovrete farlo se esso contiene virgole o parentesi graffe. (Maggiori
   dettagli appaiono sotto). Quindi, il formato generale di una costante array
   è il seguente:
   
<synopsis>
'{ <replaceable>val1</replaceable> <replaceable>delim</replaceable> <replaceable>val2</replaceable> <replaceable>delim</replaceable> ... }'
</synopsis>

   dove <replaceable>delim</replaceable> è il carattere di delimitazione
   per il tipo, come registrato nelle sua voce <literal>pg_type</literal>.
   Tra i tipi dati standard forniti nella distribuzione
   <productname>PostgreSQL</productname>, il tipo
   <literal>box</literal> usa una punto e virgola (<literal>;</literal>) ma tutti gli altri
   usano la virgola (<literal>,</literal>). Ogni <replaceable>val</replaceable> può
   essere una costante di tipo elemento dell'array, o un subarray. Un esempio
   di una costante array è:

<programlisting>
'{{1,2,3},{4,5,6},{7,8,9}}'
</programlisting>
   Questa costante è un array bidimensionale 3-per-3, consistente in
   tre subarray di interi.
  </para>

  <para>
   Per impostare una elemento di un array a NULL, scrivere <literal>NULL</literal>
   come valore dell'elemento. (Sia i caratteri maiuscoli che i minuscoli vanno bene
   per <literal>NULL</literal>). Se si vuole un effettivo valore di stringa
   <quote>NULL</quote>, bisogna racchiuderlo tra doppi apici.
   
  </para>

  <para>
   (Questi tipi di array costanti sono attualmente solo un caso speciale delle
   costanti di tipo generico discusse in <xref
   linkend="sql-syntax-constants-generic" />. La costante viene inizialmente
   trattata come una stringa e passata poi all'input della routine di conversione 
   array. Potrebbe essere necessario specificare esplicitamente il tipo).
   
  </para>

  <para>
   Si possono ora vedere alcuni comandi <command>INSERT</command>:

<programlisting>
INSERT INTO sal_emp
    VALUES ('Bill',
    '{10000, 10000, 10000, 10000}',
    '{{"meeting", "lunch"}, {"training", "presentation"}}');

INSERT INTO sal_emp
    VALUES ('Carol',
    '{20000, 25000, 25000, 25000}',
    '{{"breakfast", "consulting"}, {"meeting", "lunch"}}');
</programlisting>
  </para>

 <para>
  Il risultato dei precedenti due inserimenti sarà simile a questo:

<programlisting>
SELECT * FROM sal_emp;
 name  |      pay_by_quarter       |                 schedule
-------+---------------------------+-------------------------------------------
 Bill  | {10000,10000,10000,10000} | {{meeting,lunch},{training,presentation}}
 Carol | {20000,25000,25000,25000} | {{breakfast,consulting},{meeting,lunch}}
(2 rows)
</programlisting>
 </para>

 <para>
    Gli array multidimansionali devono avere corrispondenti intervalli per ogni
    dimensione. Una non-corrispondenza causa un errore, per esempio:

<programlisting>
INSERT INTO sal_emp
    VALUES ('Bill',
    '{10000, 10000, 10000, 10000}',
    '{{"meeting", "lunch"}, {"meeting"}}');
ERROR:  multidimensional arrays must have array expressions with matching dimensions
</programlisting>
 </para>

 <para>
  Si può anche utilizzare la sintassi del costruttore di <literal>ARRAY</literal>:
<programlisting>
INSERT INTO sal_emp
    VALUES ('Bill',
    ARRAY[10000, 10000, 10000, 10000],
    ARRAY[['meeting', 'lunch'], ['training', 'presentation']]);

INSERT INTO sal_emp
    VALUES ('Carol',
    ARRAY[20000, 25000, 25000, 25000],
    ARRAY[['breakfast', 'consulting'], ['meeting', 'lunch']]);
</programlisting>
  Notare che gli elementi degli array sono normali costanti SQL o
  espressioni; per esempio, i caratteri sono racchiusi tra singoli apici, invece dei
  doppi apici. La sintassi del costruttore
  di <literal>ARRAY</literal> viene discussa con maggiori dettagli in
  <xref linkend="sql-syntax-array-constructors" />.
  
 </para>
 </sect2>

 <sect2 id="arrays-accessing">
  <title>Accedere agli array</title>

  <indexterm>
   <primary>array</primary>
   <secondary>accedere</secondary>
  </indexterm>

 <para>
  Si possono ora eseguire alcune query sulla tabella.
  Prima, si vedrà come accedere ad un singolo elemento di array alla volta.
  Questa query richiama i nomi degli impiegati la cui paga è stata
  cambiata nel secondo trimestre:
     
<programlisting>
SELECT name FROM sal_emp WHERE pay_by_quarter[1] &lt;&gt; pay_by_quarter[2];

 name
-------
 Carol
(1 row)
</programlisting>

  I numeri di indice dell'array sono scritti tra parentesi quadre.
  Come impostazione predefinita <productname>PostgreSQL</productname> usa per
  gli array la convenzione di numerazione basata su uno, cioè:
  un array di <replaceable>n</replaceable> elementi che cominciano con <literal>array[1]</literal> e
  terminano con <literal>array[<replaceable>n</replaceable>]</literal>.
</para>  

 <para>
  Questa query richiama la paga del terzo trimestre di tutti gli impiegati:

<programlisting>
SELECT pay_by_quarter[3] FROM sal_emp;

 pay_by_quarter
----------------
          10000
          25000
(2 rows)
</programlisting>
 </para>

 <para>
  Si può anche accedere ad una parte rettangolare di un array, o di un
  sotto-array. Una parte di array è denotata scrivendo
  <literal><replaceable>limite-inferiore</replaceable>:<replaceable>limite-superiore</replaceable></literal>
  per una o più dimensioni dell'array. Per esempio, questa query richiama il primo
  elemento del piano di lavoro di Bill per i primi due giorni della settimana:
  

<programlisting>
SELECT schedule[1:2][1:1] FROM sal_emp WHERE name = 'Bill';

        schedule
------------------------
 {{meeting},{training}}
(1 row)
</programlisting>

  Se una dimesione è scritta come una parte, cioè contiene un due punti,
  allora tutte le dimensioni vengono trattate come una parte. Ogni dimesione che ha un solo
  numero (senza due punti) viene trattata come se andasse da  <literal>1</literal>
  al numero specificato. Per esempio, <literal>[2]</literal> viene trattato come se fosse
  scritto <literal>[1:2]</literal>, come in questo esempio:
  

<programlisting>
SELECT schedule[1:2][2] FROM sal_emp WHERE name = 'Bill';

                 schedule
-------------------------------------------
 {{meeting,lunch},{training,presentation}}
(1 row)
</programlisting>

    Per evitare confusione, è meglio usare la sintassi di intervallo per tutte le dimensioni, ad es. 
    <literal>[1:2][1:1]</literal>, non <literal>[2][1:1]</literal>.
 </para>

 <para>
  Un espressione di indice di array restituirà null se lo stesso array o
  una delle espressioni di indice è null. Viene restituito null anche se,
  un indice è fuori dei limiti dell'array (questo caso non genera un errore).
  Per esempio se  <literal>schedule</literal>
  avesse le dimensioni <literal>[1:3][1:2]</literal> il riferimento
  <literal>schedule[3][3]</literal> produrrebbe NULL. Similmente, un riferimento di array
  con il numero di indici errato produrrebbe un null anzichè un errore.
  
 </para>

 <para>
  Un espressione di una parte di array produce similmente null se l'array stesso o
  una delle espressioni di indice è null. Tuttavia, in altri casi,
  come la selezione di una parte di array che
  è completamente al di fuori dei limiti correnti dell'array, 
  un'espressione di parte dell'array produrrà un array vuoto (di dimensione uguale a 0) invece di null.
  Se la parte richiesta sovrappone parzialmente i limiti dell'array, essa viene
  automaticamente ridotta alla sola regione di sovrapposizione invece di ritornare null.
  
 </para>

 <para>
  Le dimensioni correnti di ogni valore dell'array possono essere recuperate con la
  funzione <function>array_dims</function>:

<programlisting>
SELECT array_dims(schedule) FROM sal_emp WHERE name = 'Carol';

 array_dims
------------
 [1:2][1:2]
(1 row)
</programlisting>

  Il risultato prodotto da <function>array_dims</function> è di tipo <type>text</type>,
  che è conveniente per le persone che lo leggono ma forse non è altrettanto
  conveniente per i programmi. Le dimensioni possono anche essere recuperate con
  <function>array_upper</function> e con <function>array_lower</function>, che
  restituiscono, rispettivamente, i limiti superiore e inferiore di una specificata
  dimensione dell'array:
  

<programlisting>
SELECT array_upper(schedule, 1) FROM sal_emp WHERE name = 'Carol';

 array_upper
-------------
           2
(1 row)
</programlisting>

    <function>array_length</function> ritornerà la lunghezza di una specificata dimensione di un array:

<programlisting>
SELECT array_length(schedule, 1) FROM sal_emp WHERE name = 'Carol';

 array_length
--------------
            2
(1 row)
</programlisting>
 </para>
 </sect2>

 <sect2 id="arrays-modifying">
  <title>Modificare gli Array</title>

  <indexterm>
   <primary>array</primary>
   <secondary>modificare</secondary>
  </indexterm>

 <para>
    Un valore di array può essere sostituito completamente:

<programlisting>
UPDATE sal_emp SET pay_by_quarter = '{25000,25000,27000,27000}'
    WHERE name = 'Carol';
</programlisting>

  oppure utilizzando la sintassi espressione <literal>ARRAY</literal>:

<programlisting>
UPDATE sal_emp SET pay_by_quarter = ARRAY[25000,25000,27000,27000]
    WHERE name = 'Carol';
</programlisting>

  Un array può anche essere aggiornato in un singolo elemento:

<programlisting>
UPDATE sal_emp SET pay_by_quarter[4] = 15000
    WHERE name = 'Bill';
</programlisting>

  oppure aggiornato in una parte:

<programlisting>
UPDATE sal_emp SET pay_by_quarter[1:2] = '{27000,27000}'
    WHERE name = 'Carol';
</programlisting>

 </para>

 <para>
  Un array memorizzato può essere allargato assegnandogli elementi/o non
  già presenti. Ogni posizione tra quelle precedentemente presenti e gli elementi/o
  ora assegnati sarà riempito con null. Per esempio, se l'array
  <literal>myarray</literal> attualmente ha 4 elementi, esso avrà sei
  elementi, dopo un aggiornamento che assegnerà a <literal>myarray[6]</literal>;
  <literal>myarray[5]</literal> conterrà un null.
  Attualmente, l'allargamento in questo modo è solamente consentito per array
  unidimensionali e non per array multidimensionali.
  
 </para>

 <para>
  L'assegnazione di indici permette la creazione di array che non usano indici
  che partono da 1. Per esempio, si potrebbe assegnare a <literal>myarray[-2:7]</literal> per
  creare un array con valori degli indici che vanno da -2 a 7.
  
 </para>

 <para>
  Nuovi valori di array possono essere costruiti usando gli operatori di concatenazione,
  <literal>||</literal>:
<programlisting>
SELECT ARRAY[1,2] || ARRAY[3,4];
 ?column?
-----------
 {1,2,3,4}
(1 row)

SELECT ARRAY[5,6] || ARRAY[[1,2],[3,4]];
      ?column?
---------------------
 {{5,6},{1,2},{3,4}}
(1 row)
</programlisting>
 </para>

 <para>
  
    L'operatore di concatenazione consente ad un singolo elemento di essere spinto
  all'inizio o alla fine di un array unidimensionale. Esso accetta anche due
  array <replaceable>N</replaceable>-dimensionali, o un array <replaceable>N</replaceable>-dimensionale
  e uno <replaceable>N+1</replaceable>-dimensionale.
 </para>

 <para>
  Quando un singolo elemento viene spinto all'inizio o alla fine di un array
  unidimensionale, il risultato è un array con lo stesso limite inferiore
  di indice dell'operatore dell'array. Per esempio:
  
<programlisting>
SELECT array_dims(1 || '[0:1]={2,3}'::int[]);
 array_dims
------------
 [0:2]
(1 row)

SELECT array_dims(ARRAY[1,2] || 3);
 array_dims
------------
 [1:3]
(1 row)
</programlisting>
 </para>

 <para>
  Quando due array con un uguale numero di dimensioni vengono concatenati, il risultato
  mantiene il limite inferiore della dimensione esterna dell'operatore di sinistra. 
  Il risultato &egrave; un array comprendente ogni elemento dell'operando
  di sinistra seguito da ogni elemento dell'operando di destra. Per esempio:
  
<programlisting>
SELECT array_dims(ARRAY[1,2] || ARRAY[3,4,5]);
 array_dims
------------
 [1:5]
(1 row)

SELECT array_dims(ARRAY[[1,2],[3,4]] || ARRAY[[5,6],[7,8],[9,0]]);
 array_dims
------------
 [1:5][1:2]
(1 row)
</programlisting>
 </para>

 <para>
  Quando un array <replaceable>N</replaceable>-dimensionale viene spinto all'inizio o
  alla fine di un array <replaceable>N+1</replaceable>-dimensionale, il risultato è
  identico al caso visto sopra. Ogni sotto-array <replaceable>N</replaceable>-dimensionale
  è un elemento dell'array di dimensione esterna <replaceable>N+1</replaceable>-dimensionale.
  per esempio:

<programlisting>
SELECT array_dims(ARRAY[1,2] || ARRAY[[3,4],[5,6]]);
 array_dims
------------
 [1:3][1:2]
(1 row)
</programlisting>
 </para>

 <para>
  Un array puè essere costruito anche usando le funzioni
  <function>array_prepend</function>, <function>array_append</function>,
  o <function>array_cat</function>. Le prime due supportano solo array
  unidirezionali, ma <function>array_cat</function> supporta array multidimensionali.

  Notare che l'operatore di concatenamento discusso sopra è preferito nell'uso
  diretto di queste funzioni. Infatti, le funzioni esistono principalmente per usare
  nelle implementazioni l'operatore di concatenamento. Tuttavia, esse possono essere
  direttamente utilizzate in creazioni di aggregati definiti dall'utente. Alcuni esempi:


<programlisting>
SELECT array_prepend(1, ARRAY[2,3]);
 array_prepend
---------------
 {1,2,3}
(1 row)

SELECT array_append(ARRAY[1,2], 3);
 array_append
--------------
 {1,2,3}
(1 row)

SELECT array_cat(ARRAY[1,2], ARRAY[3,4]);
 array_cat
-----------
 {1,2,3,4}
(1 row)

SELECT array_cat(ARRAY[[1,2],[3,4]], ARRAY[5,6]);
      array_cat
---------------------
 {{1,2},{3,4},{5,6}}
(1 row)

SELECT array_cat(ARRAY[5,6], ARRAY[[1,2],[3,4]]);
      array_cat
---------------------
 {{5,6},{1,2},{3,4}}
</programlisting>
 </para>
 </sect2>

 <sect2 id="arrays-searching">
  <title>Cercare negli Array</title>

  <indexterm>
   <primary>array</primary>
   <secondary>cercare</secondary>
  </indexterm>

 <para>
  Per ricercare un valore in un array, bisogna controllare ogni valore
  dell'array. Questo può essere fatto a mano, se si conosce la
  dimensione dell'array. Per esempio:

<programlisting>
SELECT * FROM sal_emp WHERE pay_by_quarter[1] = 10000 OR
                            pay_by_quarter[2] = 10000 OR
                            pay_by_quarter[3] = 10000 OR
                            pay_by_quarter[4] = 10000;
</programlisting>

  Tuttavia, questo diventa estremamente noioso per grossi array, e non è
  di grande aiuto se la dimensione dell'array è dubbia. Un metodo alternativo
  è descritto in <xref linkend="functions-comparisons" />. La query vista
  sopra può essere rimpiazzata con:
  

<programlisting>
SELECT * FROM sal_emp WHERE 10000 = ANY (pay_by_quarter);
</programlisting>

  In aggiunta, si potrebbero cercare le righe in cui l'array ha tutti i valori
  uguali a 10000 con:


<programlisting>
SELECT * FROM sal_emp WHERE 10000 = ALL (pay_by_quarter);
</programlisting>

 </para>

 <para>
  In alternativa, può essere usata la funzione <function>generate_subscripts</function>.
  Per esempio:

<programlisting>
SELECT * FROM
   (SELECT pay_by_quarter,
           generate_subscripts(pay_by_quarter, 1) AS s
      FROM sal_emp) AS foo
 WHERE pay_by_quarter[s] = 10000;
</programlisting>

  Questa funzione è descritta in <xref linkend="functions-srf-subscripts"/>.
 </para>

 <tip>
  <para>
   Gli array non sono insiemi; ricerche per uno specifico elemento di array
   possono essere un segno di cattiva progettazione del database. Considerare
   la possibilità di usare una tabella separata con una riga per ogni elemento che 
   sarebbe un elemento dell'array. Questo faciliterà la ricerca, e sarà 
   verosimilmente un miglioramento per grandi numeri di elementi.
   
  </para>
 </tip>
 </sect2>

 <sect2 id="arrays-io">
  <title>Sintassi di input e output degli array</title>

  <indexterm>
   <primary>array</primary>
   <secondary>I/O</secondary>
  </indexterm>

  <para>
   La rappresentazione in testo di un valore di array consiste di elementi che
   sono interpretati secondo le regole di conversione di I/O per il tipo elemento di
   array, più un contorno che indica la struttura dell'array.
   Il contorno consiste di parentesi graffe (<literal>{</literal> e <literal>}</literal>)
   attorno ai valori dell'array più caratteri di delimitazione tra elementi adiacenti.
   Il carattere di delimitazione è normalmente una virgola (<literal>,</literal>) ma può 
   anche essere qualche altro: dipende dall'impostazione di <literal>typdelim</literal> per il 
   tipo elemento di array. (Tra i tipi dati standard forniti nella distribuzione
   <productname>PostgreSQL</productname>, il tipo
   <literal>box</literal> usa punto e virgola (<literal>;</literal>) ma tutti gli altri
   usano la virgola). In un array multidimensionale, ogni dimensione (riga, piano,
   cubo, ecc.) accetta il suo proprio livello di parentesi graffe, ed i delimitatori 
   devono essere scritti tra adiacenti entità parentesi graffe dello stesso livello.
   
  </para>

  <para>
   La routine di output degli array metterà doppi apici intorno ai valori di elementi
   se sono stringhe vuote, se contengono parentesi graffe, caratteri delimitatori,
   doppi apici, barre inverse, o spazi vuoti, o contengono la parola
   <literal>NULL</literal>. Doppi apici e barre inverse incorporate
   dentro valori di elementi saranno preceduti da barre inverse. Per tipi dati numerici
    è sicuro presumere che i doppi apici non compariranno mai, ma per i
   tipi dati testuali bisognerà essere preparati a far fronte alla presenza
   o all'assenza di apici.
   
  </para>

  <para>
   Per impostazione predefinita, il valore dell'indice del limite inferiore della dimensione di un array è
   impostato a uno. Per rappresentare array con altri limiti inferiori, la gamma degli indici dell'array
   deve essere specificata esplicitamente prima di scrivere il
   contenuto dell'array.
   Questo consiste nel contorno di parentesi quadre (<literal>[]</literal>)
   intorno ai limiti inferiore e superiore di dimensione dell'elemento dell'array, con
   un carattere delimitatore due punti (<literal>:</literal>) posto tra di loro. Il
   contorno della dimensione di un array è seguito da un segno uguale (<literal>=</literal>).
   Per esempio:
   
<programlisting>
SELECT f1[1][-2][3] AS e1, f1[1][-1][5] AS e2
 FROM (SELECT '[1:1][-2:-1][3:5]={{{1,2,3},{4,5,6}}}'::int[] AS f1) AS ss;

 e1 | e2
----+----
  1 |  6
(1 row)
</programlisting>
   La routine di output degli array includerà dimensioni esplicite nel suo risultato
   solo quando ci sono uno o più limiti inferiori diversi da uno.
   
  </para>

  <para>
   Se il valore scritto per un elemento è <literal>NULL</literal> (sia maiuscolo
   che minuscolo), l'elemento viene considerato essere NULL. La presenza di apici
   o barre inverse disabilita ciò e consente l'immissione del valore stringa
   <quote>NULL</quote>. Inoltre, per la compatibilità all'indietro con la
   la versione precedente la 8.2 di <productname>PostgreSQL</productname>, il parametro di
   configurazione <xref linkend="guc-array-nulls" /> può essere messo a
   <literal>off</literal> per sopprimere l'identificazione di <literal>NULL</literal> come un NULL.
   
  </para>

  <para>
   Come visto precedentemente, quando si scrive un valore di array si possono usare i doppi
   apici intorno ad ogni individuale elemento dell'array. <emphasis>Bisogna</emphasis> fare così
   se il valore dell'elemento può confondere l'analizzatore di valori dell'array.
   In particolare, elementi contenenti parentesi graffe, virgole (o qualsiasi delimitatore
   di caratteri), doppi apici, barre inverse, o spazi bianchi in testa o in coda
   devono essere racchiusi tra doppi apici. Anche le stringhe vuote e le stringhe che contengono la
   parola <literal>NULL</literal> devono essere racchiuse tra apici. Per inserire un doppio apice o
   una barra inversa in un valore di elemento di array racchiuso tra apici, usare la sintassi di
   escape delle stringhe e precederli con una barra inversa. In alternativa, si può usare
   la barra inversa di escape per proteggere tutti i caratteri che sarebbero altrimenti
   presi per sintassi di array.
   
  </para>

  <para>
   Si possono scrivere spazi bianchi prima della parentesi graffa di sinistra o dopo quella di
   destra. Si possono anche scrivere spazi bianchi prima o dopo ogni individuale elemento
   stringa. In tutti questi casi gli spazi bianchi saranno ignorati. Tuttavia,
   spazi bianchi dentro elementi racchiusi tra doppi apici, o attorniati in ambedue i lati da
   caratteri di un elemento diversi da spazi bianchi, non saranno ignorati.
   
  </para>

 <note>
  <para>
   Ricordarsi che ciò che si scrive in un comando sql sarà prima interpretato
   come una stringa, e dopo come un array. Questo raddoppia il numero di
   barre inverse necessarie. Per esempio, per inserire un valore di array di tipo <type>text</type>
   contenente una barra inversa e un doppio apice, bisognerà scrivere:
   
<programlisting>
INSERT ... VALUES (E'{"\\\\","\\""}');
</programlisting>
    Il processore di stringhe di escape rimuove un livello di barre inverse, per cui ciò che
   arriverà all'analizzatore di valori array sarà questo <literal>{"\\","\""}</literal>.
   Per cui, le stringhe che alimentano la routine di entrata del tipo di dati <type>text</type>
   saranno rispettivamente <literal>\</literal> e <literal>"</literal>. (Se si stesse lavorando
   con tipi di dato le cui routine di input trattano specialmente anche le barre inverse,
   per esempio <type>bytea</type>, potrebbero essere necessarie ben otto barre inverse
   nel comando per inserire una barra inversa nell'elemento di array memorizzato).
   La quotazione con dollaro (vedere <xref linkend="sql-syntax-dollar-quoting" />) può
   essere usata per evitare la necessità di raddoppiare le barre inverse.
  </para>
 </note>

 <tip>
  <para>
   La sintassi del costruttore di <literal>ARRAY</literal>  (vedere
   <xref linkend="sql-syntax-array-constructors" />) è spesso più facile
   da usare quando si scrivono valori di array
   nei comandi SQL. Negli <literal>ARRAY</literal>, i valori degli elementi individuali vengono scritti
   nello stesso modo in cui sarebbero scritti se non fossero membri di un array.
   
  </para>
 </tip>
 </sect2>

</sect1>
