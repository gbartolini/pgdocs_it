<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

<chapter id="plpython">
 <title>PL/Python - linguaggio procedurale python</title>

 <indexterm zone="plpython"><primary>PL/Python</primary></indexterm>
 <indexterm zone="plpython"><primary>Python</primary></indexterm>

 <para>
Il linguaggio procedurale <application>PL/Python</application> permette
di scrivere funzioni <productname>PostgreSQL</productname> in 
<ulink url="http://www.python.org">linguaggio Python</ulink>.
 </para>

 <para>
Per installare PL/Python in un particolare database, usare 
<literal>createlang plpythonu <replaceable>dbname</replaceable></literal> (ma
si veda anche <xref linkend="plpython-python23"/>).
 </para>

  <tip>
   <para>
Se un linguaggio è installato in <literal>template1</literal>, tutti i database 
creati successivamente avranno il linguaggio installato automaticamente.
   </para>
  </tip>

 <para>
Da <productname>PostgreSQL</productname> 7.4, PL/Python è disponibile solo come 
linguaggio <quote>untrusted</quote>, che significa che non offre 
nessun modo di restringere quello che gli utenti possono farci. È quindi stato rinominato
in <literal>plpythonu</literal>.  La variante trusted di <literal>plpython</literal>
potrebbe diventare disponibile in futuro, 
e un nuovo meccanismo sicuro di esecuzione è sviluppato in Python. Chi scrive  
una funzione in PL/Python untrusted deve fare attenzione che la funzione 
non possa essere usata per fare niente di non voluto, dato che sarà
capace di fare qualsiasi cosa che può essere fatta da un utente loggato come
amministratore del database. Solo i superutenti possono creare funzioni in 
linguaggi untrusted tipo <literal>plpythonu</literal>.
 </para>

 <note>
  <para>
Specialmente gli utenti dei pacchetti sorgente devono abilitare la 
compilazione di PL/Python durante il processo di installazione. (Fare riferimento 
alle istruzioni di installazione per maggiori informazioni). Gli utenti dei pacchetti binari
potrebbero trovare PL/Python in un pacchetto separato. 
  </para>
 </note>

 <sect1 id="plpython-python23">
  <title>Python 2 vs. Python 3</title>

  <para>
PL/Python supporta le varianti del linguaggio Python 2 e Python 3.
(Le istruzioni di installazione di PostgreSQL potrebbero contenere
informazioni più precise sulle versioni minori di Python supportate).
Dato che le varianti di linguaggio  Python 2 e Python 3 sono incompatibili 
in alcuni aspetti importanti, il seguente schema di nomenclatura e transizione 
viene usato da PL/Python per evitare di mischiarli:

   <itemizedlist>
    <listitem>
     <para>
Il linguaggio PostgreSQL chiamato <literal>plpython2u</literal>
implementa  PL/Python basato sulla variante Python 2 del linguaggio.
     </para>
    </listitem>

    <listitem>
     <para>
Il linguaggio PostgreSQL chiamato <literal>plpython3u</literal>
implementa PL/Python basato sulla variante Python 3 del linguaggio.
     </para>
    </listitem>

    <listitem>
     <para>
Il linguaggio chiamato <literal>plpythonu</literal> implementa 
PL/Python basato sulla variante predefinita del linguaggio Python, che è
correntemente Python 2. (Questo è indipendente da quello che qualsiasi installazione locale di Python   
potrebbe considerare come 
proprio <quote>predefinito</quote>, per esempio, 
quello che potrebbe essere <filename>/usr/bin/python</filename>). Il valore predefinito
sarà probabilmente cambiato in Python 3 in una versione futura di PostgreSQL,
in dipendenza dei progressi della migrazione a Python 3 nella 
comunità Python.
     </para>
    </listitem>
   </itemizedlist>

Dipende dalla configurazione di compilazione o dai pacchetti installati se 
PL/Python per Python 2 o Python 3 o entrambi è disponibile.
  </para>

  <tip>
   <para>
La variante compilata dipende da quale versione di Python è stata trovata 
durante l'installazione o quale versione è stata esplicitamente impostata usando
la variabile d'ambiente <envar>PYTHON</envar>;
si veda <xref linkend="install-procedure"/>.  Per rendere disponibili entrambe le 
varianti di PL/Python in una installazione, il sorgente deve essere configurato e compilato
due volte.
   </para>
  </tip>

  <para>
Questo risulta nella seguente strategia si utilizzo e migrazione:

   <itemizedlist>
    <listitem>
     <para>
Utenti esistenti che non sono attualmente interessati a Python 3
usino il nome di linguaggio <literal>plpythonu</literal> e 
non dovranno cambiare niente nell'immediato futuro. È raccomandato 
gradualmente <quote>testare il futuro</quote> del codice 
migrando a Python 2.6/2.7 per semplificare l'eventuale migrazione 
a Python 3.
     </para>

     <para>
In pratica, molte funzioni PL/Python migreranno a Python 3
con pochi o nessun cambiamento.
     </para>
    </listitem>

    <listitem>
     <para>
Utenti che sanno di avere codice fortemente dipendente da Python 2
e non hanno intenzione ci cambiarlo possono usare il nome di linguaggio
<literal>plpython2u</literal>. Questo continuerà
a funzionare in un futuro remoto, finchè il support a  Python 2 
potrebbe essere completamente eliminato da PostgreSQL.
     </para>
    </listitem>

    <listitem>
     <para>
Gli utenti che vogliono tuffarsi in Python 3 possono usare 
il nome di linguaggio <literal>plpython3u</literal>, che continuerà a funzionare 
per sempre per gli standard di oggi. In un futuro remoto
quando Python 3 potrebbe diventare predefinito, potrebbero voler 
rimuovere il <quote>3</quote> per ragioni estetiche.
     </para>
    </listitem>

    <listitem>
     <para>
I temerari che vogliono compilare un ambiente che supporta solo Python 3,
possono cambiare gli script di compilazione per rendere 
<literal>plpythonu</literal> equivalente 
a <literal>plpython3u</literal>, tenendo a mente che questo 
renderebbe la loro installazione incompatibile con la maggior parte 
del resto del mondo. 
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
Vedere anche il 
documento <ulink url="http://docs.python.org/py3k/whatsnew/3.0.html">New 
In Python 3.0</ulink> per maggiori informazioni sul porting a 
Python 3.
  </para>

  <para>
Non è permesso usare PL/Python basato su Python 2 e Pl/Python 
basato su Python 3 nella stessa sessione, dato che i simboli nei moduli dinamici 
andrebbero in conflitto, che potrebbero risultare in crash del processo 
server PostgreSQL. C'è un controllo che previene il mescolamento 
di versioni di Python in una sessione, che annullerà la sessione se 
viene riscontrato un conflitto. È possibile, comunque, usare entrambe le varianti 
PL/Python nello stesso database, da sessioni separate.
  </para>
 </sect1>

 <sect1 id="plpython-funcs">
  <title>Funzioni PL/Python</title>

  <para>
Le funzioni in PL/Python sono dichiarate attraverso la sintassi 
standard <xref linkend="sql-createfunction"/>:

<programlisting>
CREATE FUNCTION <replaceable>funcname</replaceable> (<replaceable>argument-list</replaceable>)
  RETURNS <replaceable>return-type</replaceable>
AS $$
  # PL/Python function body
$$ LANGUAGE plpythonu;
</programlisting>
  </para>

  <para>
Il corpo di una funzione è semplicemente uno script Python. Quando la funzione
viene chiamata, i suoi argomenti sono passati come elementi dell'elenco 
<varname>args</varname>; anche gli argomenti nominati sono passati come 
variabili ordinarie allo script Python. L'uso di argomenti nominati
di solito è più leggibile. Il risultato è restituito dal codice Python
nel solito modo, con <literal>return</literal> o
<literal>yield</literal> (in caso di un'istruzione result-set). Se
non si fornisce un valore di ritorno, Python ritorna come predefinto 
<symbol>None</symbol>. <application>PL/Python</application>  traduce 
il <symbol>None</symbol> di Python nel valore SQL null.
  </para>

  <para>
Per esempio, una funzione che restituisce il maggiore di due interi può essere 
definita come:

<programlisting>
CREATE FUNCTION pymax (a integer, b integer)
  RETURNS integer
AS $$
  if a &gt; b:
    return a
  return b
$$ LANGUAGE plpythonu;
</programlisting>

Il codice Python che è fornito come corpo della definizione della funzione 
viene trasformato in una funzione Python. L'esempio sopra risulta in:

<programlisting>
def __plpython_procedure_pymax_23456():
  if a &gt; b:
    return a
  return b
</programlisting>

assumendo che 23456 sia l'OID assegnato alla funzione da 
<productname>PostgreSQL</productname>.
  </para>

  <para>
Gli argomenti sono impostati come variabili globali. Considerate le regole di 
scope di Python, questo ha come conseguenza che una variabile argomento 
non può essere riassegnata all'interno della funzione al valore di un'espressione
che coinvolge la variabile stessa, a meno che la variabile non sia 
ridichiarata come globale nel blocco. Per esempio, il codice seguente
non funzionerà:
<programlisting>
CREATE FUNCTION pystrip(x text)
  RETURNS text
AS $$
  x = x.strip()  # error
  return x
$$ LANGUAGE plpythonu;
</programlisting>
dato che l'assegnamento a <varname>x</varname>
rende <varname>x</varname> una variabile locale per l'intero blocco,
e quindi la <varname>x</varname> a destra dell'assegnamento
si riferisce a una variabile locale <varname>x</varname>  non ancora assegnata, 
non al parametro della funzione  PL/Python.
Usando l'istruzione <literal>global</literal>, questo funzionerà:
<programlisting>
CREATE FUNCTION pystrip(x text)
  RETURNS text
AS $$
  global x
  x = x.strip()  # ok now
  return x
$$ LANGUAGE plpythonu;
</programlisting>
Ma non è consigliabile basarsi su questo dettaglio di implementazione di
PL/Python. È meglio trattare i parametri della funzione  come
a sola lettura.
  </para>
 </sect1>

 <sect1 id="plpython-data">
  <title>Valori dei dati</title>
  <para>
Parlando in generale, lo scopo di PL/Puthon è di fornire  
una mappatura <quote>naturale</quote> tra PostgreSQL e il mondo di 
Python. Questo prevede le seguenti regole di mappatura dei dati.
  </para>

  <sect2>
   <title>Mappatura dei tipi di dato</title>
   <para>
Gli argomenti della funzione sono convertiti dai loro tipi PostgreSQL 
a tipi Python corrispondenti:
    <itemizedlist>
     <listitem>
      <para>
Il <type>boolean</type> PostgreSQL è convertito in un <type>bool</type> Python.
      </para>
     </listitem>

     <listitem>
      <para>
<type>smallint</type> e <type>int</type> di PostgreSQL
sono convertiti a <type>int</type> Python.
<type>bigint</type> PostgreSQL è convertito 
a <type>long</type> in Python 2 e a <type>int</type> in
Python 3.
      </para>
     </listitem>

     <listitem>
      <para>
I <type>real</type>, <type>double</type> e 
<type>numeric</type> PostgreSQL sono convertiti in 
<type>float</type> Python. Notare che per 
il <type>numeric</type> vengono perse informazioni e possono portare a 
risultati non corretti. Questo potrebbe essere corretto in una versione 
futura.
      </para>
     </listitem>

     <listitem>
      <para>
I <type>bytea</type> di PostgreSQL sono convertiti a 
<type>str</type> Python 2 e a <type>bytes</type>
in Python 3.  
In Python 2, la stringa dovrebbe essere trattata come una 
sequenza di byte senza nessuna codifica dei caratteri.
      </para>
     </listitem>

     <listitem>
      <para>
Tutti gli altri tipi di dato, incluso i tipi di stringa di caratteri PostgreSQL,
vengono convertiti a una <type>str</type> Python. In Python 2,
questa stringa sarà nella codifica del server PostgreSQL; in 
Python 3, sarà una stringa Unicode come tutte le stringhe.
      </para>
     </listitem>

     <listitem>
      <para>
Per tipi di dato non scalari, si veda sotto.
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
I valori di ritorno della funzione sono convertiti ai tipi di ritorno 
dichiarati da PostgreSQL come segue:
    <itemizedlist>
     <listitem>
      <para>
Quando un tipo di ritorno PostgreSQL è <type>boolean</type>, il valore di 
ritorno sarà valutato per verità in accordo alle regole 
<emphasis>Python</emphasis>. Cioè, 0 e stringhe vuote sono false, 
ma in particolare <literal>'f'</literal> è true.
      </para>
     </listitem>

     <listitem>
      <para>
Quando il tipo di ritorno di PostgreSQL è <type>bytea</type>, il valore di ritorno 
sarà convertito a una stringa (Python 2) o byte 
(Python 3) usando le rispettive builtin, con il risultato   
convertito a <type>bytea</type>.
      </para>
     </listitem>

     <listitem>
      <para>
Per tutti gli altri tipi di ritorno di PostgreSQL, il valore Python restituito 
è convertito a una stringa usando la funzione Python incorporata 
<literal>str</literal>, e il risultato è passato alla funzione di 
input del tipo di dato PostgreSQL.
      </para>

      <para>
Le stringhe in Python 2 sono richieste essere nella codifica del server PostgreSQL 
quando sono passate a PostgreSQL. Le stringhe che non sono valide 
nella codifica attuale del server genereranno un errore, 
ma non tutti gli errori di codifica possono essere trovati, quindi 
risulteranno comunque dati sporchi quando non è fatto correttamente. Le stringhe
Unicode vengono convertite alla codifica corretta automaticamente, quindi può
essere più sicuro è più conveniente usare quelle. In Python 3,
tutte le stringhe sono stringhe Unicode.
      </para>
     </listitem>

     <listitem>
      <para>
Per tipi di dato non scalari, si veda sotto.
      </para>
     </listitem>
    </itemizedlist>

Si noti che le discrepanze tra il tipo di ritorno dichiarato da PostgreSQL
e il tipo di dato Python dell'effettivo oggetto ritornato non sono 
segnalate; il valore sarà convertito in ogni caso.
   </para>

   <tip>
    <para>
Le funzioni <application>PL/Python</application> non possono ritornare 
nè  il il tipo  <type>RECORD</type> e nemmeno  <type>SETOF RECORD</type>. Un
workaround è di scrivere una funzione <application>PL/pgSQL</application>
che crea una tabella temporanea, fargli chiamare la funzione   
<application>PL/Python</application> per riempire la tabella, 
e quindi far si che la funzione <application>PL/pgSQL</application>
ritorni il generico <type>RECORD</type> dalla tabella temporanea.
    </para>
   </tip>
  </sect2>

  <sect2>
   <title>Null, None</title>
  <para>
Se un valore SQL null <indexterm><primary>null value</primary><secondary
sortas="PL/Python">PL/Python</secondary></indexterm> viene passato a una funzione, 
il valore dell'argomento apparirà come <symbol>None</symbol> in Python.
La definizione della funzione sopra ritornerà la risposta sbagliata per input null.
Si potrebbe aggiungere <literal>STRICT</literal> alla definizione della funzione
per far si che <productname>PostgreSQL</productname> faccia qualcosa di più ragionevole:
se è passato un valore null, la funzione non sarà chiamata per niente,
ma restituirà automaticamente un risultato null. Alternativamente, 
si potrebbero controllare input null nel corpo della funzione:

<programlisting>
CREATE FUNCTION pymax (a integer, b integer)
  RETURNS integer
AS $$
  if (a is None) or (b is None):
    return None
  if a &gt; b:
    return a
  return b
$$ LANGUAGE plpythonu;
</programlisting>

Come mostrato sopra, per ritornare un valore SQL null da una funzione PL/Python,
ritornare il valore <symbol>None</symbol>. Questo può essere fatto sia che la funzione sia
strict che non.
  </para>
  </sect2>

  <sect2 id="plpython-arrays">
   <title>Array, List</title>
  <para>
I valori di array SQL sono passati in PL/Python come una list Python. Per
ritornare un valore di array SQL fuori da una funzione PL/Python, restituire 
una sequenza Python, per esempio una list o una tupla:

<programlisting>
CREATE FUNCTION return_arr()
  RETURNS int[]
AS $$
return (1, 2, 3, 4, 5)
$$ LANGUAGE plpythonu;

SELECT return_arr();
 return_arr  
-------------
 {1,2,3,4,5}
(1 row)
</programlisting>

Notare che in Python, le stringhe sono sequenze, che possono avere effetti indesiderati
che potrebbero essere familiari ai programmatori Python:

<programlisting>
CREATE FUNCTION return_str_arr()
  RETURNS varchar[]
AS $$
return "hello"
$$ LANGUAGE plpythonu;

SELECT return_str_arr();
 return_str_arr
----------------
 {h,e,l,l,o}
(1 row)
</programlisting>
  </para>
  </sect2>

  <sect2>
   <title>Tipi composti</title>
  <para>
   Composite-type arguments are passed to the function as Python mappings. The
   element names of the mapping are the attribute names of the composite type.
   If an attribute in the passed row has the null value, it has the value
Se un attributo nella riga passata ha il valore null, ha il valore 
<symbol>None</symbol> nella mappatura. Ecco un esempio:

<programlisting>
CREATE TABLE employee (
  name text,
  salary integer,
  age integer
);

CREATE FUNCTION overpaid (e employee)
  RETURNS boolean
AS $$
  if e["salary"] &gt; 200000:
    return True
  if (e["age"] &lt; 30) and (e["salary"] &gt; 100000):
    return True
  return False
$$ LANGUAGE plpythonu;
</programlisting>
  </para>

  <para>
Ci sono molti modi di restituire tipi riga o tipi composti da una funzione 
Python. Gli esempi seguenti assumono che si abbia: 

<programlisting>
CREATE TYPE named_value AS (
  name   text,
  value  integer
);
</programlisting>

Un risultato composto può essere restituito come:

   <variablelist>
    <varlistentry>
<term>Il tipo della sequenza (una tupla o un elenco, ma non un insieme perchè
non è indicizzabile)</term>
     <listitem>
      <para>
Gli oggetti della sequenza restituiti devono avere lo stesso numero di elementi dato che
il risultato composto ha campi. L'elemento con indice 0 è assegnato al 
primo campo del tipo composto, 1 al secondo e così via. Per esempio:

<programlisting>
CREATE FUNCTION make_pair (name text, value integer)
  RETURNS named_value
AS $$
  return [ name, value ]
  # or alternatively, as tuple: return ( name, value )
$$ LANGUAGE plpythonu;
</programlisting>

Per restituire un null SQL per qualsiasi colonna, inserire <symbol>None</symbol> 
alla posizione corrispondente.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>Mappatura (dizionario)</term>
     <listitem>
      <para>
Il valore per ogni colonna del tipo del risultato è ricavata dalla mappatura
con il nome della colonna come chiave. Esempio:

<programlisting>
CREATE FUNCTION make_pair (name text, value integer)
  RETURNS named_value
AS $$
  return { "name": name, "value": value }
$$ LANGUAGE plpythonu;
</programlisting>

Qualsiasi ulteriore  coppia del dizionario chiave/valore è ignorata. Le chiavi mancanti sono
trattate come errori.
Per restituire un valore null SQL da qualsiasi colonna, inserire 
<symbol>None</symbol> con il corrispondente nome della colonna come chiave.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>Oggetto (qualsiasi oggetto che fornisce il metodo <literal>__getattr__</literal>)</term>
     <listitem>
      <para>
Questo funzione allo stesso modo della mappatura.
Esempio:

<programlisting>
CREATE FUNCTION make_pair (name text, value integer)
  RETURNS named_value
AS $$
  class named_value:
    def __init__ (self, n, v):
      self.name = n
      self.value = v
  return named_value(name, value)

  # or simply
  class nv: pass
  nv.name = name
  nv.value = value
  return nv
$$ LANGUAGE plpythonu;
</programlisting>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  </sect2>

  <sect2>
   <title>Funzioni che ritornano insiemi</title>
  <para>
Una funzione <application>PL/Python</application> può anche ritornare insiemi di 
tipi scalari o composti. Ci sono diversi modi di ottenere questo dato che 
l'oggetto ritornato internamente è convertito a un iteratore. Gli esempi seguenti
assumono che si abbia il tipo composto:

<programlisting>
CREATE TYPE greeting AS (
  how text,
  who text
);
</programlisting>
   
   A set result can be returned from a:

   <variablelist>
    <varlistentry>
     <term>Sequence type (tuple, list, set)</term>
     <listitem>
      <para>
<programlisting>
CREATE FUNCTION greet (how text)
  RETURNS SETOF greeting
AS $$
  # return tuple containing lists as composite types
  # all other combinations work also
  return ( [ how, "World" ], [ how, "PostgreSQL" ], [ how, "PL/Python" ] )
$$ LANGUAGE plpythonu;
</programlisting>
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>Iterator (any object providing <symbol>__iter__</symbol> and
      <symbol>next</symbol> methods)</term>
     <listitem>
      <para>
<programlisting>
CREATE FUNCTION greet (how text)
  RETURNS SETOF greeting
AS $$
  class producer:
    def __init__ (self, how, who):
      self.how = how
      self.who = who
      self.ndx = -1

    def __iter__ (self):
      return self

    def next (self):
      self.ndx += 1
      if self.ndx == len(self.who):
        raise StopIteration
      return ( self.how, self.who[self.ndx] )

  return producer(how, [ "World", "PostgreSQL", "PL/Python" ])
$$ LANGUAGE plpythonu;
</programlisting>
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>Generator (<literal>yield</literal>)</term>
     <listitem>
      <para>
<programlisting>
CREATE FUNCTION greet (how text)
  RETURNS SETOF greeting
AS $$
  for who in [ "World", "PostgreSQL", "PL/Python" ]:
    yield ( how, who )
$$ LANGUAGE plpythonu;
</programlisting>

       <warning>
        <para>
A causa del 
<ulink url="http://bugs.python.org/issue1483133">bug #1483133</ulink>
di Python,
alcune versioni di debug di Python 2.4
(configurati e compilati con opzione <literal>--with-pydebug</literal>)
sono conosciute per provocare blocchi del server <productname>PostgreSQL</productname>
quando si usa un iteratore per restituire un insieme.
Versioni non patchate di Fedora 4 contengono questo bug.
Non succede in versioni in produzione di Python o su versioni con patch di Fedora 4.
        </para>
       </warning>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  </sect2>
 </sect1>

 <sect1 id="plpython-sharing">
  <title>Sharing Data</title>
  <para>
Il dizionario globale <varname>SD</varname>  è disponibile per salvare 
i dati tra le chiamate di funzione. Questa variabile è di tipo private static.
Il dizionario globale <varname>GD</varname> è public, 
disponibile per tutte le funzioni Python all'interno di una sessione. Usarlo
questo con cura. <indexterm><primary>global data</primary><secondary>in
PL/Python</secondary></indexterm>
  </para>

  <para>
Ogni funzione ha il proprio ambiente di esecuzione nell'interprete
Python, quindi i dati globali e gli argomenti di funzione di 
<function>myfunc</function> non sono disponibili a
<function>myfunc2</function>. L'eccezione sono i dati nel dizionario 
<varname>GD</varname>, come menzionati sopra.
  </para>
 </sect1>

 <sect1 id="plpython-do">
  <title>Blocchi di codice anonimi</title>

  <para>
PL/Python supporta anche blocchi di codice anonimi chiamati con
l'istruzione <xref linkend="sql-do"/>:

<programlisting>
DO $$
    # PL/Python code
$$ LANGUAGE plpythonu;
</programlisting>

Un blocco di codice anonimo non riceve argomenti, e qualsiasi valore potrebbe
restituire viene ignorato. Altrimenti si comporta esattamente come una funzione.
  </para>
 </sect1>

 <sect1 id="plpython-trigger">
  <title>Funzioni Trigger</title>

  <indexterm zone="plpython-trigger">
   <primary>trigger</primary>
   <secondary>in PL/Python</secondary>
  </indexterm>

  <para>
Quando una funzione è usata come un trigger, il dizionario 
<literal>TD</literal> contiene valori relativi al trigger:   
   <variablelist>
    <varlistentry>
     <term><literal>TD["event"]</literal></term>
     <listitem>
      <para>
contiene l'evento come una stringa:
<literal>INSERT</literal>, <literal>UPDATE</literal>,
<literal>DELETE</literal>, <literal>TRUNCATE</literal>,
o <literal>UNKNOWN</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TD["when"]</literal></term>
     <listitem>
      <para>
contiene uno tra <literal>BEFORE</literal>, <literal>AFTER</literal>,
o <literal>UNKNOWN</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TD["level"]</literal></term>
     <listitem>
      <para>
contiene uno tra <literal>ROW</literal>,
<literal>STATEMENT</literal>, or <literal>UNKNOWN</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TD["new"]</literal></term>
     <term><literal>TD["old"]</literal></term>
     <listitem>
      <para>
Per un trigger a livello di riga, uno o entrambi questi valori contengono
le rispettive righe trigger, dipendentemente dall'evento trigger.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TD["name"]</literal></term>
     <listitem>
      <para>
contiene il nome del trigger.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TD["table_name"]</literal></term>
     <listitem>
      <para>
contiene il nome della tabella sulla quale si è verificato il trigger.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TD["table_schema"]</literal></term>
     <listitem>
      <para>
contiene lo schema della tabella sulla quale si è verificato il trigger.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TD["relid"]</literal></term>
     <listitem>
      <para>
contiene l'OID della tabella sulla quale si è verificato il trigger.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TD["args"]</literal></term>
     <listitem>
      <para>
Se il comando <command>CREATE TRIGGER</command>
includeva argomenti, sono disponibili in <literal>TD["args"][0]</literal> fino a
<literal>TD["args"][<replaceable>n</replaceable>-1]</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

  <para>
Se <literal>TD["when"]</literal> è <literal>BEFORE</literal> e
<literal>TD["level"]</literal> è <literal>ROW</literal>, si può ritornare
<literal>None</literal> o <literal>"OK"</literal> dalla funzione python
per indicare che la riga non è modificata, 
<literal>"SKIP"</literal> per annullare l'evento, o <literal>"MODIFY"</literal> per
indicare che si è modificato la riga.
Altrimenti il valore di ritorno viene ignorato.
  </para>
 </sect1>

 <sect1 id="plpython-database">
  <title>Accesso al database</title>

  <para>
Il modulo del linguaggio PL/Python importa automaticamente un modulo Python
chiamato <literal>plpy</literal>. Le funzioni e le costanti in questo modulo
sono disponibili nel codice Python come 
<literal>plpy.<replaceable>foo</replaceable></literal>.
  </para>

  <para>
Il modulo <literal>plpy</literal> fornisce due 
funzioni chiamate <function>execute</function> e
<function>prepare</function>.  Chiamare 
<function>plpy.execute</function> con una query e un argomento limit opzionale
causa che quella query sia eseguita e il risultato restituito 
in un oggetto. L'oggetto risultante emula un oggetto list o dizionario.
L'oggetto risultato può essere acceduto tramite il numero della riga
e il nome della colonna. Sono disponibili questi metodi aggiuntivi:
<function>nrows</function> che restituisce il numero di righe 
ritornate dalla query, e <function>status</function> che è il valore
di ritorno di <function>SPI_execute()</function>. L'oggetto risultato può 
essere modificato.
  </para>

  <para>
Per esempio:
<programlisting>
rv = plpy.execute("SELECT * FROM my_table", 5)
</programlisting>
restituisce fino a 5 righe da <literal>my_table</literal>. Se
<literal>my_table</literal> ha una colonna
<literal>my_column</literal>, ci si accederebbe così:
<programlisting>
foo = rv[i]["my_column"]
</programlisting>
  </para>

  <para>
<indexterm><primary>preparare una query</primary><secondary>in PL/Python</secondary></indexterm>
La seconda funzione, <function>plpy.prepare</function>, prepara
il piano di esecuzione per una query. È chiamata con una query
e l'elenco dei tipi del parametro, se si hanno riferimenti al parametro nella query.
Per esempio:
<programlisting>
plan = plpy.prepare("SELECT last_name FROM my_users WHERE first_name = $1", [ "text" ])
</programlisting>
<literal>text</literal> è il tipo della variabile che si sta passando 
per <literal>$1</literal>. Dopo aver preparato un'istruzione, si usa 
la funzione <function>plpy.execute</function> per eseguirla:
<programlisting>
rv = plpy.execute(plan, [ "name" ], 5)
</programlisting>
Il terzo argomento è il limit ed è opzionale.
  </para>

  <para>
I parametri della query e i campi della riga risultante sono convertiti tra
i tipi di dato PostgreSQL e Python come descritto in
<xref linkend="plpython-data"/>. L'eccezione è che i tipi composti non sono  
attualmente supportati; Saranno rifiutati come parametri di query e sono 
convertiti in stringhe quando appaiono nel risultato di una query.
Come workaround per l'ultimo problema, la query può
a volte essere riscritta così che il tipo composto appare come 
una riga risultato piuttosto di un campo della riga risultato.
Alternativamente, si potrebbe fare il parsing della stringa risultante a mano,
ma questo approccio non è raccomandato dato che non è a prova di futuro.
  </para>

  <para>
Quando si prepara un piano usando il modulo PL/Python è 
automaticamente salvato. Leggere la documentazione SPI (<xref
linkend="spi"/>) per una descrizione di cosa significa questo.
Per usare efficacemente questo attraverso le chiamate di funzione 
si deve usare uno dei dizionari di immagazzinamento persistenti,
<literal>SD</literal> o <literal>GD</literal> (si veda 
<xref linkend="plpython-sharing"/>). Per esempio:

<programlisting>
CREATE FUNCTION usesavedplan() RETURNS trigger AS $$
    if SD.has_key("plan"):
        plan = SD["plan"]
    else:
        plan = plpy.prepare("SELECT 1")
        SD["plan"] = plan
    # rest of function
$$ LANGUAGE plpythonu;
</programlisting>
  </para>
 </sect1>

 <sect1 id="plpython-util">
  <title>Funzioni di utilità</title>
  <para>
Il modulo <literal>plpy</literal> fornisce anche le funzioni
<literal>plpy.debug(<replaceable>msg</replaceable>)</literal>,
<literal>plpy.log(<replaceable>msg</replaceable>)</literal>,
<literal>plpy.info(<replaceable>msg</replaceable>)</literal>,
<literal>plpy.notice(<replaceable>msg</replaceable>)</literal>,
<literal>plpy.warning(<replaceable>msg</replaceable>)</literal>,
<literal>plpy.error(<replaceable>msg</replaceable>)</literal> e
<literal>plpy.fatal(<replaceable>msg</replaceable>)</literal>.<indexterm><primary>elog</primary>
<secondary>in PL/Python</secondary></indexterm>
<function>plpy.error</function> e
<function>plpy.fatal</function> attualmente generano un'eccezione Python
che, se non catturata, si propaga fuori la query chiamante, causando 
che la transazione corrente o la sottotransazione sia annullata.
<literal>raise plpy.ERROR(<replaceable>msg</replaceable>)</literal> e
<literal>raise plpy.FATAL(<replaceable>msg</replaceable>)</literal> sono
equivalenti a chiamare 
<function>plpy.error</function> e
<function>plpy.fatal</function>, rispettivamente.
Le altre funzioni generano solo i messaggi di diversi 
livelli di priorità.
Se i messaggi di una particolare priorità sono riportati al client,
scritte nel log del server, o entrambe, è controllaro dalle
variabili di configurazione 
<xref linkend="guc-log-min-messages"/> e
<xref linkend="guc-client-min-messages"/>.
Si veda <xref linkend="runtime-config"/>  per maggiori informazioni.
  </para>
 </sect1>

 <sect1 id="plpython-envar">
  <title>Variabili d'ambiente</title>

  <para>
Alcune delle variabili d'ambiente che sono accettate dall'interprete Python
possono essere usate anche per modificare il comportamento di PL/Python. 
Dovrebbero essere impostate nell'ambiente del processo server PostgreSQL
principale, per esempio in uno script d'avvio. Le variabili d'ambiente 
disponibili dipendono dalla versione di Python; si veda 
la documentazione di Python per dettagli. Al momento della scrittura di questo paragrafo,
le seguenti variabili d'ambiente hanno effetti su PL/Python,
assumendo un'adeguata versione di Python:
   <itemizedlist>
    <listitem>
     <para><envar>PYTHONHOME</envar></para>
    </listitem>

    <listitem>
     <para><envar>PYTHONPATH</envar></para>
    </listitem>

    <listitem>
     <para><envar>PYTHONY2K</envar></para>
    </listitem>

    <listitem>
     <para><envar>PYTHONOPTIMIZE</envar></para>
    </listitem>

    <listitem>
     <para><envar>PYTHONDEBUG</envar></para>
    </listitem>

    <listitem>
     <para><envar>PYTHONVERBOSE</envar></para>
    </listitem>

    <listitem>
     <para><envar>PYTHONCASEOK</envar></para>
    </listitem>

    <listitem>
     <para><envar>PYTHONDONTWRITEBYTECODE</envar></para>
    </listitem>

    <listitem>
     <para><envar>PYTHONIOENCODING</envar></para>
    </listitem>

    <listitem>
     <para><envar>PYTHONUSERBASE</envar></para>
    </listitem>
   </itemizedlist>

(Sembra essere un dettaglio di implementazione di Python al di fuori del controllo
di PL/Python che alcune variabili d'ambiente elencate nella pagina man di 
<command>python</command> sono efficaci sono in un interprete a linea di comando 
e non un interprete Python embedded).
  </para>
 </sect1>
</chapter>
