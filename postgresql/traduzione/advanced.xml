<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL$ -->

 <chapter id="tutorial-advanced">
  <title>Caratteristiche Avanzate</title>

  <sect1 id="tutorial-advanced-intro">
   <title>Introduzione</title>

   <para>
    
    Nel capitolo precedente abbiamo trattato i principi fondamentali
    dell'utilizzo di <acronym>SQL</acronym> per conservare e accedere
    ai dati in <productname>PostgreSQL</productname>. Discuteremo
    ora di alcune delle caratteristiche più avanzate di
    <acronym>SQL</acronym> che semplificano la gestione ed evitano la
    perdita o la corruzione dei dati. Per concludere, vedremo
    alcune estensioni di <productname>PostgreSQL</productname>.
   </para>

   <para>
    Questo capitolo farà occasionalmente riferimento agli esempi visti
    nel <xref linkend="tutorial-sql" /> per modificarli o migliorarli, per cui
    sarete avvantaggiati dalla lettura di quel capitolo. Alcuni esempi trattati
    in questo capitolo possono essere trovati in
    <filename>advanced.sql</filename> nella directory tutorial. Questo file
    contiene anche alcuni dati di esempio da caricare, che non vengono ripetuti
    quì.  (consultare <xref linkend="tutorial-sql-intro" /> per sapere
    come usare il file.)
   </para>
  </sect1>


  <sect1 id="tutorial-views">
   <title>Viste</title>

   <indexterm zone="tutorial-views">
    <primary>vista</primary>
   </indexterm>

   <para>
    Refer back to the queries in <xref linkend="tutorial-join"/>.
    Suppose the combined listing of weather records and city location
    is of particular interest to your application, but you do not want
    to type the query each time you need it.  You can create a
    <firstterm>view</firstterm> over the query, which gives a name to
    the query that you can refer to like an ordinary table:

    Riferendosi indietro alle query dentro <xref linkend="tutorial-join" />,
    supporre che la lista combinata dei record delle temperature e delle locazioni delle
    città sia di particolare interesse per un'applicazione, ma che non si voglia
    digitare una query ogni volta che serve. Potete creare una <firstterm>vista</firstterm>
    della query assegnandoli un nome al quale fare riferimento
    come se fosse una tabella ordinaria:

<programlisting>
CREATE VIEW myview AS
    SELECT city, temp_lo, temp_hi, prcp, date, location
        FROM weather, cities
        WHERE city = name;

SELECT * FROM myview;
</programlisting>
   </para>

   <para>
    
    Fare un uso copioso delle viste è un aspetto fondamentale di una buona progettazione
    di database SQL. Le viste vi consentono di incapsulare in intefacce compatibili, i
    dettagli delle strutture delle tabelle, che potrebbero cambiare con l'evolversi
    dell'applicazione.
   </para>

   <para>
    La viste possono essere utilizzate dovunque può essere usata una reale tabella.
    Non è raro trovare viste dentro altre viste.
   </para>
  </sect1>


  <sect1 id="tutorial-fk">
   <title>Chiavi Esterne</title>

   <indexterm zone="tutorial-fk">
    <primary>chiave esterna</primary>
   </indexterm>

   <indexterm zone="tutorial-fk">
    <primary>integrità referenziale</primary>
   </indexterm>

   <para>
    
    Ricordate le tabelle <classname>weather</classname> e
    <classname>cities</classname> viste nel <xref linkend="tutorial-sql" />.
    Considerate il seguente problema: Volete essere sicuri che 
    nessuno possa inserire nella tabella <classname>weather</classname>
    righe che non hanno elementi corrispondenti nella tabella
    <classname>cities</classname>. Questo viene chiamato mantenere
    l'<firstterm>integrità referenziale</firstterm> dei vostri dati.
    Nei sistemi di database semplicistici questo viene realizzato
    (all'occorrenza) in primo luogo esaminando la tabella
    <classname>cities</classname> per controllare se esiste un record
    corrispondente, e quindi inserendo o respingendo il nuovo record
    <classname>weather</classname>. Questo metodo presenta un certo numero di problemi
    e non è conveniente adottarlo, per cui <productname>PostgreSQL</productname>
    si incarica di fare tutto questo al vostro posto.
   </para>

   <para>
    Le nuove dichiarazioni delle tabelle dovranno essere simili a queste:

<programlisting>
CREATE TABLE cities (
        city     varchar(80) primary key,
        location point
);

CREATE TABLE weather (
        city      varchar(80) references cities(city),
        temp_lo   int,
        temp_hi   int,
        prcp      real,
        date      date
);
</programlisting>

    Provate ora ad inserire un record non valido:

<programlisting>
INSERT INTO weather VALUES ('Berkeley', 45, 53, 0.0, '1994-11-28');
</programlisting>

<screen>
ERROR:  insert or update on table "weather" violates foreign key constraint "weather_city_fkey"
DETAIL:  Key (city)=(Berkeley) is not present in table "cities".
</screen>
   </para>

   <para>
    
    Il comportamento delle chiavi esterne può essere adattato alle vostre
    applicazioni. In questo tutorial non andremo al di là di questo semplice
    esempio, fare riferimento al <xref linkend="ddl" /> per ulteriori informazioni.
    Con un uso corretto delle chiavi esterne verrà sicuramente
    migliorata la qualità dell'applicazione di database,
    per cui si incoraggia fortemente ad imparare il loro utilizzo.
   </para>
  </sect1>


  <sect1 id="tutorial-transactions">
   <title>Transazioni</title>

   <indexterm zone="tutorial-transactions">
    <primary>transazione</primary>
   </indexterm>

   <para>
    
    Le <firstterm>transazioni</firstterm> sono un concetto fondamentale in tutti i sistemi
    di database. Il punto essenziale di una transazione è che essa concentra
    diversi passi in una singola operazione "tutto-o-niente". Gli stati intermedi tra
    i diversi passi non sono visibili alle transazioni concorrenti, e se
    si verifica qualche errore che impedisce il completamento della transazione,
    nessuno dei passi completati va ad interessare il database.
   </para>

   <para>
    Per esempio, considerare il database di una banca che contiene i saldi dei
    conti di diversi clienti, come pure i saldi dei depositi totali per settore. 
    Supponiamo di voler registrare un pagamento di $100.00 dal conto di Alice
    al conto di Bob. Semplificando all'eccesso, il comando SQL per fare questo
    potrebbe essere:

<programlisting>
UPDATE accounts SET balance = balance - 100.00
    WHERE name = 'Alice';
UPDATE branches SET balance = balance - 100.00
    WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Alice');
UPDATE accounts SET balance = balance + 100.00
    WHERE name = 'Bob';
UPDATE branches SET balance = balance + 100.00
    WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Bob');
</programlisting>
   </para>

   <para>
    I dettagli di questi comandi non sono importanti; la cosa importante è
    che per realizzare questa operazione piuttosto semplice, sono necessari
    diversi aggiornamenti separati. I nostri funzionari di banca vorranno essere
    sicuri che ognuno di questi aggiornamenti si verifichi, o che non si verifichi
    nessuno di essi. Essi non vorrebbero certamente che, per un guasto di sistema,
    risultasse in Bob un accredito di $100.00 e nessun addebito nel conto di
    Alice. Mentre  Alice non sarebbe una cliente felice se gli fossero stati
    addebitati $100.00 senza il corrispondente accredito nel conto di Bob. Abbiamo bisogno di una
    garanzia che se qualcosa va male all'interno dell'operazione, nessuno dei passi eseguiti
    abbia effetto. Raggruppando gli aggiornamenti in una <firstterm>transazione</firstterm>
    avremo questa garanzia. Una transazione si dice essere <firstterm>atomica</firstterm>:
    dal punto di vista di altre transazioni, se si attua completamente o per niente.
    
   </para>

   <para>
    Si vuole anche una
    garanzia che una volta che una transazione è completata e riconosciuta
    dal sistema di database, essa sia permanentemente registrata e non vada persa,
    anche se subito dopo si verifica un arresto del sistema. Per esempio, se stiamo
    registrando un prelevamento di denaro effettuato da Bob, non vogliamo assolutamente
    che il debito di questo cliente sparisca per un blocco del sistema che si verifica
    dopo che il cliente è uscito  dalla porta della banca. Un database transazionale
    garantisce che tutti gli aggiornamenti fatti tramite una transazione siano registrati
    su un supporto permanente (es., su disco) prima che venga segnalato il completamento
    della transazione.
   </para>

   <para>
    Un altra importante proprietà dei database transazionali è
    strettamente collegata alla nozione di aggiornamenti atomici: quando
    diverse transazioni vengono eseguite concorrentemente, ognuna di esse non
    dovrebbe poter vedere i cambiamenti incompleti fatti dalle altre. Per
    esempio, se una transazione si sta occupando completamente di tutto il ramo
    saldi, essa non dovrebbe includere il debito dal ramo Alice e non il credito
    al ramo Bob, nè viceversa. Per cui le transazioni devono essere tutto-o-niente
    non solo per quanto riguarda il loro effetto permanente nel database, ma anche
    per quanto riguarda la loro visibilità. Gli aggiornamenti fatti da una
    transazione aperta sono invisibili alle altre transazioni finchè la
    transazione non è stata completata, dopodichè tutti gli
    aggiornamenti fatti diventano visibili contemporaneamente.
    
   </para>

   <para>
    In <productname>PostgreSQL</productname>, una transazione è impostata
    racchiudendo i comandi SQL della transazione tra i comandi
    <command>BEgin</command> e <command>COMMIT</command>. Per cui la nostra transazione
    bancaria assumerà questa forma:

<programlisting>
BEgin;
UPDATE accounts SET balance = balance - 100.00
    WHERE name = 'Alice';
-- etc etc
COMMIT;
</programlisting>
   </para>

   <para>
    
    Se, durante l'elaborazione della transazione, si decide di non volerla completare
    (per esempio, se ci viene notificato che il conto di Alice è negativo), possiamo
    eseguire il comando di rinuncia <command>ROLLBACK</command> invece del comando di conferma
    <command>COMMIT</command>, e tutti gli aggiornamenti eseguiti fino a quel momento saranno cancellati.
   </para>

   <para>
    <productname>PostgreSQL</productname> attualmente tratta ogni istruzione SQL come
    se fosse eseguita dentro una transazione. Se non date un comando
    <command>BEgin</command>,
    ogni istruzione individuale verrà racchiusa tra un implicito
    <command>BEgin</command> e (se riuscita) un <command>COMMIT</command>.  Un gruppo di
    istruzioni racchiuse tra <command>BEgin</command> e <command>COMMIT</command>
    viene talvolta chiamato <firstterm>blocco di transazione</firstterm>.
    
   </para>

   <note>
    <para>
     Alcune librerie client impartiscono i comandi <command>BEgin</command> e <command>COMMIT</command>
     automaticamente, per cui si ottiene l'effetto blocco di transazione senza
     averlo richiesto. Controllare la documentazione per l'interfaccia che state
     utilizzando.
    </para>
   </note>

   <para>
    È possibile controllare le istruzioni in una transazione in modo
    granulare tramite l'utilizzo di <firstterm>savepoint</firstterm>. I savepoint
    vi consentono di scartare selettivamente parti della transazione,
    confermando il resto. Dopo aver definito un savepoint con
    <command>SAVEPOINT</command>, potrete tornare indietro al savepoint con
    <command>ROLLBACK TO</command>.  Tutte le modifiche al database poste tra la
    definizione del savepoint ed il ritorno ad esso vengono scartate, mentre
    le modifiche precedenti il savepoint sono mantenute.
    
   </para>

   <para>
    Dopo essere tornati indietro ad un savepoint, lo stesso continua ad essere definito,
    per cui potrete tornare indietro ad esso diverse volte.  Al contrario, se siete
    sicuri di non voler tornare ancora indietro ad un particolare savepoint, esso
    può essere rilasciato, in modo che il sitema possa liberare alcune
    risorse. Ricordatevi che sia il rilascio che il tornare indietro ad un savepoint
    rilascerà automaticamente tutti i savepoint che sono definiti dopo di esso.
   </para> 

   <para>
    Tutto questo si verifica dentro il blocco di transazione, così niente di
    questo sarà visibile alle altre sessioni del database. Quando e se il blocco
    di transazione termina con commit, le azioni confermate diventano visibili come
    una unità alle altre sessioni, mentre le azioni rolled-back non verranno
    viste per niente.
   </para> 

   <para>
    Ricordando il database della banca, si supponga di dover addebitare $100.00 dal conto di
    Alice, ed accreditarle nel conto di Bob, per scoprire solo più tardi che si doveva
    accreditarli sul conto di Wally. È possibile rimediare usando un savepoint
    come questo:

<programlisting>
BEgin;
UPDATE accounts SET balance = balance - 100.00
    WHERE name = 'Alice';
SAVEPOINT my_savepoint;
UPDATE accounts SET balance = balance + 100.00
    WHERE name = 'Bob';
-- oops ... forget that and use Wally's account
ROLLBACK TO my_savepoint;
UPDATE accounts SET balance = balance + 100.00
    WHERE name = 'Wally';
COMMIT;
</programlisting>
   </para>

   <para>
    
    Questo esempio, naturalmente, è enormemente semplificato, ma comprende 
    il controllo effettuato tramite savepoint dentro un blocco di transazione.
    Inoltre, <command>ROLLBACK TO</command> è il solo modo per riprendere il
    controllo di un blocco di transazione abortito dal sistema a causa di un
    errore, scorciatoia che ci consente di non dover tornare indietro completamente
    e ripartire di nuovo.
   </para>

  </sect1>


  <sect1 id="tutorial-window">
   <title>Funzioni di Finestra</title>

   <indexterm zone="tutorial-window">
    <primary>funzione di finestra</primary>
   </indexterm>

   <para>
        Una <firstterm>funzione di finestra</firstterm> esegue calcoli attraverso un insieme di 
        righe della tabella che sono in qualche modo legate alla riga corrente. Questo è comparabile
        con i tipi di calcoli che possono essere svolti con una funzione aggregata.
        Diversamente dalle funzioni aggregate, l'uso di funzioni di finestra non comporta
        che le righe vengano raggruppate in una singola riga di output &mdash; le
        righe mantengono le loro identità separate. Dietro le quinte, la funzione
        finestra è capace di avere accesso a più della riga corrente del risultato della
        query.
   </para>

   <para>
        Ecco un esempio che mostra come confrontare ogni salario di impiegato/a
        con la media dei salari del suo reparto:

<programlisting>
SELECT depname, empno, salary, avg(salary) OVER (PARTITION BY depname) FROM empsalary;
</programlisting>

<screen>
  depname  | empno | salary |          avg          
-----------+-------+--------+-----------------------
 develop   |    11 |   5200 | 5020.0000000000000000
 develop   |     7 |   4200 | 5020.0000000000000000
 develop   |     9 |   4500 | 5020.0000000000000000
 develop   |     8 |   6000 | 5020.0000000000000000
 develop   |    10 |   5200 | 5020.0000000000000000
 personnel |     5 |   3500 | 3700.0000000000000000
 personnel |     2 |   3900 | 3700.0000000000000000
 sales     |     3 |   4800 | 4866.6666666666666667
 sales     |     1 |   5000 | 4866.6666666666666667
 sales     |     4 |   4800 | 4866.6666666666666667
(10 rows)
</screen>

        L'output delle prime tre colonne arriva direttamente dalla tabella
        <structname>empsalary</structname>, e c'è una riga di output per ogni riga della
        tabella. La quarta colonna rappresenta una media presa attraverso tutte le righe della
        tabella aventi lo stesso valore <structfield>depname</structfield> della riga corrente.
        (Questa attualmente è la stessa funzione della funzione aggregata  <function>avg</function>,
        me la clausola <literal>OVER</literal> comporta che sia tratta come 
        una funzione finestra e calcolata attraverso un insieme appropriato di righe.)
   </para>

   <para>
        Una chiamata a una funzione finestra contiene sempre una clausola <literal>OVER</literal>
        dopo il nome della funzione e l'argomento/i. Questo è quello che
        sintatticamente la distingue da una normale funzione aggregata.
        La clausola <literal>OVER</literal> determina esattamente come vengono
        separate le righe della query per essere processate dalla funzione finestra.
        L'elenco <literal>PARTITION BY</literal> all'interno della <literal>OVER</literal> specifica
        la divisione delle righe in gruppi, o partizioni, che condividono gli stessi valori 
        dell'espressione/i <literal>PARTITION BY</literal>. Per ogni riga,
        la funzione finestra è calcolata attraverso le righe che stanno nella
        stessa partizione della riga corrente.
   </para>

   <para>
        Sebbene <function>avg</function> produrrà lo stesso risultato senza considerare 
        l'ordine in cui processa le righe della partizione, questo non è vero per tutte le
        funzioni finestra. Quando lo si necessita, è possibile controllare l'ordine usando
        <literal>ORDER BY</literal> all'interno di <literal>OVER</literal>. Ecco un esempio:

<programlisting>
SELECT depname, empno, salary, rank() OVER (PARTITION BY depname ORDER BY salary DESC) FROM empsalary;
</programlisting>

<screen>
  depname  | empno | salary | rank 
-----------+-------+--------+------
 develop   |     8 |   6000 |    1
 develop   |    10 |   5200 |    2
 develop   |    11 |   5200 |    2
 develop   |     9 |   4500 |    4
 develop   |     7 |   4200 |    5
 personnel |     2 |   3900 |    1
 personnel |     5 |   3500 |    2
 sales     |     1 |   5000 |    1
 sales     |     4 |   4800 |    2
 sales     |     3 |   4800 |    2
(10 rows)
</screen>

        Come mostrato qui, la funzione  <function>rank</function> produce un grado numerico
        all'interno della partizione della riga corrente per ogni valore  <literal>ORDER BY</literal>
        distinto, nell'ordine definito dalla clausola <literal>ORDER BY</literal>.
        <function>rank</function> non necessita parametri espliciti, dato che il suo comportamento 
        è determinato interamente dalla clausola  <literal>OVER</literal>.
   </para>

   <para>
        Le righe considerate da una funzione finestra sono quelle della <quote>tabella
        virtuale</quote> prodotta dalla clausola <literal>FROM</literal> della query filtrata dalle clausole
        <literal>WHERE</literal>, <literal>GROUP BY</literal>, e <literal>HAVING</literal> (se presenti).
        Per esempio, una riga rimossa perchè non soddisfa la condizione 
        <literal>WHERE</literal> non è vista da nessuna funzione finestra.
        Una query può contenere molteplici funzioni window che "affettano" i dati
        in differenti modi a seconda di differenti clausole  <literal>OVER</literal>, ma
        agiscono tutte sulla stessa collezione di righe definita dalla tabella virtuale.
   </para>

   <para>
        È stato già detto che <literal>ORDER BY</literal> può essere omessa se l'ordinamento
        delle righe non è importante. È possibile anche omettere <literal>PARTITION
        BY</literal>, nel caso ci sia solo una partizione contenente tutte le righe.
   </para>

   <para>
        C'è un altro importante concetto associato alle funzioni finestra:    
        per ogni riga, c'è un insieme di righe all'interno della sua partizione chiamato il suo
        <firstterm>telaio di finestra</firstterm> ("window frame"). Molte funzioni di finestra (ma non tutte) agiscono solo
        sulle righe del telaio di finestra, invece che su tutta la partizione.
        Per default, se <literal>ORDER BY</literal> è impostata, allora il telaio consiste di 
        tutte le righe dall'inizio della partizione su fino alla riga corrente, più
        ogni riga seguente che sia uguale alla riga corrente in base alla clausola
        <literal>ORDER BY</literal>. Quando <literal>ORDER BY</literal> viene omessa il 
        telaio di default consiste di tutte le righe della partizione.
     <footnote>
      <para>
        Ci sono opzioni per definire il telaio di finestra in altre maniere, ma
        questo tutorial non le tratta. Vedere
        <xref linkend="syntax-window-functions"/> per ulteriori dettagli.
      </para>
     </footnote>
    Ecco un esempio che usa la funzione <function>sum</function>:
   </para>

<programlisting>
SELECT salary, sum(salary) OVER () FROM empsalary;
</programlisting>

<screen>
 salary |  sum  
--------+-------
   5200 | 47100
   5000 | 47100
   3500 | 47100
   4800 | 47100
   3900 | 47100
   4200 | 47100
   4500 | 47100
   4800 | 47100
   6000 | 47100
   5200 | 47100
(10 rows)
</screen>

   <para>
        Sopra, dato che non c'è <literal>ORDER BY</literal> nella clausola <literal>OVER</literal>,
        il telaio di finestra è la partizione, che per la mancanza di 
        <literal>PARTITION BY</literal> è la tabella completa; In altre parole ogni somma è
        presa sull'intera tabella e così si ottiene lo stesso risultato per ogni riga.
        Ma se si aggiunge una clausola <literal>ORDER BY</literal>, si ottengono risultati molto diversi:
   </para>

<programlisting>
SELECT salary, sum(salary) OVER (ORDER BY salary) FROM empsalary;
</programlisting>

<screen>
 salary |  sum  
--------+-------
   3500 |  3500
   3900 |  7400
   4200 | 11600
   4500 | 16100
   4800 | 25700
   4800 | 25700
   5000 | 30700
   5200 | 41100
   5200 | 41100
   6000 | 47100
(10 rows)
</screen>

   <para>
        Qui la somma viene presa dal primo (il più basso) salario in su fino al corrente,
        inclusi i duplicati del corrente (notare i risultati per i 
        salari duplicati).
   </para>

   <para>
        Le funzioni finestra sono permesse solo nell'elenco <literal>SELECT</literal>
        e nella clausola <literal>ORDER BY</literal> della query. Sono proibite 
        altrove, tipo nelle clausole <literal>GROUP BY</literal>, <literal>HAVING</literal>
        e <literal>WHERE</literal>. Questo perchè logicamente
        esse vengono eseguite dopo il trattamento di quelle clausole. Inoltre, le funzioni finestra
        vengono eseguite dopo le normali funzioni aggregate. Questo significa che è permesso
        includere una chiamata a una funzione aggregata negli argomento di una funzione finestra,
        ma non vice versa.
   </para>

   <para>
        Se non c'è il bisogno di filtrare o raggruppare le righe dopo che i calcoli sono eseguiti, 
        si possono usare le sotto-select. Per esempio:

<programlisting>
SELECT depname, empno, salary, enroll_date
FROM
  (SELECT depname, empno, salary, enroll_date,
          rank() OVER (PARTITION BY depname ORDER BY salary DESC, empno) AS pos
     FROM empsalary
  ) AS ss
WHERE pos &lt; 3;
</programlisting>

        La query sopra mostra solo le righe della query interna aventi 
        <literal>rank</literal> minore di <literal>3</literal>.
   </para>

   <para>
        Quando una query coinvolge molteplici funzioni finestra, è possibile scriverle
        separate da una clausola <literal>OVER</literal>, ma questo è soggetto
        ad errori se si vuole lo stesso comportamento della finestra per diverse funzioni.
        Invece, può esser dato un nome ad ogni comportamento di finestra in una clausola 
        <literal>WINDOW</literal> e poi essere referenziato con <literal>OVER</literal>.
        Per esempio:

<programlisting>
SELECT sum(salary) OVER w, avg(salary) OVER w
  FROM empsalary
  WINDOW w AS (PARTITION BY depname ORDER BY salary DESC);
</programlisting>
   </para>

   <para>
    More details about window functions can be found in
        Maggiori dettagli circa le funzioni finestra possono essere trovati in
    <xref linkend="syntax-window-functions"/>,
    <xref linkend="functions-window"/>,
    <xref linkend="queries-window"/>, e la pagina di referenza di 
    <xref linkend="sql-select"/>.
   </para>
  </sect1>


  <sect1 id="tutorial-inheritance">
   <title>Ereditarietà</title>

   <indexterm zone="tutorial-inheritance">
    <primary>ereditarietà</primary>
   </indexterm>

   <para>
    L'ereditarietà è un concetto per i database orientati agli oggetti.
    Essa apre interessanti nuove possibilità nella progettazione dei database.
   </para>

   <para>
    Andiamo a creare due tabelle: Una tabella <classname>cities</classname>
    e una tabella <classname>capitals</classname>. Naturalmente le capitali
    sono anche città, per cui dovete trovare il modo di mostrare implicitamente
    le capitali quando elencate tutte le città. Se siete veramente intelligenti
    è probabile che inventiate uno schema come questo:
    

<programlisting>
CREATE TABLE capitals (
  name       text,
  population real,
  altitude   int,    -- (in ft)
  state      char(2)
);

CREATE TABLE non_capitals (
  name       text,
  population real,
  altitude   int     -- (in ft)
);

CREATE VIEW cities AS
  SELECT name, population, altitude FROM capitals
    UNION
  SELECT name, population, altitude FROM non_capitals;
</programlisting>

    Questo schema lavora bene per fare interrogazioni, ma meno bene quando,
    per qualche motivo, si devono aggiornare parecchie righe.
   </para>

   <para>
    Una soluzione migliore è questa:

<programlisting>
CREATE TABLE cities (
  name       text,
  population real,
  altitude   int     -- (in ft)
);

CREATE TABLE capitals (
  state      char(2)
) INHERITS (cities);
</programlisting>
   </para>

   <para>
    In questo caso, una riga della tabella <classname>capitals</classname>
    <firstterm>eredita</firstterm> tutte le colonne (<structfield>name</structfield>,
    <structfield>population</structfield>, and <structfield>altitude</structfield>) dal suo
    <firstterm>genitore</firstterm>, <classname>cities</classname>. Il tipo di
    dato della colonna <structfield>name</structfield> è <type>text</type>,
    un tipo nativo di <productname>PostgreSQL</productname> per stringhe di
    caratteri di lunghezza variabile. Le capitali di stato hanno una colonna extra,
    <structfield>state</structfield>, che identifica il loro stato di appartenenza. In
    <productname>PostgreSQL</productname>, una tabella può ereditare da
    zero a diverse altre tabelle.
    
   </para>

   <para>
    Per esempio, la seguente query trova il nome di tutte le città,
    comprese le capitali di stato, che sono situate ad una altitudine 
    superiore ai 500 piedi:

<programlisting>
SELECT name, altitude
  FROM cities
  WHERE altitude &gt; 500;
</programlisting>

    che ritorna:

<screen>
   name    | altitude
-----------+----------
 Las Vegas |     2174
 Mariposa  |     1953
 Madison   |      845
(3 rows)
</screen>
   </para>

   <para>
    Mentre invece, la seguente query trova tutte le
    città che non sono capitali di stato e che sono
    situate ad una altitudine di 500 piedi o superiore:

<programlisting>
SELECT name, altitude
    FROM ONLY cities
    WHERE altitude &gt; 500;
</programlisting>

<screen>
   name    | altitude
-----------+----------
 Las Vegas |     2174
 Mariposa  |     1953
(2 rows)
</screen>
   </para>

   <para>
    Quì la notazione <literal>ONLY</literal> posta prima di
    <literal>cities</literal> indica che la query deve essere
    eseguita solo nella tabella <classname>cities</classname>, e non nelle
    tabelle sotto <classname>cities</classname> nella gerarchia di
    ereditarietà. Molti dei comandi che abbiamo già trattato
    &mdash; <command>SELECT</command>, <command>UPDATE</command>, e
    <command>DELETE</command> &mdash; supportano la
    notazione <literal>ONLY</literal>.
    
   </para>

   <note>
    <para>
     Anche se l'ereditarietà è utilizzata frequentemente, essa non è
     stata integrata con i vincoli unique o con la chiavi esterne, questo ne limita
     l'utilità. Vedere <xref linkend="ddl-inherit" /> per ulteriori dettagli.
    </para>
   </note>
  </sect1>


  <sect1 id="tutorial-conclusion">
   <title>Conclusioni</title>

   <para>
    <productname>PostgreSQL</productname> ha molte caratteristiche non
    trattate in questo tutorial introduttivo, che è orientato
    verso i nuovi utilizzatori di <acronym>SQL</acronym>. Queste
    caratteristiche sono discusse dettagliatamente nel resto di questo
    libro.
   </para>

   <para>
    Se si ritiene di aver bisogno di materiale introduttivo, visitate il
    <ulink url="http://www.postgresql.org">sito web</ulink> di postgresql
    per collegamenti a maggiori risorse.
   </para>
  </sect1>
 </chapter>
